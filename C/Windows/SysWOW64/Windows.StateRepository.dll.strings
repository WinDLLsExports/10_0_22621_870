                                     Callstack: %p %p %p %p %p %p %p %p %p %p %p %p
 [ Q7
 >TargetDeviceFamily
 0^0|0
 0<0O0b0
 090p0
 A:rF
 AND ((tv.Flags & ?) <> 0)
 AND ((tv.NotFlags & ?) = 0)
 AND ((tv.TileType & ?) <> 0)
 AND (tv._WorkId=0 OR tv._WorkId=?);
 AND tv._WorkId=0;
 AND tv.ApplicationUserModelId=?
 AND tv.TileId=?
 fwG1
 http://www.microsoft.com/windows0
 Microsoft Corporation. All rights reserved.
 Operating System
 Pct;<m
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) INNER JOIN Package AS p ON p._PackageID=dg.DependentPackage WHERE dg.User=?1 AND p.PackageFullName=?2 AND (dg._WorkId=0 OR dg._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND pu._WorkId=0 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) INNER JOIN Package AS p ON p._PackageID=dg.DependentPackage WHERE dg.User=?1 AND p.PackageFullName=?2 AND dg._WorkId=0 AND pel._WorkId=0 AND p._WorkId=0 LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) WHERE pu.User=?1 AND pu.Package=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) WHERE dg.User=?1 AND dg.DependentPackage=?2 AND (dg._WorkId=0 OR dg._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) WHERE pu.User=?1 AND pu.Package=?2 AND pu._WorkId=0 AND pel._WorkId=0 UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) WHERE dg.User=?1 AND dg.DependentPackage=?2 AND dg._WorkId=0 AND pel._WorkId=0 LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Bundle AS b ON b._BundleId = bp.Bundle INNER JOIN Package AS p ON p._PackageID = b.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE pf.PackageFamilyName=?1 AND bp.ResourceId=?2 AND (bp._WorkId=0 OR bp._WorkId=?3) AND (b._WorkId=0 OR b._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Bundle AS b ON b._BundleId = bp.Bundle INNER JOIN Package AS p ON p._PackageID = b.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE pf.PackageFamilyName=?1 AND bp.ResourceId=?2 AND bp._WorkId=0 AND b._WorkId=0 AND p._WorkId=0 LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM DependencyGraph AS dg INNER JOIN Package AS p ON p._PackageID = dg.SupplierPackage INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE dg.User=?1 AND dg.DependentPackage=?2 AND pf.PackageFamilyName=?3 AND (dg._WorkId=0 OR dg._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM DependencyGraph AS dg INNER JOIN Package AS p ON p._PackageID = dg.SupplierPackage INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE dg.User=?1 AND dg.DependentPackage=?2 AND pf.PackageFamilyName=?3 AND dg._WorkId=0 AND p._WorkId=0 LIMIT 1);
 Windows
!\$(!\$,!\$0
!]_0t
!0(0_0
!0(0N0
!0+0r0|0
!080A0{0
!j_Y=X
!MachineDatabase_PagesCheckpointed
!This program cannot be run in DOS mode.
!TkjE
"%},{
"0*0/0S0^0c0|0
"0,0v0
"090B0y0
"090V0y0
"0D0k0
"0F0b0
"Microsoft Window
"PackageDependency.LifetimeArtifact
#0G0c0
#0j0t0
#c^F5
#Deleted
#e?o37
#Found
#HMDuV
#PackageDependency.PackageFamilyName
$/OH??NRT
$>{fz
$0.0u0
$0[0q0
$DeploymentDatabase_PagesCheckpointed
$L=g7
$Microsoft Ireland Operations Limited1
$Microsoft Ireland Operations Limited1&0$
$SVWP
%!EBa
%|GFT
%0,0_0
%0/0o0v0
%02hu%02hu%02hu-%02hu%02hu%02hu-%u
%02u%02u%02u %02u%02u%02u.%03u [%s 0x%08X] P%x T%x: %s
%02u%02u%02u %02u%02u%02u.%03u [Profile %ums] P%x T%x: %s
%02u%02u%02u %02u%02u%02u.%03u [Trace] P%x T%x: %s
%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
%0A0T0
%AppRepository%
%AppRepository%\Downlevel\StateRepository-Machine.srd
%AppRepository%\StateRepository-Deployment.srd
%AppRepository%\StateRepository-Machine.srd
%AppRepository%\StateRepository-User-%UserSid%.srd
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
%I64d
%ls\%ls
%ls\SOFTWARE\Classes\%ls
%Microsoft Windows Production PCA 2011
%Microsoft Windows Production PCA 20110
%USERPROFILE%
&}]/^
&070%363
&go`4
&S|9a
(0/0o0
(0?0H0s0
(020i0p0
(0A0I0]0
(0L0d0}0
(9\$ t 
(caller: %p) 
(database)
(database.incremental)
(Inbox) Package rows w/no PackageUser references
(Non-Inbox) Package rows w/no PackageUser references
(PVWh`
(VPQh
(WQh`
)0@0I0{0
)030s0z0
)0I0\0m0
)0Rf~
)Microsoft Root Certificate Authority 20100
)X;c,
*[tof
*02090Y0s0
*040t0{0
*ei|t)m
*F0zf
*HostName\*
*HostName\*\
,*)J:
,\r+|
,]=Zw5P8B
,00080@0X0
,040M0
,050\0e0
,060v0}0
,0f0s0
,7/7f0lgkTgDZUUKFx2bDZFdKSG3Y6xranhJOjddABFo=0Z
,fjA~
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVexception@std@@
.?AVtype_info@@
.|m}-
.00cfg
.050<0^0{0
.050o0
.0J0x0
.bss$00
.bss$01
.bss$09
.bss$dk00
.bss$dk01
.bss$dk09
.bss$pr00
.bss$pr01
.bss$pr09
.bss$zz
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$00
.data$09
.data$dk00
.data$dk00$brc
.data$dk01
.data$dk01$brc
.data$dk09
.data$pr00$brc
.data$r$brc
.data$rs$brc
.data$zz$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.Gp0ec);cu5(
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.rdata
.rdata$00
.rdata$01
.rdata$brc
.rdata$r$brc
.rdata$sxdata
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zz
.rdata$zz$brc
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$lp00windows.staterepository.dll!20_pri7
.text$lp01windows.staterepository.dll!20_pri7
.text$lp03windows.staterepository.dll!30_clientonly
.text$lp06windows.staterepository.dll!35_hybridboot
.text$lp08windows.staterepository.dll!50_coldboot
.text$lp09windows.staterepository.dll!50_coldboot
.text$mn
.text$np
.text$s
.text$x
.text$yd
.text$zs
.text$zy
.text$zz
.upgrade
.wdk3
.xdata$x
/060o0
/090K0p0
/0I0P0W0r0
/0S0X0i0
/0Z0y0
/1q,:|-
/f.C)/
/PackageStatics::GetByUserOrDefaultAccountAndPackageFullName
/Tkeos
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :(:,:0:4:<:@:D:H:P:T:X:\:d:h:l:p:x:|:
: :::}:
: :@:`:
: :E:X:
: :r:
: ;*;];g;
: ;';_;
: ;_;y;
: ;<;
: ;5;<;\;v;
: ;6;H;
: ;8;C;M;
: ;9;p;
: ;I;o;
: ;k;u;
: ;p;
: ;q;
: ;R;
:!:%:):-:1:5:]:
:!:(:G:O:\:c:j:q:
:!:,:9:@:G:Y:q:{:
:!:/:w:
:!:::{:
:!:0:F:
:!:6:X:u:
:!:b:
:!:h:r:
:!:l:v:
:!:V:h:t:
:!;[;
:!;+;g;q;
:!;L;
:!;n;
:":&:*:.:2:6:::>:e:x:
:":):?:m:x:
:":,:3:p:
:":;:
:":4:
:":l:
:":W:
:";);0;P;j;
:";,;l;s;
:";~;
:#:(:C:`:i:n:
:#:):D:Y:`:f:x:
:#:*:1:S:p:~:
:#:-:^;
:#:-:8:E:L:S:Z:k:
:#:-:8:E:L:S:Z:m:
:#:<:I:\:u:
:#:0:
:#;-;d;k;
:#;f;
:$:[:b:
:$:6:N:X:c:p:w:~:
:$:c:}:
:$:o:
:$:R:]:d:k:
:$:X:
:$;-;9;F;V;`;p;z;
:$;`;
:$;~;
:$;+;h;
:$;M;b;
:$;s;
:%:,:?:c:j:q:
:%:,:}:
:%:,:L:f:
:%:1:L:{:
:%:4:D:S:o:y:
:%:Z:p:
:%;,;
:%;,;^;u;~;
:%;,;_;
:%;,;};
:%;,;3;U;r;
:%;/;j;t;
:%;/;v;
:%;[<g<n<
:%;5;M;
:%;Q;
:%;v;
:&:?:X:
:&:>:H:S:`:g:n:u:
:&:1:>:E:L:S:f:~:
:&:m:w:
:&:O:e:
:&:X:
:&;-;4;V;s;
:&;0;g;n;)<0<N<
:&;1;>;E;L;^;
:&;4;n;
:(:::d:z:
:(:=:L:\:
:(:9:N:_:
:(:D:O:\:c:j:|:
:(:F:
:(:P:n:
:(:V:
:(:x:
:(;?;\;
:(;@;i;
:(;B;j;};
:(;N;n;
:):[:
:):`:|:
:):`:g:
:):|:
:):}:
:):7:\:
:):8:N:`:o:~:
:):E:X:r:
:):F:S:~:
:):N:a:
:):v:
:);?;Y;`;
:);>;b;
:);3;o;y;
:);3;s;z;
:);3;z;
:);I;P;p;
:);j;2<@<L<S<
:);v;
:*:<:V:l:
:*:C:{:
:*:u:
:*;4;t;{;
:,:::Y:g:
:,:?:R:
:,:2:T:|:
:,:3:S:m:
:,:5:\:e:
:,:B:g:z:
:,:p:
:,:t:
:,;:;A;j;
:,;|;
:,;4;H;
:,;6;v;};
:,;k;
:.:7:
:.:F:_:
:.:F:P:[:h:o:v:}:
:.:Q:
:.:R:Y:`:v:
:.:S:f:
:.:u:
:.;I;
:.;Z;
:/:A:H:
:/:L:o:
:/:z:
:/;:;?;|;
:/;^;
:/;9;
:/;e;
:/;i;
:/;l;
:/;N;
:/;p;
:/;T;l;
:/<9<K<
:::G:k:
::;D;{;
:':@:
:':3:;:j:v:
:-:4:G:
:':5:A:H:
:-:7:A:a:
:':9:c:y:
:':9:M:g:s:
:':c:
:':g:n:
:-:k:
:':L:
:-:V:l:
:;:^:
:;:Q:
:;;B;I;i;
:;;E;
:;;G;N;u;
:;;R;};
:';=;O;y;
:-;7;~;
:-;d;
:-;d;};
:';p;j<s<
:?:^:
:?:|:
:?:c:
:?:l:
:?;{;
:?;F;
:?;I;
:?;L;S;Z;s;
:?;n;
:?;y;
:?;Z;
:?<g<
:@:G:m:t:{:
:@:S:i:
:@;Y;
:\:|:
:\:f:
:\:i:
:\;{;
:]N2Y
:^:e:l:
:^:y:
:`:j:
:|3yy
:~<W=
:+:;:J:Y:o:
:+:[:o:w:
:+:2:[:
:+:4:9:E:^:
:+:4:9:M:
:+:4:k:
:+:D:o:
:+:O:r:
:+:x:
:+;2;o;
:+;8;?;F;X;{;
:+;G;h;
:+;k;
:+;Z;{;
:<:_:
:<:i:
:<:j:w:
:<:x:
:<;{;
:<;D;];
:<;F;
:=:o:
:=;D;
:=;D;=<T<v<
:=;G;
:>:a:
:>:f:
:>;E;=<T<v<
:>;H;
:>;U;r;
:0:I:
:0:L:i:
:0:P:`:
:0:Y:
:0;`;
:0;D;f;|;
:0;H;^;h;y;
:0;P;
:0;W;v;
:0;x;
:0G0N0U0n0
:1:F:p:
:1:I:b:
:1:M:
:1:R:
:1:r:
:1:x:
:1:Z:o:
:1;;;
:1;;;{;
:1;{;
:1;g;x;
:1;k;
:1p/+$
:2:}:
:2:I:U:i:
:2:W:
:2:W:j:
:2;<;|;
:2;9;@;G;[;
:2;b;p;z;
:2;b;x;
:2;D;Z;
:2;L;
:3:=:G:v:
:3:A:P:d:
:3:F:j:
:3:H:
:3:x:
:3<E<L<u<$=.=5=q=
:4:D:n:
:4:J:\:
:4:O:i:z:
:4:O:w:
:4:P:
:4:t:
:4:Z:
:4;;;o;
:4;<;x;
:4;>;~;
:4;L;
:4;l;
:4;t;
:5:@:
:5:{:
:5:p:
:5;?;z;
:5;^;
:6:D:i:
:6:F:j:
:6:V:c:j:q:
:6;D;d;r;
:6;r;
:7:J:s:
:7:L:g:~:
:7:L:i:
:7;>;
:7;A;
:8:>:Z:
:8:I:e:o:
:8:j:
:8:K:t:
:8:Q:i:t:~:
:8:X:
:8;?;
:8;K;j;
:8;P;
:8;w;
:9:L:u:
:9;C;
:9;c;
:9;e;v;
:A:{:
:A:f:
:A:H:n:u:|:
:a:k:
:a:y:
:A:Y:
:A;~;
:B:K:
:B:n:
:B:P:o:z:
:B:z:
:B;\;
:b;|;
:B;~;
:B;R;j;
:C:Z:h:
:D:\:
:d:{:
:D:K:
:E:L:
:e:o:
:E:O:Y:
:E;O;
:E;R;v;
:F:\:s:
:f:p:
:F;\;r;
:F;];
:g:|:
:g:q:
:H:c:
:H:O:
:H:R:
:H;_;|;
:H;c;
:I:`:i:
:I:P:
:I:S:
:I:Z:
:I;q;
:i;r;
:I;S;
:I;T;
:J:]:
:J:Q:X:z:
:J:T:
:J;T;
:j;x;
:K:U:
:L:l:}:
:l:u:
:L:Y:}:
:M:b:
:M:T:[:b:x:
:m:z:
:M:Z:~:
:m;s<|<
:memory:
:N:|:
:N:b:
:N:U:\:c:y:
:N:U:n:
:N:X:
:N;[;
:N;i;
:O:~:
:O:L;
:O:n:
:O:Y:
:P:i:
:P:j:q:
:P:l:
:P:Z:
:Q:h:q:
:Q:n:
:Q;q;
:R:\:
:r:y:
:R:Y:
:S:]:
:S:z:
:T:\:
:T;c;o;
:Tt3n
:U:b:
:U:c:|:
:V:`:
:W:a:
:W:a:s:
:W:n:w:
:X:a:
:X:k:
:X:o:
:X;p;
:x}-ej
:y:3;
:Y:y:
:Z:d:
:Z:r:
:Z;m;w;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;,;0;4;8;@;D;H;L;T;X;\;`;h;l;p;t;|;
; ;;;J;r;
; ;@;`;
; ;+>
; ;9;p;
; ;E;X;
; ;n;
; ;P;
; ;Z;
; <)<^<e<
; <*<t<~<
; <_<
; <6<
; <9<
; <j<
; <k<
; <k<u<
; <m<
; =|=
;!;(;
;!;(;C;]<o<{<
;!;/;Q;Y;m;
;!;;;L;[;j;y;
;!;_;f;
;!;L;i;
;!;u;
;!;U;
;!<[<
;!<]<
;!<+<
;!<9<
;!<l<v<
;!<M<|<
;!<N<|<
;!<S<Z<a<
;";);I;c;
;";:;
;";;;|;
;";;;x;
;";_;
;";>;G;
;";4;?;F;M;Z;
;";m;w;
;"<c<
;"<G<l<
;#;*;1;F;c;
;#;/;
;#;;;E;P;];d;k;r;
;#;-;8;E;L;S;Z;m;
;#;\;
;#;_;
;#<*<1<Q<k<
;#<:<\<
;#<`<
;#<-<t<~<
;#<-<w<
;#<=<M<_<q<
;#<3<A<i<
;#<9<m<
;#<9<O<
;#<g<
;$;:;s;z;
;$;+;2;f;
;$;>;\;t;
;$;2;
;$;6;E;R;`;r;
;$;8;
;$;E;b;};
;$;g;
;$;S;f;
;$<.<u<
;$<;<N<
;$<?<\<
;$<`<s<
;$<|<
;$<+<z<
;$<l<y<
;$<M<[<
;$<t<
;$<u<
;%;,;B;{;
;%;,;k;
;%;^;
;%;8;a;w;
;%;e;l;
;%;G;
;%;J;];
;%;l;v;
;%;o;y;
;%</<o<v<
;%</<v<
;%<2<V<y<
;%<6<
;%<A<j<
;%<d<
;%<e<
;%<g<{<
;&;/;a;n;u;|;
;&;-;@;d;k;r;
;&;<;
;&;5;D;T;d;
;&;A;
;&;E;X;
;&;F;`;y;
;&;f;m;
;&;O;e;
;&<<<R<
;&<J<Z<y<
;&<k<y<
;(;/;O;i;
;(;:;N;e;q;
;(;@;J;U;b;i;p;w;
;(;\;
;(;1;h;
;(;2;G;e;n;s;
;(;9;J;x;
;(;9;N;_;
;(;B;
;(;B;l;{;
;(;d;n;
;(;D;r;
;(;G;|;
;(<\<
;(<2<i<p<
;);?;d;w;
;);`;|;
;);|;
;);4;A;H;O;a;y;
;);O;
;);r;
;);t;~;
;)<><
;)<2<g<n<
;)<3<j<q<
;)<M<i<
;)<S<
;)<w<
;*;/;H;
;*;:;Y;
;*;1;7;;;D;H;
;*;G;r;
;*;P;
;*;U;s;
;*<4<k<r<
;*<4<u<
;*<7<U<
;*<Y<f<
;,;?;R;
;,;4;O;
;,;5;g;t;{;
;,;C;O;c;
;,;D;];
;,;t;
;,;u;
;,<:<A<a<{<
;,<4<M<
;,<5<\<e<
;,<6<v<}<m=
;,<a<
;,<F<M<
;,<l<
;,<Z<o<
;.;|;
;.;B;];
;.;k;
;.;n;
;.;V;l;
;.<;<X<
;.<?<J<V<
;.<=<I<n<}<
;.<5<c<y<
;.<9<B<S<^<
;.<I<o<
;.<L<S<s<
;.<m<
;.<Q<
;/;|;
;/;I;_;y;
;/;J;\;y;
;/;N;`;
;/;U;{;
;/<^<
;/<6<o<
;/<9<
;/<e<
;/<E<
;/<e<
;/<l<
;/<M<f<
;/<o<
;/<S<
;/<S<X<i<
;:;T;[;
;:<\<
;';.;5;G;_;i;t;
;';.;u;|;
;-;:;N;^;n;~;
;-;;;C;^;
;;;E;|;
;-;?;o;
;';@;
;;<E<
;-;>;
;-;6;;;
;';6;J;q;|;
;-;b;w;
;';C;b;i;z;
;-;E;`;
;';i;
;';L;
;-;V;l;
;';Y;f;m;t;
;?;I;p;
;?;y;
;?<I<
;?<L<p<
;?<n<
;?<P<j<
;?<Z<
;@;l;};
;@<o<
;@<Y<
;[;e;
;[<{<
;[<i<u<|<
;\$ r
;\;f;
;];j;
;];p;
;];z;
;^<y<
;_;f;
;_;i;
;_;y;
;{<#=l=u=
;+;>;
;+;9;`;m;
;+;E;^;
;+;H;
;+;n;
;+;n;{;
;+;S;a;j;
;+;W;h;
;+<4<r<
;+<8<?<F<X<{<
;+<A<
;<;a;
;<;H;Y;
;<;K;W;k;v;
;<;q;
;<;S;`;j;};
;'<_<~<
;<<q<
;<<r<
;'<=<O<
;'<><G<
;'<1<q<x<
;-<d<
;'<j<
;'<L<d<}<
;'<r<
;'<s<
;=;<<
;=;S;x;
;=<X<
;>;};
;>;E;L;n;
;>;R;Z;};
;>;T;y;
;><g<
;><H<
;><Y<
;0;:;J;[;
;0;5;N;
;0;7;k;
;0;B;M;T;[;h;
;0;C;l;
;0;F;k;~;
;0;I;
;0;J;|;
;0;Y;
;0<=<o<|<
;0<I<
;0<L<]=t=
;0<m<
;0<O<
;0<o<
;0U0m0
;1;:;q;
;1;|;
;1;G;Y;
;1;K;r;
;1;t;
;1;Z;o;
;1<;<{<
;1<?<
;1<|<
;1<8<Q<
;1<c<
;1<o<
;1<Q<`<
;1<x<
;2%CVN
;2;<;l;
;2;D;
;2;H;m;
;2;K;
;2;k;r;y;
;2;O;m;
;2;p;
;2;P;o;
;2;Q;
;2;r;
;2;W;j;
;2<<<|<
;2<9<o<
;2<n<
;2<Q<
;3;~;
;3;=;H;U;\;c;j;{;
;3;=;R;n;w;|;
;3;F;P;o;
;3;R;
;3<:<A<a<{<
;3<|<
;3<=<
;3<e<
;4;;;o;
;4;b;
;4;N;g;
;4;V;
;4<?<F<
;4<|<
;4<><~<
;4<><y<
;4<C<O<
;4<G<
;4<t<
;5;r;z;
;5;T;~;
;5<?<
;5<a<
;5<H<V<d<
;5<u<
;6;\;
;6;T;
;6<|<
;6<j<s<x<
;6<Q<
;6<R<
;7;>;^;
;7;>;y;
;7;B;O;V;];o;
;7;i;
;7;I;
;7<A<t<~<
;7<c<|<
;7<N<
;7<q<
;7<R<
;8;[;
;8;>;F;Q;Z;c;j;q;w;{;
;8;K;t;
;8<E<i<
;9;G;l;
;9;O;
;9;R;
;9;S;
;9;T;
;9;X;
;9<A<}<
;9<c<
;9<C<z<
;A t0
;A$r+j
;a;|;
;A;H;O;e;
;a;k;
;A;k;~;
;A;P;
;A;T;};
;a;y;
;B;\;c;
;B;f;|;
;B;I;P;r;
;B;U;t;
;B<\<
;B<m<
;C;{;
;C;M;
;C;q;
;C;V;
;C;V;u;
;C;Y;k;
;C<l<
;c<v<
;D$$s
;D;i;
;D;K;
;d;n;
;D;T;f;
;D;U;
;D;Z;
;D<N<
;d<s<
;D<S<_<
;E;_;
;e;|;
;e;~;
;E;d;
;E;L;
;E;q;
;E;X;
;E<L<S<s<
;E<O<
;f<s<
;G(u"
;G(v&
;G(v,
;G;k;
;g;o;
;G;w;
;G<n<
;H;_;q;
;H;O;V;];
;H<`<
;HHt;
;I;e;
;i;s;
;I;x;
;J$s?
;J;b;
;J<]<g<w<
;K;a;s;
;K;f;
;K;r;
;K;R;
;K;U;
;K<U<g<
;K<z<
;L$Dw
;L;U;|;
;L;V;
;l<u<
;L<U<
;M;W;
;M;Z;w;
;N;];
;N;i;
;N;u;
;N;v;
;N;X;m;
;N<T<t?
;O;|;
;O;s;x;
;O;Y;
;O;Z;_;
;P;i;
;P;W;^;e;{;
;P;x;
;P;Y;
;P;y;
;P;Z;
;q;)<h<
;Q;};
;q;-<
;Q;i;
;Q@t)S
;Q@t;
;Q@t+S
;Q@t4
;Q@t4S
;R;Z;_;
;R<x<
;S$s;
;S;];
;s;};
;SRD1
;T;^;
;T<s<
;U;\;
;U;_;
;U;|;
;U;F<
;V;`;
;W$v3
;W;e;x;
;X;_;
;X<o<
;X<p<
;Y;u;
;Z;|;
;Z;d;
;Z;j;|;
;z<%=F=P=Z=
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?(?,?0?4?<?@?D?H?P?T?X?\?d?h?l?p?x?|?
? ?-?4?;?B?T?\?c?j?q?
? ?3?W?^?e?{?
? ?M?Z?r?
?!?(?\?
?!?[?
?!?`?j?
?!?~?
?!?1?A?Q?a?
?!?3?w?
?!?A?[?
?!?F?Y?
?!?h?r?
?!?l?
?!?u?
?"?(?.?9???V?q?
?"?)?I?c?
?"?)?I?y?
?"?)?U?
?"?_?
?"?>?H?Q?
?"?0?8?S?
?"?5?Y?`?g?}?
?"?a?
?"?F?i?
?"?F?M?T?j?
?"?G?
?"?Y?
?#?_?h?
?#?6?e?
?#?b?l?
?#?O?
?#?v?
?$?@?w?
?$?0?>?~?
?$?F?v?
?$?J?e?~?
?$?k?u?
?%?,?3?:?M?q?x?
?%?,?3?g?
?%?\?j?q?
?%?=?Z?l?
?%?8?f?
?%?L?U?
?%?q?
?&?]?d?
?&?_?
?&?`?
?&?f?m?
?&?I?
?&?s?
?(?/?D?T?z?
?(?@?]?o?
?(?8?R?a?v?
?(?E?p?
?(?o?y?
?(?P?
?(?s?}?
?)?;?o?
?)?`?|?
?)?3?<?E?U?^?s?
?)?b?q?
?)?h?r?
?)?l?y?
?)?t?
?)?t?~?
?*?7?>?E?L?^?z?
?*?7?>?E?W?o?y?
?*?k?r?y?
?,???|?
?,?E?
?,?N?\?~?
?,?O?
?,?r?y?
?,?t?
?,?T?
?,?t?
?,?u?
?.?5?P?X?e?l?s?z?
?.?D?U?i?|?
?.?Q?
?.?Q?[?b?v?
?.?y?
?/?^?
?/?E?j?}?
?/?G?`?
?/?G?Q?\?i?p?w?~?
?/?L?o?
?/?p?
?/=KzdN
?:?[?
?;?B?
?;?F?K?d?
?;?i?p?
?;?Q?v?
?'?;?J?Y?m?|?
?'???
???^?
???{?
???F?z?
???k?
???W?p?
?'?^?e?
?-?2?O?r?w?
?-?6?m?
?-?6?w?
?'?9?o?
?'?E?L?S?u?
?'?g?n?
?'?L?
?'?r?|?
?@?n?
?@?U?y?
?@s-f
?[?d?
?\?d?}?
?]?{?
?]?g?
?^?o?x?
?_?d?u?
?_?i?
?_?x?
?_?z?
?`?j?
?`?k?p?
?`?v?
?+?b?
?+?E?j?
?+?H?
?+?N?
?<?[?~?
?<?`?l?
?<?E?l?u?
?<?J?R?m?
?<?M?
?<?O?
?<?q?
?<?Y?g?o?
?=?`?
?=?J?n?
?=?N?w?
?=?t?
?>?K?
?>?L?j?
?0?:?r?
?0?_?
?0?{?
?0?9?>?J?g?
?0?B?T?_?f?m?z?
?0?I?
?0?J?c?
?0?X?h?
?1???
?1?{?
?1?D?m?
?1?q?
?1?t?~?
?1?x?
?1?X?q?x?
?2?9?m?
?2?K?
?2?N?Y?f?m?t?
?2?T?
?2?y?
?3?8?I?
?3?K?d?
?3?M?V?[?
?3?U?\?
?3?w?
?4?c?
?4?i?
?4?M?q?v?
?4?O?i?
?4?V?
?5?<?C?e?
?5?E?d?r?
?5?N?y?
?5?S?Z?a?
?6???D?n?
?6?O?
?6?P?w?
?7?~?
?7?K?`?v?
?7?L?i?
?7?P?
?7?T?b?j?
?7?W?u?
?8?_?
?8?E?e?m?
?8?E?L?S?e?
?8?F?{?
?8?F?c?
?8?l?
?8?P?i?
?8?Q?
?9?\?
?9?m?
?9?Q?w?
?9?S?l?
?9?T?
?9?x?
?A?K?r?
?A?W?y?
?BJW5
?c?m?
?C?U?
?c?y?
?d?{?
?D?K?
?D?Z?
?E?[?
?E?c?
?E?L?
?e?n?
?e?o?
?F?[?b?
?F?M?
?F?M?T?}?
?F?P?
?F?W?
?F?z?
?G?}?
?g?v?
?H?O?
?h?u?
?I?`?i?
?I?c?z?
?J?n?
?J?T?
?K?R?
?K?s?
?L?S?
?L?U?|?
?M?{?
?M?|?
?M?Z?w?
?N?m?
?N?q?
?N?U?
?N?u?
?N?U?
?N?U?\?~?
?N?X?
?O?~?
?O?j?
?O?n?
?O?s?x?
?O?Y?
?O?Z?_?
?p?{?
?P?W?
?Q?[?
?Q?_?
?Q?h?q?
?Q?i?
?Q?r?
?R?|?
?S?_?
?S?o?
?S?x?
?T?^?
?T?k?~?
?U?\?c?
?U?_?
?U?j?q?
?U?n?
?V?]?d?k?
?V?`?
?V?m?v?
?V?n?u?
?W?a?
?X?}?
?X?o?
?Xle/
?Y?u?
?Y?v?
@.didat
@.reloc
@;B(v(
@;G(v(
@;G(vT
@_^[]
@6+Y3
@DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Activation_ActivationKey;CREATE TRIGGER TRG_AFTERINSERT_Activation_ActivationKey AFTER INSERT ON Activation FOR EACH ROW WHEN NEW.ActivationKey IS NULL BEGIN UPDATE Activation SET ActivationKey=hash_base32(NEW.Flags, NEW.Executable, NEW.Entrypoint, NEW.RuntimeType, NEW.StartPage, NEW.ResourceGroup)WHERE _ActivationID=NEW._ActivationID;END;DROP INDEX IF EXISTS IDX_Application_ApplicationUserModelId_Package;CREATE INDEX IDX_Application_ApplicationUserModelId_Package ON Application(ApplicationUserModelId, Package);DROP INDEX IF EXISTS IDX_Application_Package;CREATE INDEX IDX_Application_Package ON Application(Package);DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Application_ApplicationIdentity;CREATE TRIGGER TRG_AFTERINSERT_Application_ApplicationIdentity AFTER INSERT ON Application FOR EACH ROW BEGIN INSERT OR IGNORE INTO ApplicationIdentity (ApplicationUserModelId) VALUES(NEW.ApplicationUserModelId);END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Package_PackageIdentity;CREATE TRIGGER TRG_AFTERINSERT_Package_PackageIdentity AFTER INSERT ON Package FOR EACH ROW BEGIN INSERT OR IGNORE INTO PackageIdentity (PackageFamily, PackageFullName) VALUES(NEW.PackageFamily, NEW.PackageFullName);END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageUser_PackageFamilyUser;CREATE TRIGGER TRG_AFTERINSERT_PackageUser_PackageFamilyUser AFTER INSERT ON PackageUser FOR EACH ROW WHEN is_triggers_enabled()BEGIN INSERT OR IGNORE INTO PackageFamilyUser (PackageFamily, User, WhenInstalled, _Revision)SELECT p.PackageFamily, NEW.User, now(), 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE (SELECT EXISTS(SELECT 1 FROM User WHERE _UserID=NEW.User AND UserSid<>X'010100000000000512000000'))AND NEW.Package=p._PackageID;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageUser_PackageFamilyUser;CREATE TRIGGER TRG_BEFOREDELETE_PackageUser_PackageFamilyUser BEFORE DELETE ON PackageUser FOR EACH ROW WHEN is_triggers_enabled()BEGIN DELETE FROM PackageFamilyUser WHERE (SELECT EXISTS(SELECT 1 FROM User WHERE _UserID=OLD.User AND UserSid<> X'010100000000000512000000'))AND User=OLD.User AND PackageFamily IN (SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE OLD.Package=pu.Package AND OLD.User=pu.User LIMIT 1) AND (SELECT EXISTS(SELECT 1 WHERE (SELECT COUNT(*) AS count FROM PackageUser AS pu INNER JOIN Package AS p ON p.rowid=pu.Package WHERE p.PackageFamily IN (SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE OLD.Package=pu.Package AND OLD.User=pu.User)) <= 1));END;DROP TRIGGER IF EXISTS TRG_AFTERDELETE_PackageUser_AppExecutionAliasUser_DynamicAppUriHandlerGroup;CREATE TRIGGER TRG_AFTERDELETE_PackageUser_AppExecutionAliasUser_DynamicAppUriHandlerGroup AFTER DELETE ON PackageUser FOR EACH ROW WHEN is_triggers_enabled()BEGIN DELETE FROM AppExecutionAliasUser WHERE User=OLD.User AND ApplicationIdentity NOT IN (SELECT ai._ApplicationIdentityID FROM ApplicationIdentity AS ai INNER JOIN Application AS a ON a.ApplicationUserModelId=ai.ApplicationUserModelId INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=OLD.User);DELETE FROM DynamicAppUriHandlerGroup WHERE User=OLD.User AND PackageFamily NOT IN (SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=OLD.User);END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PrimaryTileUser_Key;CREATE TRIGGER TRG_AFTERINSERT_PrimaryTileUser_Key AFTER INSERT ON PrimaryTileUser FOR EACH ROW WHEN is_triggers_enabled() AND NEW._WorkId=0 AND NEW._Created=0 BEGIN DELETE FROM PrimaryTileUserChangelog WHERE NEW._Created=0 AND User=NEW.User AND TileUniqueId=NEW.TileUniqueId;END;DROP TRIGGER IF EXISTS TRG_AFTERDELETE_PrimaryTileUser_Key;CREATE TRIGGER TRG_AFTERDELETE_PrimaryTileUser_Key AFTER DELETE ON PrimaryTileUser FOR EACH ROW WHEN is_triggers_enabled() AND OLD._WorkId=0 BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=1;INSERT OR REPLACE INTO PrimaryTileUserChangelog(_Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT 1, workid(), OLD._Created, s.LastValue, OLD.User, OLD.TileUniqueId, now(), NULL FROM Sequence AS s WHERE s.Id=1;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_SRJournal_SRJournalArchive;CREATE TRIGGER TRG_BEFOREDELETE_SRJournal_SRJournalArchive BEFORE DELETE ON SRJournal FOR EACH ROW WHEN sroptions() & 0x00100000 != 0 BEGIN INSERT INTO SRJournalArchive(_Revision, _WorkId, ObjectType, "Action", ObjectId, Flags,User, PackageFamily, PackageIdentity, ApplicationIdentity, Application, Package, PackageUser,WhenOccurred, SequenceId, _Dictionary)SELECT OLD._Revision, OLD._WorkId, OLD.ObjectType, OLD."Action", OLD.ObjectId, OLD.Flags,OLD.User, OLD.PackageFamily, OLD.PackageIdentity, OLD.ApplicationIdentity, OLD.Application, OLD.Package, OLD.PackageUser,OLD.WhenOccurred, OLD.SequenceId, OLD._Dictionary;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_SecondaryTileUser_Key;CREATE TRIGGER TRG_AFTERINSERT_SecondaryTileUser_Key AFTER INSERT ON SecondaryTileUser FOR EACH ROW WHEN is_triggers_enabled() AND NEW._WorkId=0 AND NEW._Created=0 BEGIN DELETE FROM SecondaryTileUserChangelog WHERE NEW._Created=0 AND User=NEW.User AND TileUniqueId=NEW.TileUniqueId;END;DROP TRIGGER IF EXISTS TRG_AFTERDELETE_SecondaryTileUser_Key;CREATE TRIGGER TRG_AFTERDELETE_SecondaryTileUser_Key AFTER DELETE ON SecondaryTileUser FOR EACH ROW WHEN is_triggers_enabled() AND OLD._WorkId=0 BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=1;INSERT OR REPLACE INTO SecondaryTileUserChangelog(_Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT 1, workid(), OLD._Created, s.LastValue, OLD.User, OLD.TileUniqueId, now(), NULL FROM Sequence AS s WHERE s.Id=1;END;DROP INDEX IF EXISTS IDX_SecondaryTileUser_User;CREATE INDEX IDX_SecondaryTileUser_User ON SecondaryTileUser(User);
@onecore\base\appmodel\staterepository\winrt\client\srv\dal-repository.cpp
@RepositoryManager::Upgrade
@RtlIsStateSeparationEnabled
@SELECT PackageFullName, PackageFamily, PackageType, Flags, Flags2, PackageOrigin, Volume, OSMaxVersionTested, InstalledLocation, MutableLink, MutableLocation, TargetDeviceFamilyName FROM CachePackage WHERE _CachePackageID=?;
@W#9x
@xQH#
[%hs(%hs)]
[%hs]
[:AUe
[checkstatements] #%u Database %p: Statement %p: %s SQL %s
[DatabaseCache.Add] #%u Database %p: StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[DatabaseCache.Get(Hit)] #%u DatabaseCache %p: Database %p: StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[DatabaseCache.Get(Miss)] #%u DatabaseCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[io:xClose] #%u xClose() failed
[LLry
[post-sqlite3_exec] #%u Database %p: Try %u (%llums) {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X} TID:%u : SQL %s
[post-sqlite3_finalize] #%u Database %p: Statement %p: --
[post-sqlite3_prepare] #%u Database %p: Statement -------- --: Try %u (%llums) : SQL %s
[post-sqlite3_prepare] #%u Database %p: Statement %p %s: Try %u (%llums) : SQL %s
[post-sqlite3_reset] #%u Database %p: Statement %p: %s
[post-sqlite3_step] #%u Database %p: Statement %p %s: Tries %u
[pre-DatabaseCache.Get] #%u DatabaseCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[pre-sqlite3_exec] #%u Database %p {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X} TID:%u : SQL %s
[pre-sqlite3_finalize] #%u Database %p: Statement %p: %s
[pre-sqlite3_prepare] #%u Database %p : SQL %s
[pre-sqlite3_reset] #%u Database %p: Statement %p: %s
[pre-sqlite3_step] #%u Database %p: Statement %p %s
[pre-StatementCache.Get] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[s35C
[sqlite3_close] #%u Database %p: %s
[sqlite3_exec] #%u Database %p: Try %u (%llums) {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}%s%s TID:%u %s : SQL %s
[sqlite3_finalize] #%u Database %p: Statement %p: --: %s
[sqlite3_open: lastErrNo:0x%X filecontrolrc:%d] #%u Database %p: %hs
[sqlite3_open: lastErrNo:0x%X filecontrolrc:%d] #%u Database %p: %s
[sqlite3_prepare] #%u Database %p: Try %u (%llums) %s : SQL %s
[sqlite3_prepare] #%u Database %p: Try %u (%llums)%s%s %s : SQL %s
[sqlite3_reset] #%u Database %p: Statement %p: %s: %s
[sqlite3_step] #%u Database %p: Statement %p %s: Try %u (%llums)%s%s %s : SQL %s
[StatementCache.Add(list)] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[StatementCache.Add] #%u Database %p: StatementCache %p: Statement %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[StatementCache.Get(Hit)] #%u Database %p: StatementCache %p: Statement %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[StatementCache.Get(Miss)] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[vfs:xOpen] #%u sqlite3_malloc() failed
\$ +x`
\$ RWPSQh`
\$$8D$
\$$h(g
\$$h@P
\$$h`
\$$h0
\$$h8
\$$hP
\$$hp
\$$hX
\$$hx7
\$$t.
\$,hHf
\$XWVRP
\/7dY
\\Index
\S0l`
].${&m
]0;;B;I;P;[;
]8;V-
-]n/8q
^(SQh`
^@SWQ
^f97u
_!!1%q
_(SQh`
_^[Y]
__CxxFrameHandler3
_Checkpoint
_Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Families
_Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Packages
_CxxThrowException
_Dictionary
_except_handler4_common
_IndexKeys
_initterm
_initterm_e
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsprintf
_o___stdio_common_vswprintf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__itow_s
_o__purecall
_o__register_onexit_function
_o__seh_filter_dll
_o__stricmp
_o__ui64tow_s
_o_free
_o_malloc
_o_memcpy_s
_o_realloc
_Wh8Q
`-#L\
`.data
`0^0\
`9] u
`Ip@;
`S}A^c
'`Sly
{ qD:Z~
{0#1l1u1
{h=EgUM
{NKlwj_
{X_^[
|$ YY
|$$WRSP
|$<tg
|$0+\$8
|3V7\
|fke|t
} 1N;
}*]L5(+
}9fN$
}g*Rw
+?-o39>R
+040A0q0
+050u0|0
+0e0x0
+0K0U0n0
+fiF?>P
-+HLq
+tdIh
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<0<4<8<<<D<H<L<P<X<\<`<d<l<p<t<x<
< </<D<\<k<z<
< <_<
< <|<
< <3<I<[<y<
< <3<W<^<e<{<
< <7<R<e<
< <9<D<S<k<
< <E<X<
< =_=
< =+=0=I=
< =<=O=b=
< ='=.=N=h=
<!<(<H<b<
<!<(<H<b<{<
<!<0<@<a<}<
<!<1<A<
<!<1<E<J<S<a<h<p<
<!<2<[<
<!<3<G<a<s<
<!<8<`<s<
<!<o<
<!=+=r=|=
<!=6=r=
<!=9=
<!=E=]=v=
<!=m=z=
<!=n=
<"?,?^?e?
<"<)<0<;<
<"<)<0<7<J<b<l<w<
<"<)<9<D<
<"<;<v<
<"<_<
<"<1<@<
<"<b<i<
<"<e<l<#=G=c=
<"=)=
<"=)=_=
<"=,=t=}=
<"=2=I=
<"=7=V=
<"=V=
<#<*<;<a<
<#<*<7<d<q<x<
<#</<
<#<-<8<E<L<S<Z<m<
<#<0<7<><E<X<p<z<
<#<3<D<L<U<
<#<c<j<]=t=
<#<p<
<#<R<
<#=(=9=
<#=-=m=t=
<#=-=w=
<#=3=A=f=
<#=5=
<#=B=I=i=
<$<?<W<
<$<@<K<X<_<f<m<
<$<+<2<9<K<V<]<d<k<
<$<2<
<$<N<e<n<
<$=.=e=l=
<$=.=u=
<$=<=A=Z=
<$=<=C=n=
<$===B=_=
<$=3=?=
<$=A=
<$=F=
<$=i=
<$=k=u=
<$=l=
<$=l=y=
<$=N=h=
<$=W=^=~=
<$=w=Y>b>~>
<%<*<C<
<%<,<3<
<%<><~<
<%<6<d<n<
<%<7<I<T<[<b<o<
<%<e<l<
<%<f<m<t<
<%<I<P<W<m<
<%<k<r<y<
<%<O<f<o<
<%<u<
<%=,=
<%=,=_=
<%=/===
<%=/=j=t=
<%=+=V=e=
<%=8=u=
<%=D=
<%=E=~=
<%=N=t=
<&<?<
<&<1<A<T<x<
<&<9<b<x<
<&<F<S<Z<a<z<
<&<J<m<
<&<n<w<
<&<O<e<
<&=4=B=S=c=q=
<&=b=r>
<&=D=K=R=t=
<&=R=
<(<@<R<d<y<
<(<3<F<Q<\<o<
<(<C<`<o<
<(<e<
<(<F<^<~<
<(<M<
<(<M<e<
<(<N<g<
<(<R<_<f<m<}<
<(<S<
<(=/=6=X=u=
<(=?=\=
<(=@=
<(=|=
<(=2=|=
<(=2=r=y=
<(=A=
<(=G=
<(=H=g=
<)<;<N<v<
<)<|<
<)<0<d<
<)<5<N<
<)<6<=<D<K<^<v<
<)<A<K<V<c<j<q<x<
<)<d<n<
<)<P<
<)<p<z<
<)<q<
<)<w<
<)<X<k<
<)=3=z=
<)=F=
<)=H=T=[=
<)=Q=
<)=S=
<***Error***>
<*<><N<^<n<~<
<*<A<M<a<x<
<*<G<
<*<u<
<*===f=|=
<*=7=[=~=
<*=O=q=
<,<B<g<z<
<,<F<_<
<,<I<Z<
<,<k<
<,<R<k<
<,<V<l<~<
<,<w<
<,<Z<x<
<,=|=
<,=5=
<,=k=
<,=K=
<,=l=
<.<}<
<.<7<q<
<.<l<
<.<T<t<
<.<u<
<.=8=
<.=8=o=v=+>2>P>
<.=8=s=}=
<.=d=
<.=F=a=j=z=
<.=m=
<.=N=n=
<.=s=~=
</<:<E<X<w<
</<|<
</<=<E<`<
</<6<=<S<
</<8<@<P<Y<a<q<~<
</<h<o<v<}<
</<Y<o<
</<z<
</=9=t=~=
</=9=y=
</=e=
</=l=
</=p=
<:<C<H<c<}<
<:<C<H<m<v<{<
<:<Q<X<r<
<:<R<q<
<:<S<|<
<:<Y<c<
<:<Z<
<:=O=m=v={=
<:>A>y>
<;<N<
<;<Q<v<
<;<X<_<
<;=B=I=i=
<;=k=
<;=r=
<?<\<
<?<I<P<d<v<
<?<i<w<
<?<u<
<?=|=
<?=c=h=y=
<?=F=
<?=F=M=m=
<?=n=
<?=o=z=
<?=V=_=
<@<|<
<@<G<u<
<@=\=o=
<@=f=
<@=J=
<[<e<
<[=|=
<\<c<j<
<\<i<
<]<j<
<]=q=
<_<l<
<|<c=
<+<2<9<[<x<
<+<2<R<l<
<+<4<A<]<
<+<A<f<y<
<+<m<w<
<+=]=
<+=5=|=
<+=g=
<+=Z=h=
<<<}<
<<<C<y<
<<<I<P<W<i<
<<<j<
<<={=
<<=E=L=
<<=F=
<<=R=q=
<-<2<K<u<
<'<7<H<|<
<-<F<l<
<'<l<}<
<'<n<x<
<-<o<
<-<P<
<-<R<e<
<-=?=
<=<S<|<
<==J=g=
<=>}>
<'=1=x=
<-=4=;=B=X=
<-=7=~=
<-=J=x=
<-=p=
<'=s=
<-=Z>d>v>
<><S<w<
<>=[=
<>=E=
<>=H=
<>=H=g=
<>=R=
<>=Y=
<0<J<Z<
<0<Q<b<
<0=:=
<0=J=Q=
<0=L=]>t>
<0=N=_=
<0=X=w=
<0C0J0j0
<0E0l0u0
<0S0p0
<1<;<x<
<1<J<c<
<1<M<
<1<o<
<1<T<^<e<y<
<1<Z<
<1<Z<p<
<1=;=
<1=?=^=w=
<1=~=
<1=>=E=L=^=
<1=8=?=F=i=
<1=8=G=N=]=d=
<1=N=w=
<1=q=
<1=u=
<2<n<
<2<v<
<2=<=
<2=9=@=`=z=
<2=L=
<2=r=
<3<:<A<c<
<3<><C<\<
<3<8<I<
<3<A<P<d<
<3<E<
<3<L<
<3<o<
<3<T<
<3===
-<3x`
<4<]<
<4<L<W<a<
<4<M<
<4<m<t<{<
<4=;=B=
<4=|=
<4=>=
<4=k=
<4=q=
<4=X=p=
<5<f<
<5<n<x<
<5=t=
<5S5|5
<6<_<y<
<6<}<
<6<b<p<w<
<6<f<
<6=@=w=~=X>_>}>+?L?
<6===
<6===o=
<6=L=b=
<6=W=a=k=
<7<c<t<
<7<v<
<7<y<
<7=A=
<7=v=
<8<K<t<
<8<q<v<{<
<8<s<
<8<z<
<8=?=
<9\$ t"
<9<_<
<9<j<
<9<U<
<9=C=
<A<^<l<t<
<A<`<
<A<H<
<a<k<
<A<K<
<a<k<
<A<T<}<
<A<Y<r<
<A<Y<u<
<A=\=
<A=Y=
<B<I<P<W<z<
<B<q<
<B<U<
<B<z<
<C<[<`<
<C<f<
<C<H<Y<
<C<J<Q<s<
<c<m<
<C<M<
<c<t<}<
<C=J=Q=q=
<C=u=
<C=z=
<D<_<|<
<D<{<
<D<K<
<D<N<
<D<q<R=q=
<D=N=
<E<`<
<E<L<S<s<
<E<O<v<
<Error 0x%X converting the user's SID to a string>
<Error 0x%X getting the user's SID from the process' token>
<Error 0x%X in GetApplicationUserModelIdFromToken>
<Error 0x%X in GetPackageFullName>
<Error 0x%X in NtQueryInformationProcess>
<Error 0x%X in OpenProcessToken>
<Error 0x%X in QueryFullProcessImageNameW>
<Error 0x%X moving command line>
<Error allocating memory>
<F<M<R<y<
<F<M<T<t<
<F<x=
<F=P=
<F=u=
<g<~<
<G<N<U<u<
<g<q<
<G<R<Y<`<
<g=n=
<g=z=
<H<c<
<H<W<
<H=`=y=
<H=M=f=
<I<_<
<I<P<
<I<P<p<
<i=r=
<I=S=
<I=s=
<I=V=
<J<_<}<
<J<g<n<
<J<o<
<j<t<
<J=f=
<K<U<
<K=l=
<L<c<l<
<L<v<
<L<Y<}<
<L<z<
<l=v=
<M<d<m<
<M<j<q<
<M<l=
<M>Y>`>{>
<machine>
<n<{<
<n<5=~=
<N<a<o<
<N<a<y<
<N<i<
<N<u<
<n<y<
<N=b=
<N=e=
<No commandline present>
<no-error-message>
<None>
<null>
<O<h<
<O<j<
<O<V<
<O<V<>=B=F=d=
<o=y=
<P<]<d<k<}<
<P<c<
<P<t<
<P<W<^<e<{<
<P<Z<
<P=f=
<P=o=
<P>P?r?
<Q<a<x<
<Q<n<
<Q=f=m=
<R<v<
<R=a=
<SVWj83
<SVWQQ
<T<[<
<T<i<
<T<l<
<T=l=
<U<_<
<Unknown>
<V<`<
<V<c<
<V<c<j<q<
<W<9=B=^=g=
<W<r<
<W<w<
<Windows::Internal::StateRepository::Management::RepositoryManagerServer::BlockRequests
<Y<u<
<Y<y<
<y=->N>X>b>
<Z<"=0=<=C=
<Z<}<
<Z=m=w=
<ZzR%
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=4=8=<=@=H=L=P=T=\=`=d=h=p=t=x=|=
= =9=
= =a=
= =H=]=l=
= >_>
= >'>M>T>[>b>
= >5>t>
= >9>
= >s>
=!=)=D=
=!=;=T=x=}=
=!=0=W=
=!=7=e=p=w=~=
=!=F=Y=
=!>&>+>U>\>a>
=!>(>k>
=!>[>
=!>+>r>|>
=!>9>
=!>a>~>
=!>D>
=!>g>
="=[=b=i=p=
="=_=
="='=
="=6=
="=7=U=^=c=o=
="=H=o=
="=l=v=
="=V=
="=Z=q=z=
=">,>^?
=">;>B>b>|>
=">^>y>
=">G>
=">o>
=">q>
=#=*=<=T=^=i=v=}=
=#=/=F=R=Y=i=
=#=<=d=
=#=1=^=v=
=#=7=J=\=h=|=
=#=m=w=
=#>*>1>8>N>|>
=#>->d>k>
=#>->h>r>
=#>G>c>
=#>Q>p>
=#>R>
=#>R>i>{>
=$=,=A=
=$=B=_=z=
=$=q=~=
=$>.>u>
=$>+>_>
=$>o>y>
=%=d=n=
=%=h=p=w=
=%=J=o=
=%=L=U=|=
=%=l=v=
=%=p=z=
=%=T=
=%=x=
=%>,>_>
=%>8>u>
=%>C>J>Q>s>
=%>d>
=%>w>
=%>W>
=%>x>
=&=?=L=a=q=
=&=-=@=X=b=m=z=
=&=8=C=J=Q=^=
=&=D=m=
=&=F=`=y=
=&=J=
=&=M=f=
=&=Z=
=&><>R>
=&>->_>
=&>0>p>w>
=&>O>r>
=(=_=v=
=(=h=o=
=(=H=V=s=
=(=i=p=w=
=(>/>6>X>u>
=(>2>o>
=(>J>\>
=(>v>
=(6A&V
=)=?=d=w=
=)=7=?=Z=
=)=R=g=
=)=t=~=
=)>S>
=*=1=Q=k=
=*=m=
=*=u=
=*=V=g=
=*>1>i>
=*>4>k>r>
=*>8>]>
=*>k>
=*>K>
=*>N>f>
=*>w>
=,=:=_=m=
=,=>=[=
=,=5=
=,=H=j=
=,=i=
=,=j=
=,=O=
=,=w=
=,>|>
=,>3>v>
=,>5>i>
=,>6>}>
=,>B>a>
=,>C>
=,>f>s>
=,>l>
=,>S>]>r>
=,>S>f>
=.=_=r=
=.>5>
=.>5>-?D?f?
=.>B>O>]>e>}>
=.>I>
=.>I>o>
=.>N>]>}>
=.>o>
=.>R>n>
=.>Y>m>
=/=B=k=
=/=H=l=q=
=/=L=o=
=/=S=
=/=Y=p=y=
=/>^>
=/>~>
=/>e>
=/>p>
=/>r>
=/>s>
=/>S>X>i>
=/>x>
=:=d=
=:=H=P=k=
=:=N=U=
=:=O=x=
=:=Q=Z=
=:=R=k=
=:>D>
=:>f>
=:>f>w>
=:>H>,?
=:>V>i>
=;=B=I=P=f=
=;=p=
=;=U=u=
=;>b>
=;>E>
=;>o>}>
=?=F=z=
=?=u=
=?=Y=
=?>c>h>y>
=?>o>z>
=?>y>
=@=G=
=@=G=N=p=
=@=G=u=
=@=z=
=@>J>
=@>J>`>{>
=@>Y>
=[=v=
=\=,>
=\=f=
=\=w=
=]=z=
=^=f=
=^=h=
=^=r=
=^=u=
=^=y=
=_=f=
=_=i=
=_=v=
=`=y=
=`>g>
=`>j>
=`>v>m?
=+=3=
=+=5=N=
=+>5>l>s>
=+>6>=>~>
=+>A>
=+>e>
=+>F>b>
=+>M>_>
=+>R>
=+>T>|>
=<=_=
=<=}=
=<=M=w=
=<>|>
=<>E>q>
=<>q>
=<>v>
===[=z=
=-===]=
==>Z>~>
='=1=;=j=}=
=-=b=}=
='=C=j=
=-=F=
='=h=o=v=
=-=L=e=~=
='=n=x=
=-=O=]=
='=q={=
=>=]=u=
=>=}=
=>=e=x=
=>=I=P=W=
=>=z=
=>>a>
=>>H>
='>1>l>v>
=->4>M>
='>5>
=->7>w>~>
='>C>V>i>
='>G>
=->J>n>
='>p>
='>S>l>
=->U>
='>V>
='>w>
=0=:=E=R=Y=`=g=z=
=0=j=
=0=K=d=
=0=N=U=\=~=
=0>:>m>w>
=0>|>
=0>7>
=0>8>?>Z>w>
=0>C>g>
=0>L>_>r>
=0>o>
=0S0t0
=0Z0~0
=1=|=
=1=~=
=1=I=b=
=1=I=S=^=k=r=y=
=1=J=u=
=1=K=e=
=1=K=t=|=
=1=O=X=]=q=
=1=U=Z=s=
=1>8>
=1>F>z>
=1>I>
=1>L>
=2=;=u=
=2=?=F=M=_=q>
=2=<=U=
=2=9=@=b=
=2=H=m=
=2=L=e=
=2=n=
=2=o=
=2=Q=f=
=2=y=
=2>9>W>
=3=:=F=M=X=_=e=w=
=3=:=o=
=3=8=I=
=3=a=v=
=3=g=
=3=G=g=
=3>:>A>a>
=3>^>x>
=3>I>o>
=3>v>
=4=K=T=
=4=Q=p=
=4=z=
=4>;>o>
=4>_>~>
=4>~>
=4><>C>c>}>
=4>>>~>
=4>L>
=5=`=
=5=R=`=h=
=5>!?
=5>_>
=5><>o>
=5>a>
=5>B>f>
=5>c>j>q>
=5>O>d>
=5>t>
=5>u>
=6=a=
=6=E=n=y=
=6=f=
=6=I=f=
=6=P=i=
=6=x=
=6>a>
=6>M>
=6>r>
=6>Z>j>
=7=c=t=
=7=h=
=7=L=d=
=7=M=_=
=7=Q=j=
=7=Z=
=7>[>w>
=7>A>
=7>B>O>V>]>o>
=7>s>
=7>V>e>t>
=8=K=^=
=8=O=l=
=8=P=
=8>W>c>j>
=9=A=N=U=\=l=
=9=D=Q=X=_=q=
=9=G=O=j=
=9=V=h=y=
=9=V=o=
=9=z=B>P>\>c>
=9>D>Q>X>_>q>
=A=_=f=m=
=A=H=O=V=l=
=a=k=
=a=q=
=A=z=
=A>U>
=B=}=
=b=r=
=B=Z=
=B>]>
=B>R>m>
=c={=
=C=i=
=C=M=
=C=V={=
=c>m>
=C>M>
=C>R>
=d={=
=d=n=
=D>N>
=E=[=m=
=E=g=
=E=L=S=u=
=e=o=
=E>O>
=E>U>l>
=F=d=q=
=F=j=
=F=P=
=f=p=
=F>P>
=f>r>
=F>z>
=G=]=o=
=G=e=
=g=q=
=G=Y=
=G>b>
=G>g>
=G>P>U>|>
=H=]=d=
=H=_=h=
=H=R=
=H=r=
=H=T=k=
=I=e=x=
=I=i=
=I=i=p=
=I=p=w=
=i=T>t>
=J=a=
=J=c=
=J=o=
=J=T=
=j=t=
=J=T=
=J>W>{>
=K=R=
=K>f>
=k>y>
=K>z>
=L=~=
=L=U=
=L=V=
=M=r=y=
=M=W=
=M=Z=w=
=N=q=
=N>[>x>
=N>U>\>
=O=n=
=O=V=
=O=Y=
=O>j>
=O>s>
=P=l=
=P=W=
=P=W=^=e={=
=P=Z=
=P>[>`>y>
=Q=^=|=
=Q=l=
=R=a=
=R=Y=
=R=Y=`=
=R>|>
=S=Z=
=T=[=
=T=n=
=U=\=
=U=_=
=U=l=u=
=U>t?
=uYQb
=V=`=
=V=c=
=Vh,=
=Vh@r
=Vhlr
=W={=
=W=a=
=X=_=
=X=b=
=X=x=
=Y=c=
=yD$e
=Z>m>w>
> ?*?q?{?
> ?'?_?
> ?_?
> ?+?0?I?
> ?3?\?r?
> ?6?I?
> ?k?u?
> ?L?
> ?w?
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >)>Q>
> >=>
> >'>=>v>}>
> >'>G>a>z>
> >'>I>f>t>|>
> >'>J>h>o>v>
>!?(?F?
>!?/?q?
>!?_?
>!?L?
>!?n?
>!?Q?
>!>(>;>S>]>h>u>|>
>!>(>J>g>u>}>
>!>_>
>!>1>A>Q>a>q>
>!>1>A>Q>l>
>!>l>
>!>p>
>!>r>
>"?/?N?V?t?
>"?]?
>"?<?
>"?8?]?p?
>"?K?Z?
>"?Z?
>">5>Y>`>g>}>
>">I>k>
>#?)?1?9?[?y?
>#?-?t?~?
>#?0?7?>?W?s?~?
>#?e?
>#?g?
>#?Q?f?
>#?Z?k?
>#>A>J>[>h>o>v>
>$?~?
>$?3???
>$?d?x?
>$?t?
>$?w?
>$>(>,>0>8><>@>D>L>P>T>X>`>d>h>l>t>x>|>
>$>]>d>k>r>
>$>+>_>
>$>+>2>H>
>$>=>{>
>$>5>:>M>i>n>
>$>6>`>v>
>$>6>D>V>
>$>9>K>V>]>d>q>
>$>B>
>$>d>k>
>$>g>o>v>
>$>k>u>
>$>l>
>$>M>c>
>$>Y>o>
>%?,?3?U?r?
>%?/?k?u?
>%?/?o?v?
>%?_?
>%?2?V?y?
>%?3?k?
>%?d?
>%?Q?
>%>,>L>f>
>%>?>X>
>%>@>Y>
>%>3>a>o>
>%>7>L>o>
>%>B>
>%>e>l>
>%>Q>}>
>%>S>q>
>%>Y>
>&?-?4?;?^?|?
>&?0?p?w?
>&?F?M?m?
>&?r?
>&?U?
>&>,>
>&>;>M>X>_>f>s>
>&>[>p>
>&>+>D>
>&>->
>&>8>E>L>S>Z>j>~>
>&>b>l>
>&>c>
>&>V>
>(?/?i?
>(?/?r?
>(???\?
>(?6?~?
>(?9?B?
>(>1>h>
>(>e>
>(>L>
>)?@?m?
>)?3?i?s?
>)?3?s?z?
>)?F?X?i?~?
>)?i?
>)?w?
>)?y?
>)?Z?s?
>)>;>
>)>`>|>
>)>3>>>K>R>Y>`>s>
>)>3>y>
>)>A>Z>
>)>C>\>
>)>D>p>
>)>L>
>)>r>
>)>t>
>)>u>|>
>*?/?H?|?
>*???[?d?i?}?
>*?1?
>*?4?k?r?
>*>?>h>
>*>5><>C>P>
>*>8>U>e>
>*>B>[>
>*>d>z>
>*>q>{>
>,?|?
>,?b?
>,?f?s?
>,?Q?
>,>3>S>m>
>,>F>U>
>,>w>
>.?;?X?
>.?8?s?}?
>.?8?x?
>.>@>T>g>y>
>.>5>U>o>
>.>7>_>g>t>{>
>.>C>h>
>/?6?o?
>/?9?
>/?E?
>/?l?
>/?w?
>/?W?p?
>/>B>
>/>d>y>
>/>G>`>
>/>p>)?=?K?W?^?
>/>T>
>:?c?|?
>:?D?
>:?D?V?
>:?z?
>:>]>b>{>
>:>C>H>c>}>
>:>h>
>;?e?
>;?H?l?
>;>u>
>??c?p?
>??F?
>??F?M?m?
>??I?
>??o?z?
>'?_?~?
>?>i>w>
>?>J>O>
>?>O>w>
>?>u>
>?>W>k>
>?>W>p>
>'?B?
>'?D?
>-?d?
>-?H?
>'?S?i?
>-?t?~?
>-?V?
>'?V?x?
>'?w?
>@?J?
>@?T?f?
>@>P>u>
>@>r>y>
>@s5f
>[?|?
>[?s?
>[>e>
>\>c>
>\>f>
>\>s>
>]?g?
>]>d>
>]>v>
>]>z>
>^>|?
>^>e>
>^>e>l>
>^>y>
>_>f>
>+?5?|?
>+?5?l?s?
>+?K?U?n?
>+><?
>+>4>n>
>+>9>\>j>|>
>+>K>
>+>T>j>
>+>x>
><?E?l?u?
><?r?
><>_>
><>{>
><>E>
><>G>
><>q>
><>R>w>
><>T>m>
>=?D?K?k?
>=?G?
>=>\?
>=>`>
>=>J>b>
>=>S>u>|>
>>?|?
>>?H?
>>?V?v?
>>>]>
>>>}>
>>>X>
>->5>P>
>->G>`>
>->P>
>'>r>|>
>->R>t>
>0?I?
>0>L>
>0>N>V>^>k>w>
>0>U>h>
>0>Y>o>
>1?;?
>1?d?
>1?G?
>1?I?
>1?L?
>1?N?
>1>|>
>1>N>k>
>1>u>M?
>2?9?g?}?
>2?9?q?
>2?m?
>2?n?
>2?P?^?k?r?z?
>2?V?l?
>2>K>
>2>R>
>3>:>A>c>
>3>=>D>X>j>|>
>3>F>j>
>3>Q>
>3>v>
>3>w>
>3>X>k>
>4?|?
>4?L?W?
>4>:>`>
>4>[>}>
>4>>>E>Y>k>}>
>4>G>~>
>4>G>b>t>
>4>G>p>
>4>J>o>
>4>M>x>
>4>N>u>
>4>R>Y>`>
>5???
>5?B?f?
>5>K>m>t>
>5>Q>\>i>p>w>
>5>w>
>6?@?w?~?
>6?=?
>6?=?[?
>6?A?
>6?g?
>6>=>D>f>
>6>C>J>Q>j>
>6>P>w>
>6>V>
>6>Y>
>7???{?
>7?g?
>7>\>e>
>7>>>E>L>o>
>7>>>f>
>7>A>I>i>q>
>8?B?
>8?O?l?
>8?t?
>8?x?
>8>Q>
>8>r>
>8>R>k>
>8>R>l>
>8>Z>
>9?C?z?
>9?P?}?
>9\$ t$
>9>B>G>w>
>9>J>
>9>R>Y>y>
>A?K?
>A?K?k?
>a?l?
>A?w?
>A>H>
>a>i>p>
>B?L?
>b?w?~?
>b>/?:???
>B>}>
>C?l?
>C>M>
>c>m>
>C>o>
>C>V>
>D?\?
>D?i?
>D?N?
>d>{>
>D>K>
>D>K>R>Y>`>9?H?T?z?
>D>N>
>E?O?
>E>d>z>
>E>L>
>e>o>
>E>R>v>
>E>R>Y>`>y>
>e>v>
>E>x>
>f>{>
>f>r>
>G?]?s?
>G>N>
>G>Q>
>H?|?
>h?o?
>H?R?
>H?U?y?
>H>R>
>H>R>r>
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>I?a?
>I>f>t>
>I>P>A?H?f?
>I>R>
>i>s>
>I>S>
>J>\?
>J>i>p>
>J>Z>
>K?R?Y?y?
>L?U?
>L>_>x>
>L>S>s>
>L>U>|>
>M?T?r?
>M>Z>w>
>N?[?
>N?[?x?
>N>T>t>
>N>X>
>NGdx
>O?\?
>O?e?
>O>V>
>P?e?j?o?
>P>_>
>P>}>
>P>i>
>P>p>
>P>y>
>p>z>
>Q>[>
>R>\>
>R>h>
>R>Y>
>R>y>
>S?|?
>t>{?
>T>l>
>U>\>
>U>b>
>V?p?w?
>W>~>
>W>a>
>X?x?
>Y>|>
>Z>~>
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0,040<0D0H0L0T0X0\0d0h0l0p0t0x0|0
0 0/0O0^0|0
0 0@0Z0s0
0 0`0g0
0 0'0=0k0v0}0
0 0u0|0
0 0W1
0 0Y1`1~1+2L2
0 1_1
0 1~1
0 1<1O1b1
0 131\1r1
0 191p1
0 1O1q1
0 1V1
0!0(0[0b0i0p0
0!0.050<0C0V0n0x0
0!0@0Z0r0
0!030]0s0
0!0h0r0
0!0J0`0
0!0J0j0
0!161u1
0!171q1
0!191
0!1d1
0!1E1o1}1
0!1w1
0!2j2
0"0)00070J0n0u0|0
0"0:0S0e0
0"0?0M0U0p0
0"0l0u0
0"0Z0z0
0"1)1_1
0"1*1/1S1^1c1|1
0"1/161=1V1r1}1
0"1^1
0"1B1
0"1n1
0"1R1
0#0-040I0_0
0#050_0u0
0#0C0]0
0#0c0j0
0#1;1T1
0#1?1F1p1
0#1?1o1
0#1]1
0#131A1f1
0#1G1c1
0#1X1
0$0)0:0
0$0/0A0I0V0^0g0l0t0
0$0_0i0
0$0+0N0l0s0z0
0$080J0\0g0n0u0
0$0F0v0
0$0G0i0
0$0Q0|0
0$1.1i1s1
0$1/161=1q1
0$1[1n1
0$171`1v1
0$1B1H1U1s1y1
0$1d1
0$1q1
0%0,0L0f0
0%0/0:0G0N0U0\0o0
0%0@0
0%0e0l0
0%1,1\1
0%1/1v1
0%151L1
0%151M1
0%1d1
0%1Q1
0&0;0
0&0+0
0&0-040F0i0s0z0
0&0-0M0g0
0&0A0a0
0&0g0n0u0
0&0I0
0&0K0^0
0&0Y0`0g0n0
0&1.1j1
0&1b1
0(0/0c0
0(0_0
0(0<0C0o0
0(030@0G0N0U0h0
0(040;0_0
0(0B0n0
0(0C0e0
0(0M0l0s0
0(0Y0z0
0(111o1v1
0(121M1r1
0(121r1y1
0(121y1
0(1R1
0)0@0G0}0
0)000
0)0d0n0
0)101o1
0)131o1y1
0)131s1z1m2
0)1H1T1[1
0)1Q1
0*0\0o0
0*0B0[0
0*0G0U0]0x0
0*0J0a0x0
0*0N0
0*0s0~0
0*0u0
0*13181S1m1v1{1
0*141t1{1
0,050\0e0
0,0i0
0,0I0W0_0z0
0,0K0a0u0
0,0P0T0X0\0`0d0h0l0p0t0x0|0
0,0Q0
0,0t0
0,1_1
0,131l1
0,151\1e1
0,1b1
0,1b1r1
0,1D1
0,1m1
0,1w1
0.070
0.0F0Y0
0.0G0
0.0H0a0
0.0u0
0.0w0
0.0X0o0x0
0.151m1
0.181x1
0.1F1f1s1z1
0.1j1t1
0.1P1W1
0/0]0j0
0/0<0F0M0X0
0/060V0p0
0/0I0b0
0/0X0
0/1^1
0/161
0/1e1
0/1k1
0:0_0~0
0:0A0H0O0e0
0:0g0
0:0G0k0
0:0H0g0
0:0j0r0y0
0:1A1H1h1
0:1G1k1
0:1n1|1
0;0B0v0
0;0H0O0V0h0
0;1\1
0;1b1
0?0^0
0?0F0M0c0
0?0J0O0
0?0M0\0p0
0?0Y0r0
0?1F1M1m1
0?1G1N1n1
0?1I1[1
0?1M1[1
0@0\0
0@0b0
0@0T0
0@1m1
0@1S1]1m1
0@1Y1
0[0{0
0[1|1
0\051;1A1O1e1
0\0i0
0\0w0
0\1e1
0]0g0
0^0e0
0^0h0
0_0f0
0_0f0m0
0`0|0
0`0v0
0`0y0
0{0%1l1u1
0+0?0V0b0v0
0+020f0
0+04090M0
0+0C0
0+0k0|0
0+0T0e0
0+1A1
0+1D1Y1u1~1
0+1R1
0+1Z1{1
0<0^0
0<0E0
0<0h0t0
0<0i0
0<0p0
0<0R0d0
0<1C1q1
0<1D1]1
0<1F1
0<1O1
0<1v1
0=0D0y0
0=1G1
0=1j1
0=1T1]1
0=1y1
0>0}0
0>1E1
0>1q1
0-0:0K0
0'0>0[0}0
000\0n0u0|0
000|0
0'0-020F0T0`0h0y0
0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
00050N0
00070W0q0
000b0i0p0
000U0h0
001I1
001K1g1|1
001P1
001P1_1
0-020O0}0
0'070H0
0'0A0h0
0'0A0Z0
0-0b0w0
0-0G0i0
0-0J0Q0
0'0K0n0
00L0_0r0
0-1,2
0-1:1W1
0'1^1q1
0'1_1~1
010|0
010P0c0
010q0
010T0^0e0y0
010U0
010V0{0
'010x0
011;1
011;1r1y1
011|1
011}1
011>1\1
0'111x1
011I1
01234567890-
0123456789abcdefghjkmnpqrstvwxyz
0-171w1~1
0-1d1
0-1H1
0'1p1j2s2
0'1r1
0-1V1
020<0F0Z0i0
'02090@0t0
020H0m0
020K0
020y0
021<1
021H1l1
021V1l1
030:0Z0t0
030`0m0
030~0
030<0A0
030>0C0\0
030L0
030X0k0
031@1G1N1g1
031|1
031I1_1
031P1i1
031S1
031W1o1
031W1r1
040>0I0V0]0d0k0~0
040904B0
040t0
040X0p0
041B1I1i1
041F1W1{1
041L1
041R1k1
050A0|0
051\1o1
051E1\1
051t1
051u1
060G0X0
060I0r0
060P0z0
060Z0|0
061@1
061|1
061=1
061j1q1
061p1
061Q1n1
070~0
070>0^0
070N0W0
070V0p0
-070w0~0
070z0
071A1
071g1
071o1
071v1
080P0i0
080w0
080X0
080Y0s0
081^1
081x1
090_0
090C0X0x0
090G0l0
091@1G1g1
091]1
091b1
091C1
091g1
0A0g0r0
0A1\1
0A1K1
0A1K1~1
0B0~0
0B0L0
0b0r0
0B0S0~0
0B0V0
0B0X0
0b0z0
0b1|1
0B1i1
0c0m0
0C0Y0k0
0C1w1
0D0_0s0
0D0a0
0D0k0
0D0K0
0D0N0X0
0D0Z0
0D1K1
0D1N1
0D1S1_1
0E0[0m0
0E0K0Y0_0i0p0w0
0E0L0
0e0o0
0e0u0
0E0X0
0E0X0y0
0E182J3=405#6
0E1T1{1
0E1U1i1
0F0M0
0F0M0m0
0F0O0
0F1\1r1
0F1P1
0g0q0
0G0Q0Z0c0x0
0G1)222N2W2
0G1Q1
0H0R0
0H1*2O2a2t2
0H1_1|1
0i0>1I1X1q1
0I0g0
0I0S0
0I0w0
0I1q1
0I1V1
0J0k0
0J1]1g1w1
0J1a1
0J1T1i1v1
0K0}0
0K0r0
0K0R0
0k0r0y0
0K0U0
0L0V0
0l0w0
0L1y1
0M0l1
0m1x1
0N1i1
0O0s0
0O0V0
0o0y0
0O1e1
0O1j1
0P0]0d0k0
0P0i0
0P0W0
0P1{1
0P1c1m1}1
0Q0[0
0Q0{0
0Q1^1|1
0R0\0
0R1e1/2`2
0R1i1
0R1l1
0S0]0
0S0l0
0S0o0
0S0v0}0
0T0^0
0T0r0
0U0\0
0U0_0
0U0e0|0
0U0o0
0U0v0
0U1\1c1~1
0V0`0
0V1v1
0V1z1
0W0|0
0W0a0
0W0h0q0
0W0z0
0W1^1|1+2L2
0W1l1
0X0_0
0X0b0
0Y0u0
0Z0[1
0Z0b0
0Z0d0
-0Z0j0
0Z1r1
1 1$1(1,1014181<1@1D1H1L1P1h1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1&161D1
1 1(10141<1P1X1l1t1|1
1 1_1
1 1'1:1R1\1g1t1{1
1 141N1_1y1
1 191t1
1 1r1
1 2*2j2q2
1 2@2`2
1 2\2
1 2_2
1 2+202I2
1 212
1 2'2.2N2h2
1 292p2
1 2B2
1 2D2`2
1 2S2
1!1(1H1b1
1!1/1|1
1!1/1A1[1q1
1!131E1m1
1!1J1v1
1!2[2
1!2+2r2|2
1!2<2
1!2n2
1!2q2
1"1>1G1
1"141J1]1o1
1"1R1
1"1W1m1
1"2B2X2_2t2
1"2H2y2
1"2l2
1#1*1^1u1|1
1#1.151@1G1R1Y1
1#1_1
1#1}1
1#1E1b1p1x1
1#2a2
1#2B2m2~2
1$1/1<1C1J1Q1d1|1
1$1<1F1Q1^1e1l1s1
1$1=1~1
1$1B1f1
1$1c1m1
1$1D1W1
1$1F1v1
1$2.2d2n2
1$2.2e2l2
1$2:2_2r2
1$2;2N2
1$2+2_2
1$222_2m2
1$232?2
1$2l2y2
1$2W2^2~2
1%1,1e1
1%1=1
1%1>1^1k1
1%1k1r1y1
1%1L1U1|1
1%1O1f1o1
1%1Z1h1
1%2\2
1%2_2
1%2-2F2
1%2E2
1%2J2u2
1%2M2f2
1%2Q2
1&1/1a1n1u1|1
1&1/1y1
1&1-141J1
1&1-1M1g1
1&2=2]2f2k2
1&2H2
1(([Y
1(0&0
1(131@1G1N1`1x1
1(1a1h1o1v1
1(1g1n1u1
1(1H1`1v1
1(1h1o1
1(1S1l1s1
1(2>2c2v2
1(2b2
1)1_1i1
1)161=1D1V1n1x1
1)181G1W1j1t1~1
1)1d1n1
1)1M1p1
1)1q1
1)1t1~1
1)1u1
1)2\2
1)232n2x2
1)2E2X2
1)2S2
1*1F1M1u1
1*242t2{2
1*2h2
1*2J2
1*2U2t2
1,0*0
1,151\1e1
1,151g1t1{1
1,161A1N1U1\1c1v1
1,1B1
1,1I1W1_1z1
1,1p1
1,1u1
1,2|2
1,252i2
1,2g2
1,2X2
1.1>1h1
1.151@1G1u1
1.1Q1[1b1v1
1.1u1
1.2;2_2
1.252[2b2i2p2
1.252c2y2
1.252o2
1.282
1.2L2S2s2
1.2Z2
1/1?1V1i1
1/1|1
1/1=1_1m1
1/191@1n1u1|1
1/1A1o1
1/1n1x1
1/1P1
1/2^2
1/2<2C2J2\2
1/2E2
1/2j2
1/2R2
1/2S2
1:1[1
1:1h1
1:1I1R1`1
1:1P1u1
1:2^2
1:2D2{2
1:2d2p2
1:2G2k2
1:3e3
1;1[1
1;1Q1
1;2b2
1;2B2
1;2E2
1;2j2
1;2N2
1;2r2
1?1\1n1
1?1I1P1d1v1
1?1Q1d1
1?1u1
1?2|2
1?2l2
1?2L2p2
1?2V2y2
1@1\1
1@1G1
1@2K2P2i2
1@2s2z2
1@2V2
1@2Y2
1[2`2t2
1[2=3b3t3
1\1e1
1]1d1
1]1j1q1x1
1^2y2
1_1f1
1_1i1
1_1z1
1`1y1
1`2|2
1+14191M1
1+1D1K1k1
1+1U1k1}1
1+1x1
1+22292Y2s2
1+252|2
1+252u2|2
1<1E1
1<1E1l1u1
1<1j1
1<2E2}2
1<2F2
1<2q2
1<2U2
1=1D1d1~1
1=1K1R1r1
1=1W1p1
1=2J2Q2X2q2
1=2O2c2}2
1=2Z2~2
1>1}1
1>1E10272U2
1>1O1
1>2H2
10.0.22621.726
10.0.22621.726 (WinBuild.160101.0800)
10[0n0
10>0\0
10171W1|1
101F1k1~1
101L1U1Z1f1
101P1i1
101Q1
101V1
101Z1v1
10272
102t2
1080o0
111:1l1y1
111>1V1s1
111019184142Z
'111C1
111f1{1
111r1
112?2
112A2Q2a2q2
1'131?1K1W1c1q1
1-161;1
1'161U1o1
1'1A1Z1
1'1H1x1
1'1i1
1'1L1
1-1P1
1'1Q1g1y1
1'1s1z1
1-1x1
1-2?3L3
1'2_2~2
121>1R1i1u1
121j1
121K1
121O1]1e1
121U1
122<2~2
1'222?2F2M2_2w2
12292@2`2z2
122a2
122B2Y2
122E2
122L2
1'252\2j2
1'2a2
1'2f2
1'2J2m2
1-2l2
1'2R2
1-2V2
1'2w2
1-2W2}2
131E1
131E1R1w1
131R1h1
131w1
132=2}2
132=2t2{2
141_1h1
141`1
141A1H1O1_1f1n1v1
141f1m1
141O1X1
141P1g1m1s1z1
141s1
142:2E2
142>2
142>2]2
142>2P2O3w3
142A2e2
142k2~2
151\1b1
151b1v1
151c1
151N1U1u1
152\2o2
152E2\2
152E2]2
152L2U2
155t9q?x?
161i1
161O1
161W1i1s1
162=2
162G2S2u2
162r2
171E1M1h1
171I1`1
171O1t1
171P1W1w1
171U1\1c1
171V1}1
172|2
172n2
172q2
181?1t1
181F1e1
181J1
181N1w1
181T1
182B2
182E2i2
182K2
182O2l2
182t2
182v2
191@1
191@1[1
191@1G1N1d1
191G1O1j1
191Q1j1
191R1d1
192|2
192C2
1A1^1
1a1|1
1A1H1O1V1y1
1a1k1
1A1Y1
1a2j2
1A2K2
1b 5)
1B1\1v1
1B1g1q1
1B1I1
1B2\2
1B2R2f2
1C1L1
1c1m1
1C1V1
1C2M2
1D2[2n2
1D2]2r2
1D2b2i2p2
1D2N2
1d2s2
1E1[1
1E1\1e1
1E1L1Q1p1
1e1u1
1E1U1i1E2U2m2
1E1w1
1E1y1
1F1h1
1F2e2
1F2P2
1G1o1
1g1q1
1G2T2
1h;BZ
1H1O1
1H1R1
1H1S1`1g1n1
1H2O2V2v2
1I1\1
1i1s1
1I1T1[1b1
1I1X1`1
1I2s2
1K1R1
1K1R1Y1`1v1
1K1w1
1k1w1
1K2f2
1K2R2Y2y2
1K2z2
1L1b1
1L1V1
1L1Y1}1
1L2b2x2
1L2t2
1M1W1
1M2j2
1n1{1
1N1X1
1n1x1
1N2b2
1N2i2
1n2x2
1O1~1
1O1Y1
1O2j2
1P1a1j1
1P1l1
1P1W1
1P1y1
1P2i2
1P2y2
1Q2^2|2
1R1W1
1r1y1
1R1Z1
1R2j2
1S1\1
1S1]1
1S8Ks|zj
1T1[1
1T1[1y1
1T1^1
1T1^1}1
1T1q1
1U1b1
1U1e1|1
1V1]1d1
1W1a1
1W1r1
1Y1{1
1Y1|1
1Z1a1h1
1Z1d1
1Z1h1o1
1Z2g2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2`2g2
2 242F2X2c2j2q2~2
2 2G2z2
2 2m2
2 2p2
2 2Y2`2g2n2
2 3<3O3b3
2 3-3Q3t3
2 393
2 3H3e3
2 3I3
2 3s3
2 3W3j3
2!2*2a2x2
2!2,272B2M2X2c2n2t2
2!2:2
2!2`2j2
2!2B2U2t2
2!2D2N2U2i2{2
2!2h2r2
2!2J2`2
2!3[3
2!3~3
2!3+3r3|3
2!3>3
2!363`3
2!373\3o3
2!373`3
2!393R3
2!3c3
2!3g3
2!3m3z3
2"2(2_2j2v2
2"2,2[2n2
2"2;2
2"2_2
2"2b2i2
2"2E2~2
2"2F2i2
2"2M2
2"2Y2`2
2"3)3_3
2"3<3
2"3o3
2"3q3
2"3U3e3n3v3
2#2*212D2h2o2v2
2#2:2W2v2
2#2_2
2#2+2F2
2#2<2
2#2=2V2
2#282^2x2
2#3-3w3
2#3g3
2#3u3
2$2.292F2M2T2[2n2
2$2+222H2v2
2$2+222M2{2Q3X3v3+4O4
2$2+2l2
2$2<2\2w2
2$212
2$232<2h2v2
2$262N2X2c2p2w2~2
2$2b2o2v2}2
2$2d2l2w2
2$2H2O2V2l2
2$2k2u2
2$3.3n3u3
2$3.3u3
2$3|3
2$3~3
2$333?3
2$3w3Y4b4~4
2%2,2O2m2t2{2
2%2^2
2%2>2x2
2%2B2
2%2B2P2X2s2
2%2e2l2]3t3
2%3/393h3{3
2%3/3j3t3
2%3/3o3v3
2%3@3[3|3
2%363
2%3e3
2%3o3
2&2,2O2s2
2&2?2[2f2s2z2
2&2@2Y2
2&212=2I2U2a2o2~2
2&2-242G2_2i2t2
2&292U2v2
2&2F2`2y2
2&2I2
2&2n2w2
2&2O2
2&2Q2s2
2&2r2
2&2V2
2&3{3
2&3-3_3
2&333`3}3
2&3B3k3
2&3b3x3
2(2\2
2(222G2e2n2s2
2(232:2A2N2
2(232U2~2
2(2A2
2(2b2
2(2D2h2p2t2x2|2
2(2F2M2T2v2
2(2I2y2
2(3/3r3
2(3@3
2(3\3
2(323r3y3
2(323y3
2(3d3
2(3u3
2(3W3
2)2/2?2[2e2k2}2
2)2[2
2)272_2m2
2)2d2n2
2)2E2
2)2L2
2)2N2a2
2)2N2s2
2)2O2
2)303:3J3Z3
2)333z3
2)3F3X3^3g3m3
2)3R3`3
2*2\2u2
2*2H2s2
2*2N2
2*2Q2j2q2
2*313
2*31383?3U3
2*343k3r3
2*343p3z3
2*343t3{3
2*3C3J3j3
2*3d3
2*3l3
2*3w3
2,232g2
2,2O2
2,2o2
2,2p2
2,2w2
2,2Y2o2
2,3b3
2,3l3
2,3L3k3
2,3o3
2,3T3z3
2.2{2
2.2}2
2.2E2L2
2.2Z2k2
2.3\3q3
2.3|3
2.3E3s3
2.3I3o3
2.3Q3
2.3U3h3
2.3Z3y3
2/2A2g2p2
2/2B2j2
2/2H2
2/2H2l2q2
2/2I2b2
2/2K2V2c2j2q2x2
2/2p2)3=3K3W3^3
2/2P2}2
2/2z2
2/3^3
2/363
2/393
2/393y3
2/3e3
2/3i3
2/3l3
2/3N3
2/3p3
2/3S3o3
2/3w3
2:2[2
2:2^2
2:2{2
2:2D2
2:3e3
2:3G3k3
2:3M3d3{3
2:3w3
2;2^2
2;2u2
2;3E3
2;3j3
2;3W3x3
2?2[2
2?2|2
2?2E2c2
2?2n2
2?2q2
2?2y2
2?3|3
2@2\2
2@2\2c2
2@2G2
2@2v2
2[2d2k2r2
2[2v2
2\2e2
2]2j2
2]2z2
2]3p3
2^2h2
2_2f2l2~2
2`2|2
2`2j2
2`2y2
2+2:2G2V2o2
2+2|2
2+252?2n2
2+252<2P2b2
2+272>2
2+272a2m2
2+2I2
2+2r2|2
2+2x2
2+323
2+353u3|3
2+3b3
2+3e3
2+3x3
2<2_2
2<2e2
2<2E2l2u2
2<3E3~3
2<3O3
2<3q3
2<3r3
2=2F2K2
2=2h2
2=2N2b2z2
2>2\2
2>2\2?3
2>2E2L2b2
2>3}3
2>3x3
2>3Y3
20220914214709Z
20220914231608.941Z0
20220915214709Z0t0:
20292Z2
202J2
202u2
20383?3_3y3
203A3R3e3
203C3g3
203I3
203o3
203p3
2090l0u0
2090o0
210930182225Z
211028192741Z
212;2B2V2h2z2
212{2
212~2
212G2Y2
21383V3
213E3
213k3
213N3
2-2@2h2~2
2'2`2
220505192315Z
2'212`2s2
222]2w2~2
222`2k2r2y2
222}2
2-222O2}2
222n2
222N2b2
222P2o2t2y2~2
22393o3
223W3^3m3
229879+4700220
2'2D2R2Z2u2
2-2K2T2Y2e2~2
2'2n2x2
2'2P2f2
2-2u2
2'3.353U3o3
230126192741Z0
230504192315Z0p1
2'313f3p3
232\2n2
232=2G2v2
232=2H2U2\2c2j2{2
2-323c3
232I2n2
232j2u2
232M2V2[2
233:3r3
233\3f3p3
233W3
233W3s3
2-343-4D4f4
2-3H3
2-3L3
2-3s3
2'3t3
2'3w3
2-3Y3
242L2}2
242M2T2t2
242s2
242Y2l2
243;3o3
243>3
243>3y3
243K3^3
2-5{5
252?2J2W2^2e2l2
252<2\2v2
252>2C2O2}2
253?3
253<3o3
253A3N3
253O3
253t3
261019185142Z0
262F2j2
262I2
262i2
262J2
262O2
262P2a2x2
262r2
263@3
263L3b3
272}2
272~2
272E2d2
272J2s2
272P2W2w2
273|3
273A3
273N3W3
273q3
273s4
273v3
282N2
282u2
283\3s3
283d3}3
283t3
292@2G2i2
292~2
292G2c2
292L2n2
293]3y3
293R3i3
2A2\2
2A2^2l2t2
2A2{2
2A2H2`2
2a2k2
2A2k2~2
2A2Y2
2A3\3
2A3e3~3
2a3k3
2B2I2
2b2l2
2B2L2
2b2l2
2B2l2
2b2r2
2B2S2}2
2B2W2{2
2B3\3
2B3L3
2c2p2
2C2V2
2c3l3
2c3v3
2D2\2
2D2{2
2d2{2
2d2n2
2D2W2
2D3K3R3r3
2e2o2
2e2r2
2E2X2
2E3M3T3t3
2E3O3
2E3U3m3
2F2_2q2
2F2y2
2F3P3
2F3S3
2G2N2U2\2r2
2G3b3
2G3e3o3
2H2l2|2
2H2O2M3d3
2H2R2
2h2u2
2H3~3
2H3c3
2I2_2q2
2I2d2
2i2s2
2I3P3W3^3
2i3r3
2I3z3
2J2]2
2J2Q2
2J2s2
2J2T2_2l2s2z2
2J2U2b2i2p2
2J3Q3t3
2J3t3
2K2p2w2
2k2s2
2K2U2
2L2]2f2
2L2e2
2L2k2
2L3U3
2M2W2
2M3a3
2M3d3m3
2M3j3
2N2q2
2N2r2
2N2v2
2O2e2{2
2O2f2
2O2i2p2
2O2n2
2O2T2m2
2O2U2]2j2
2p2}2
2P2l2
2P2W2
2Q2[2
2Q2g2
2Q2i2
2R2\2
2R3i3r3
2T2^2
2T2l2
2U2_2
2U2}2
2U2e2|2
2U2M3
2V2]2
2V2`2
2W2^2
2W293B3^3g3
2W2c2w2
2W91uE
2X2_2
2X2b2
2X2l2
2X2o2
2Y2|2
2Y2c2
2Y3v3
2Z2e2
2z9K{Ofy4"
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(3,3034383<3@3D3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3@3`3
3 3@3Z3
3 3<3G3T3[3b3i3{3
3 3'3.3>3E3L3b3
3 393p3
3 3D3
3 3h3q3
3 3L3g3
3 3M3o3
3 3v3~3
3 3W3n3w3
3 3X3v3
3 4)4g4p4
3 4\4
3 4^4|4
3 4_4
3 4+404I4
3 484Q4
3 4k4u4
3 4U4l4t4y4
3!3H3z3
3!3i3r3
3!3K3Z3c3
3!4(4
3!4(4/464L4z4
3!4(4_4
3!4+4r4|4
3!444]4s4
3!494
3!4a4~4
3!4S4Z4a4
3"3)3L3j3q3x3
3"3/363=3D3W3{3
3"3:3
3"3?3M3U3p3
3"3@3
3"3>3G3
3"393P3u3
3"3C3`3{3
3"3K3w3
3"3O3
3"3O3]3
3"3Q3X3m3
3"4,4c4j4
3"4@4z4
3"434]4t4}4
3"474X4
3"484\4
3"494B4|4
3"4f4{4
3"4I4d4
3"4P4W4
3#3*313A3Z3c3j3
3#3;3J3S3Z3b3p3x3~3
3#343K3R3
3#3G3N3U3k3
3#3n3x3
3#4*4P4W4^4e4
3#4-4d4k4
3#6B6j6
3$3.393F3M3T3[3n3
3$3@3K3X3_3f3x3
3$3[3b3
3$3C3J3O3v3}3
3$3e3
3$3g3o3v3
3$3I3\3
3$3i3s3
3$3o3y3
3$4+424R4l4
3$4K4k4
3%3,333E3a3l3y3
3%3,3B3{3
3%3_3
3%323<3A3
3%333
3%383a3w3
3%3B3P3X3s3
3%3E3_3
3%3G3M3R3Y3p3
3%3I3
3%3L3U3
3%4,4L4f4
3%4=4
3%404;4i4
3%424V4y4
3%4-444]4
3%4D4g4t4
3%4n4
3%4V4
3&3.3H3l3t3
3&3^3u3~3
3&3_3
3&3-3O3l3z3
3&3m3w3
3&4<4}4
3&4A4
3&4s4}4
3&5C5b5z5
3(3[3b3
3(3A3
3(3e3
3(3G3
3(3G3Y3
3(3h3o3
3(3M3`3
3(3s3}3
3(424r4y4
3(4d4
3)3?3d3w3
3)3`3
3)3=3b3
3)30373j3q3x3
3)323
3)333>3K3R3Y3`3s3
3)373U3h3
3)383
3)3e3o3
3)3K3r3
3)3N3
3)3N3a3
3)3O3
3)3q3
3)3t3~3
3)3u3
3)404\4
3)404-5D5f5
3)4E4X4
3)4Q4
3)4S4
3*383@3[3
3*3B3s3
3*3G3
3*3N3
3*3u3
3*4{4
3*4=4G4W4h4
3*444t4{4
3*4W4q4
3,3:3_3m3
3,3:3B3]3
3,3;3K3[3m3
3,3=4T4v4
3,3B3T3n3
3,3e3z3
3,3F3}3
3,3Q3v3
3,3t3
3,3V3l3~3
3,494]4
3,4G4
3,4l4
3,4M4k4
3,4u4
3,4x4
3.3G3
3.3G3m3
3.3H3
3.454<4\4v4
3.454c4y4
3.454o4
3.484s4}4
3.484x4
3.4I4
3.4R4j4
3.4u4m5
3/373P3t3y3
3/3H3l3q3
3/4^4
3/4_4
3/464o4
3/4E4[4
3/4O4^4~4
3/4p4
3/4s4
3/4w4
3:3C3H3W3k3
3:3F3R3^3j3v3
3:3T3n3
3:4\4m4v4
3:4D4
3:4M4v4
3;3B3
3;3h3o3
3;3T3h3
3;3U3n3
3;4d4
3;4S4f4
3?3^3
3?3I3
3?3I3p3
3?3M3[3
3?3n3
3?3q3
3?3u3
3@3d3
3@3N3v3
3@4Y4
3[3c3j3
3[M3}
3\3c3
3\3e3
3\3f3
3]3g3
3]3j3
3]3s3
3^3h3
3_3l3
3_3u3
3`3j3
3`3y3
3`4R6Y6
3{4>5
3+353@3M3T3[3b3u3
3+363C3J3Q3c3{3
3+3Y3d3k3r3
3+4]4q4
3+454|4
3+4O4g4
3<3E3
3<3F3}3
3<3F3Q3^3e3l3s3
3<3g3
3<3G3N3U3
3<3O3x3
3<3R3d3~3
3<3V3}3
3<3X3M4r4
3<4{4
3<4a4
3<4D4]4
3<4D4X4
3<4E4l4u4
3<4j4
3<4t4
3=3`3
3=3E3^3
3=3F3\3
3=3m3{3
3=3P3y3
3=3T3f3v3
3=4D4K4k4
3=4G4
3=4J4g4
3=4t4
3>3}3
3>3e3x3
3>3T3
3>4E4
3>4K4h4
3>4Y4
300930183225Z0|1
303}3
30353:3?3D3I3N3S3X3]3
30373W3q3
304:4v4
30474>4Y4v4
304C4l4
304I4
304l4
304Q4s4
313|3
313~3
313L3c3
313P3j3
313r3
314A4s4
314I4
323S3
324I4U4
324L4
324m4
3'3=3|3
333F3o3
333I3u3
333q3^4
3'343;3B3T3x3
334b4
3'383l3
3'393c3y3
3-3f3m3t3{3
3'3j3r3y3
3-3O3]3
3'4?4R4g4
3'4=4S4
3'414m4w4
343[3
343M3
344>4~4
344A4X4
344K4^4
344L4
344O4
344t4
3-474~4
3-4d4
3'4V4
3'4W4
3'4w4
353S3p3
353w3
354?4
354?4z4
354<4]4
354a4
354I4
354t4
354u4
363?3h3u3|3
363{3
363d3
363f3
364@4r4|4
364o4
364t4
373^3}3
373>3}3
373f3
373v3
374A4
374O4b4
374q4
383`3
383g3
383K3t3
383m3
383N3s3
383O3V3s3
384?4
384@4|4
384O4l4
384P4
384S4
385c5
393@3
393@3G3N3q3
393k3
393L3u3
393M3c3q3
394a4
394c4
394C4
394V4
394V4h4y4
3a3|3
3A3H3
3A3K3
3A3K3a3
3A3s3z3
3A4K4
3A4N4w4
3A4U4
3B3}3
3B3I3P3r3
3B3L3
3B4L4
3C3_3
3C3C5
3C3H3Y3
3D3K3
3D4\4
3D4N4
3E3\3e3
3E3l3
3e3o3
3E3X3
3E4b4
3E4U4m4
3E4z7S8
3F3P3Z3
3F3Y3
3F4P4
3G3]3o3
3g3I4R4n4w4
3G3N3
3g3q3
3G4g4
3g4n4
3H3S3Z3a3
3HT!0Ef
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
3I3[3
3I3e3x3
3I3S3
3i4r4
3I4s4
3J3c3
3J3n3
3J3T3
3J3W3f3u3
3K3}3
3K3R3
3k3s3
3K3U3
3L3S3
3L3w3
3M3d3
3M3W3
3M4j4
3N3e3
3N3g3
3N3r3
3N3X3
3N4U4
3O3|3
3O3T3e3
3O3V3
3O3V3]3d3
3O4}4
3O4j4
3P3c3k3
3P3i3
3P3l3}4
3P3W3
3P3Z3
3p4$5\5
3P4[4`4y4
3p4z5
3Q3[3
3Q3i3|3
3S3\3
3S3]3
3S3j3
3T3[3
3T3^3
3T3q3
3T3Y3
3T4;5
3T4~4
3T4g4
3t5M6
3U3\3
3U3]3d3
3U3_3
3U3l3
3U3p3
3V3d3
3V4z4
3W3a3
3W3o3
3W3w3
3W4^5U6
3X3b3
3X3k3
3X3l3r3w3
3Y3`3
3Y3c3
3Y3o3
3Y3v3
3Z4 5<5C5H5d5
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4)4c4
4 4/4h4p4
4 4@4`4
4 4@4Z4s4
4 4|4
4 4r4
4 595b5
4!4^4
4!4<4V4p4
4!434]4s4
4!474t4
4!4h4r4
4!4K4R4W4
4!5)505P5j5
4!5+525F5X5j5u5|5
4!5+5k5r5
4!5g5
4"4)4<4`4g4n4
4"4*4E4
4"4?4m4z4
4"4=4
4"4>4G4
4"4-444;4H4
4"464
4"4a4k4
4"4b4i4
4"4F4i4
4"4I4e4}4
4"4T4a4h4o4
4"5,5l5s5
4"555^5t5
4"5f5{5
4"5J5
4#4/4
4#4/474h4z4
4#4:4A4
4#4@4R4t4
4#4_4
4#4<4e4~4
4#4>4}4
4#4-4v4
4#4f4
4#4G4
4#5*5m5
4#5;5B5
4#50575>5N5
4#5-5`5
4#5-5m5t5
4#565h5
4#5b5
4#5E5
4#5x5~5
4$4[4b4
4$4=4
4$434C4W4
4$454T4
4$474H4Y4j4
4$484Q4
4$4p4
4$5.5e5l5
4$5.5u5
4$5;5N5
4$5?5d5
4$5[5q5
4$525u5
4$5W5
4%4[4
4%4^4
4%434;4V4
4%454T4b4
4%474I4T4[4b4o4
4%484R4i4
4%494K4]4h4o4v4
4%4C4
4%4H4
4%4J4]4
4%4L4U4
4%4t4
4%4x4
4%5,535S5m5
4%5/5l5
4%5/5o5v5
4%5/5v5
4%5:5^5
4%5:5A5a5{5
4%5:5X5a5f5
4%5_5
4%585u5
4%5d5
4&4/4
4&4_4
4&4+474S4w4
4&414=4`4l4
4&414O4U4s4{4
4&424>4J4V4b4n4z4
4&454M4e4t4
4&494b4x4
4&4c4
4&4F4S4Z4a4z4
4&4H4
4&4K4~4
4&5-5[5q5
4&5E5
4&5f5
4&5l5
4&5N5
4&5O5
4&5R5
4(414c4p4w4~4
4(42494M4_4q4|4
4(474F4V4e4t4
4(4L4
4(5/5|5
4(5^5
4(565>5Y5i5
4(5J5n5x5
4)4A4Z4
4)4d4n4
4)4H4
4)4i4
4)4M4W4i4y4
4)4P4
4)4p4z4
4)4R4h4
4)50575Y5v5
4)575W5o5
4)5Q5
4)6U(
4*414Q4k4
4*4G4
4*4O4b4
4*4z4
4*5^5
4,4;4J4f4
4,4?4I4
4,434:4\4y4
4,4O4
4,4O4Y4`4t4
4,4t4
4,4w4
4,5:5\5j5
4,5|5
4,545M5
4,5a5
4,5q5
4,5X5
4,5y5
4.4}4
4.454<4
4.4H4a4
4.4L4
4.4u4
4.4y4
4.555o5
4.5c5
4.5I5
4.5I5o5
4.7V7s7
4.R.~Oa
4/4|4
4/4B4
4/4K4
4/4M4V4[4
4/4O4s4
4/4o4v4}4
4/4T4y4
4/5:5?5|5
4/5;5
4/565o5
4/595
4/595p5w5J6Q6o6
4/5F5O5
4/5J5
4/5o5
4/5Y5d5o5
4:4[4
4:4e4
4:4t4
4:5G5k5
4;4B4I4P4[4
4;4u4
4;5\5
4;5b5
4;5E5
4;5h5'6
4;5R5
4?4{4
4?4|4
4?4k4|4
4?4R4t4
4?4S4e4
4?4u4
4?4X4_4
4?4Y4
4?5a5
4?5F5
4?5G5
4?5n5
4@4\4
4@4G4p4
4@4X4q4
4@4Z4
4@5|5
4@5d5
4@5Y5
4\4f4
4^4v4
4^5s5
4_4i4
4_5g5q5 6
4_5o5w5}5
4`4k4p4
4`5k5v5
4+4>4g4}4
4+494\4t4
4+4H4
4+4H4V4^4y4
4+4p4
4+4v4
4+4V4}4
4+5:5a5}5
4+555u5|5
4+5A5
4+5e5
4+5F5
4<4O4
4<4O4x4
4<4R4w4
4<5^5
4<5{5
4<5F5
4<5o5
4<5q5
4=4i4
4=4L4l4{4
4=4S4x4
4=5t5
4>4}4
4>4e4x4
4>4M4Y4
4>4T4f4
4>4X4
4>5^5}5
4>5H5
4>5Y5
40;0o0
405:5
405;5@5Y5
405]5r5
40575>5`5}5
405c5
405o5
414;4R4V4\4`4f4j4
414?4G4b4
414~4
414<4C4J4
414C4N4U4\4i4
414J4
414P4i4
414V4i4
414X4q4x4
415=5E5a5
415k5y5
415L5
415m5
415N5
415q5
415U5q5
424\4y4
424E4W4g4q4x4
424G4n4
424K4
424o4
424O4]4e4
425<5
425B5]5
425B5V5
434<4s4
434A4a4y4
434e4
434E4X4
434v4
434w4
434y4
435=5
435A5]5u5
435a5w5
435i5
4'4:4c4y4
4'4?4\4n4
4'4^4
4'4^4u4~4
4'4=4N4V4
4-4>4U4\4
444f4
444F4p4
444G4p4
444L4e4
445;5o5
445[5{5
445>5
445>5P5(8X8
445C5O5
445q5
4-4K4
4'4K4R4Y4o4
4-4N4~4
4'4P4
4-4P4
4-4R4e4
4'4U4`4g4n4
4'5.555I5
4-5:5W5
4-5@5
4'5^5n5|5
4-5_5
4-5{5
4'5=5w5
4'515j5t5
454@4@5
454]4
454>4x4
4-545l5
4-545o5
454D4h4{4
454I4[4i4
454Z4{4
455?5
455?5z5
455<5
455a5
455t5
4'575J5V5
4-5d5
4-5H5d5
4'5n5
4'5o5
4-5V5
464[4
464]4
464b4
464X4_4
464Y4
465@5
465=5o5
465f5
474~4
474>4^4x4
474J4s4
474n4
475A5
475o5
475v5
484U4y4
484Z4t4
485B5
494@4f4m4t4{4
494_4
494J4
494N4U4u4
494x4
495@5
495C5
495c5
495e5
4a4|4
4A4d4
4a4h4o4
4a4k4
4A4U4b4x4
4a4y4
4A4Y4
4A5\5
4A5N5~5
4a5r5
4A5S5
4a5u5
4A5Y5
4B4f4|4
4B4I4
4b4j4q4
4B4L4S4g4|4
4B5\5f5
4B5v5
4C4M4R4c4
4C5M5
4D4{4
4d4{4
4D4o4
4D5\5
4D5L5
4D5S5_5
4e4o4
4E4R4v4
4e4u4
4E5N5
4F4`4
4F4M4
4F4Y4
4F5P5
4G4^4
4g4I5R5n5w5
4G4k4
4g4q4
4G4w4
4G5)626N6W6
4G5,666H6
4G5Q5
4H4O4
4H4u4
4H4X4
4H5_5|5
4H5`5
4I4^4
4I4P4
4I5P5W5w5
4I5V5z5
4J4]4
4J4`4
4J4|4
4J4k4
4J4R4
4j4t4
4K4^4
4K4r4
4L4S4
4L4V4
4L5c5
4L5U5
4M4e4
4m4w4
4M4Z4w4
4M5j5
4M5n526X6
4n4{4
4N4d4
4N4l4
4N4u4
4N4X4
4O4s4x4
4O5<6i6
4ObH@
4P4a4j4
4P4X4_4
4q4~4
4Q4X4_4f4|4
4R4{4
4R4v4
4T4[4
4T4^4
4T4k4~4
4T4m4r4
4T5c5o5
4U4o4
4V4]4
4V4]4d4k4
4V4`4
4v5}5
4W4a4
4W4r4
4X4_4
4X4_4f4m4
4X4}5
4x425
4X4b4
4Y4u4
4Y5f5
4z<|f[c4
4z4\5
4Z4a4
4Z4s4
4Z5m5w5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5@5`5
5 5+5t5
5 505H5
5 5r5
5 6*6q6{6
5 6<6O6b6
5 6'6_6
5 666
5 666H6
5 6R6
5 6Z6
5!5(5/5
5!5(5N5Y5`5g5
5!515A5Q5a5q5
5!5a5h5
5!5G5`5
5!6;6B6I6d6
5!6[6
5!6~6
5!6+6k6r6
5!686U6x6
5"5(5,5A5a5
5"5)5I5c5|5
5"5+5S5
5"5A5Z5s5
5"5b5i5
5"5F5i5
5"6)606R6o6}6
5"6*6/6S6^6c6|6
5"6c6}6
5"6C6t6z6
5"6D6
5"6g6
5#5*5=5a5h5o5
5#5*515B5c5m5x5
5#5.5F5R5d5
5#5=5|5
5#50575>5P5h5r5}5
5#5-5=5U5|5
5#5f5
5#5I5P5W5^5
5#5l5
5#5Z5q5z5
5#6(696
5#6>6u6
5#696L6
5#6z6
5$5[5b5
5$5>5e5
5$525
5$5-5g5
5$5c5m5
5$5H5T5
5$5k5u5
5$5o5
5$5Q5
5$6.6u6
5$6`6s6
5$6+6_6
5$6<6
5$656_6v6
5$666@6J6u6
5%5,5n5
5%5e5l5
5%5G5h5
5%5L5U5
5%5L5U5|5
5%5Q5n5
5%6/6j6t6
5%6d6
5%6L6_6
5%p~P
5&5.5;5B5I5Y5m5t5{5
5&5_5
5&5D5
5&5D5K5R5t5
5&5f5m5
5&5P5
5&5V5
5&5X5
5&6=6F6}6
5&6b6
5&6b6x6
5&6C6O6~6
5&6l6
5(5;5d5z5
5(5_5v5
5(525
5(535@5G5N5`5x5
5(555:5K5
5(595J5x5
5(5E5b5
5(5Q5g5
5(6/6O6i6
5(6@6
5(656M6j6|6
5(6N6d6t6x6|6
5(6X6
5)5|5
5)5M5`5
5)5p5z5
5)5q5
5)5t5~5
5)5X5k5
5)606s6
5)636}6
5)636z6
5)666=6D6V6y6
5)6C6{6
5)6I6
5)6I6P6p6
5*5@5e5x5
5*5F5h5
5*5t5
5*616
5*646{6
5*646t6{6
5*6E6\6
5*747F7
5,5]5}5
5,555Q5
5,5C5L5
5,5F5m5
5,5j5
5,5P5h5
5,5S5
5,5U5k5
5,6\6
5,6|6
5,636a6w6
5,636o6
5,656\6e6
5,666}6
5,666m6t6
5,696k6
5,6a6
5,6d6
5,6k6
5,6K6W6^6
5,6k6x6
5,6s6}6
5,6x6
5.5_5
5.5}5
5.5<5i5
5.5b5
5.5u5
5.5z5
5.686V6
5.6a6
5.6b6
5.6E6p6
5.6Q6
5.6R6
5.6u6
5/5H5
5/5I5c5
5/5j5
5/5L5o5
5/5Q5
5/5z5
5/6^6
5/6_6
5/6~6
5/6<6`6
5/666o6
5/6F6c6
5/6H6`6k6u6
5/6L6[667p7
5/6S6X6i6
5/6w6
5/6Y6g6
5/6z6
5:5A5H5j5
5:5O5k5t5y5
5:5P5
5:5y5
5:6A6a6{6
5;5N5
5;5Q5c5
5;6E6
5;6V6
5;r7e
5?5{5
5?5|5
5?5b5
5?5F5
5?5F5f5
5?5I5u5
5?5n5
5?5N5n5}5
5?5P5z5
5?5T5m5
5?5v5
5?5Y5
5?5Y5r5
5?6c6h6y6
5?6F6
5?6I6
5?6n6
5?6U6
5@5a5
5@5V5{5
5@5Z5a5
5@6G6e6
5@6G6N6n6
5[5b5]6t6
5[5e5
5\5f5
5\6b6m7s7
5]5d5
5_5f5
5_5i5
5_6i6
5+5:5I5X5g5
5+5[5
5+5=5o5
5+5A5f5y5
5+5N5
5+626u6
5+626X6_6f6m6
5+656u6|6
5+6a6v6
5+6L6
5+6n6
5+6P6y6
5+6S6Z6n6
5+6y6
5<5_5
5<5E5~5
5<5G5e5p5
5<6{6
5<6|6
5<6E6~6
5<6r6
5=5m5{5
5=5P5y5
5=5t5
5=5V5n5y5
5=6G6
5=6H6S6e6
5>5}5
5>5E5L5
5>5Q5
5>5r5
5>5S5
5>6"7
5>6|6
50<0o0
505^5
505{5
50595p5
505S5
505X5
50676o6
506I6
506L6
506T6p6
50E0\0
515K5d5
515t5|5
515Z5p5
516t6
525=5u5
525K5
525t5
525W5|5
526~6
52696o6
535~5
53585I5
535A5I5d5
535a5v5
535L5
536:6t6
536|6
536=6
536=6t6{6
536v6
545B5J5e5
545K5T5
545P5
545Q5V5
546;6o6
546|6
546b6
546B6
546C6O6
546p6
546r6}6
5'5;5\5z5
5'5@5
5-5>5U5\5
555>5u5
555L5V5n5x5
555N5`5
556t6
5-595B5H5M5R5Y5a5u5
5'595c5z5
5'5B5Z5
5-5F5M5m5
5'5J5
5'5n5x5
5-5O5o5
5'6{6
5'6<6C6c6}6
5'6=6w6
565U5l5
566@6
5'6a6y6
5'6B6
5'6c6
5-6D6J6r6(7B7H7p7)8
5'6e6
5'6F6
5'6g6~6
5'6H6n6
5'6K6c6|6%7l7
5'6K6g6
5'6w6
5'6Y6
575~5
575M5_5
575R5z5
575V5}5
576>6
576A6
576A6x6
585?5F5M5
585D5K5l5
585K5t5
586B6
586D6h6y6
586h6
586Y6w6
595J5d5~5
595L5u5
595O5
595O5a5
595S5
595T5
595U5h5
595V5h5y5
596@6G6g6
596c6
596C6
5A5^5
5A5{5
5A5H5
5a5k5
5A5T5
5A5U5
5B6)7r7
5B6L6
5c[rc 
5C5L5Q5
5C5Y5k5
5d5|5
5D5K5
5D5W5
5D6[6n6
5D6N6
5E5\5e5
5E5L5S5s5
5e5o5
5e5u5
5E5X5h5
5E6[6
5E6o6
5F5M5s5z5
5F5P5
5f5s5
5F6e6
5F6g6q6{6
5G5]5o5
5G6)727N7W7
5h5~5
5H5a5
5H5R5
5H6O6V6v6
5H'qV]
5I5P5
5i5P6
5I5Z5c5
5ineI
5J5k5
5J5S5X5s5
5J5T5
5J5W5o5
5K5o5
5K5U5
5K6l6
5kH3H
5L5S5Z5u5
5L5U5|5
5l6}6
5M5c5}5
5M5l5y5
5M5l6
5M5m5|5
5M5W5
5N5p5
5N5U5M6d6
5N5U5s5
5N5X5
5ntel
5o5|5
5O5m5
5O5o5
5O5s5x5
5O5V5
5O5Y5
5O6e6
5O6o6
5P5]5
5P5{5
5P5b5
5P5l5
5P5W5
5P6[6`6y6
5Q5t5
5Q5V5[5
5R5y5
5R6l6
5S5]5
5S5b5y5
5S5m5
5T5^5
5U5_5
5V5`5
5V6p6
5X5_5
5X5|5
5X5b5
5X5e5
5x5Z8
5X6p6
5Y5v5
5Z5a5
5Z6{7
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,6064686<6@6P6\6h6t6
6 6&6/656u6
6 6/6K6t6
6 6:6S6
6 6;6i637:7X7
6 6?6g6
6 6@6`6
6 6_6
6 6K6d6k6
6 7;7s7z7
6 7~7
6 7=7K7S7n7
6 7=7N7e7l7
6 737W7
6 797
6 7k7u7
6!6(6J6g6u6}6
6!6_6f6
6!616>6
6!636]6s6
6!696b6
6!6A6a6
6!6E6h6
6!6F6Y6
6!6h6r6
6!7/7r7
6!7[7
6!737]7u7
6!747]7s7
6!797
6!7j7
6!7k7
6!7Z7f7r7
6"6+6l6
6"6>6G6
6"676T6Z6o6
6"6f6p6
6"6N6
6"6Q6d6
6"7<7m7
6"7>7P7
6"7a7
6"7E7
6"7o7
6#6*6N6
6#6|6
6#6<6
6#6<6}6
6#656X6b6i6}6
6#676W6s6
6#6H6[6
6#7`7
6#7>7P7
6#7V7y7
6$6,6G6
6$6[6b6
6$6[6r6{6
6$61686?6Q6i6s6~6
6$6A6z6b7
6$6e6l6s6
6$6F6h6
6$6F6v6
6$6H6O6V6l6
6$6M6c6
6$7.7u7
6$7`7s7
6$7<7
6$757h7v7
6$7l7y7
6%6*6;6x6
6%6,636@6
6%6,6L6f6
6%6|6
6%6C6J6Q6s6
6%6f6
6%6F6Y6
6%6L6U6
6%6L6U6|6
6%6x6
6%7_7
6%727V7y7
6%787u7
6%7d7
6%7h7
6%7L7_7
6%7P7_7r7
6&6?6c6h6
6&6[6b6
6&6}6
6&6+676S6w6
6&6-6M6g6
6&696b6x6
6&6c6
6&6f6m6
6&6V6
6&6X6
6&7\7t7
6&737]7z7
6&7A7
6&7d7
6&7K7
6&7Z7
6(6b6x6
6(6e6
6(6G6]6|6
6(6H6[6}6
6(6o6y6
6(6P6c6
6(6s6}6
6(7/7o7
6(7@7i7
6(7\7
6(7<7S7
6(7>7
6(737:7
6(747H7Y7
6(7G7S7Z7~7
6(7j7
6(7o7y7
6)6]6
6)626d6q6x6
6)6d6r6y6
6)7A7k7
6)7c7
6)7F7T7e7u7
6)7r7
6)7S7
6)7Y7
6)7z7
6*6/6:6]6x6
6*6>6Q6
6*626M6
6*6I6\6
6*6O6
6*717t7
6*747{7
6*747k7r7
6*747t7{7
6*7D7
6*848F8
6,656i6
6,676B6
6,696M6]6m6}6
6,6F6b6
6,6p6
6,7{7
6,7|7
6,7k7
6,7t7
6,7U7[7
6,7w7
6,7Z7o7
6.6[6
6.656U6o6
6.666C6J6Q6a6z6
6.6q6{6
6.6W6w6
6.7^7s7
6.7Q7
6/6^6
6/676>6E6P6
6/6A6o6
6/6B6
6/6B6c6
6/6m6
6/6X6
6/7~7
6/797y7
6/7e7
6/7E7
6/7J7
6/7l7
6/7M7f7
6/7o7
6/7S7X7i7
6/7Y7g7
6:6]6b6
6:6^6
6:6_6
6:6o6
6:7c7
6:7j7
6:7u7
6;6D6I6]6
6;6G6]6o6
6;6y6
6;7j7
6?7F7
6?7I7
6?7N7d7t7
6@6W6h6
6@7J7
6@7s7
6[6b6i6p6
6\6f6
6\6i6
6\6p6
6]6z6
6^6h6
6^6y6
6^7z7
6_6i6
6{7#8l8u8
6+656@6M6T6[6b6u6
6+676E6
6+6h6
6+6H6~6
6+6j6t6
6+7|7
6+727
6+7e7
6+7I7b7
6<6c6
6<6E6
6<6E6l6u6
6<6g6
6<6p6
6<6q6
6<7C7q7
6<7E7l7u7
6<7F7
6<7r7
6=6a6k6s6
6=6G6~6
6=7c7h7y7
6>6}6
6>6R6j6
6>7H7
6>7K7h7
6>7X7u7
606{6
606>6n6
606N6
607C7j7
607i7
607r7
607T7l7
616|6
616~6
616F6p6
616J6Q6
616K6d6
616O6l6
616q6
616T6
617p7
617w7
62696@6b6
626F6u6
626h6~6
626j6
626N6v6
626Q6
627<7
627B7]7
627H7l7
627L7
627q7
636@6G6N6`6
636D6[6b6
636E6W6b6i6p6}6
636Q6k6
636w6
637\7
637|7
637=7
646E6b6{6
646F6Y6z6
646V6
647;7~7
656:6S6
656<6C6J6_6
656H6
656T6{6
656U6s6
656Z6
657?7
657?7v7}7V8]8{8
657=7D7d7~7
65738^8
657d7
657t7
6'6:6c6y6
6-6=6D6R6
6'616I6X6g6v6
6-656P6
666?6q6~6
666^6
666b6
666D6j6x6
666L6i6
666Y6
667=7o7
667C7g7
667j7s7x7
667M7
667r7
6'6G6V6w6
6-6J6|6
6'6L6U6
6-6P6
6'6q6{6
676C6W6j6
676J6s6
676n6
677R7
677w7
6'7a7
6-7d7
6'7G7~7
6-7J7n7
6'7K7g7
6'7w7
6'7Z7
6-7Z8d8v8
686?6F6\6
686?6F6M6
686P6y6
686T6
686w6
687B7
687l7
687t7
696]6
696]6d6
696G6O6j6
696H6_6f6
696R6
697@7
6A6^6
6A6{6
6A7e7
6A7I7
6A7K7u7
6a7s7
6a7t7}7
6B6[6b6
6B6I6
6B7\7
6B7J7
6B7R7f7
6B7u7
6C6J6T6c6u6
6c6m6
6C6N6S6l6
6C6r6
6c7m788B8l8
6D6_6|6
6d6|6
6d6n6
6D6Z6l6
6D7\7
6D7N7
6D7z7
6E6L6
6e6o6
6E6q6
6e6r6
6E7'8L8^8q8
6E7b7~7
6E7O7
6F6f6
6F7e7
6F7P7
6G6^6g6
6G6N6
6G6N6|6
6g6q6
6G6Q6
6G7)828N8W8
6G7Q7
6H6^6
6H6R6
6H6t6
6H7`7
6H7s7
6I6e6x6
6I6f6t6
6I6S6
6I6W6|6
6I7S7
6I7W7
6J6i6p6
6J6k6
6J6T6
6J6w6
6J7Q7o7
6J7T7
6K6U6
6K7z7
6L6d6k6
6L6p6
6L6s6
6L6V6
6L6Y6}6
6L7o7
6L7U7
6M6l7
6M6T6[6{6
6M6W6
6N6e6n6
6N6f6
6N6m6
6N6t6
6N6X6
6N7i7
6O6n6
6O6V6
6O6Z6_6
6O7^7
6O7~7
6O7j7
6O9h9z9
6P6l6
6P6t6
6p6u6
6Q6^6e6l6~6
6Q6n6
6R6b6v6
6R6l6
6S6f6w6
6S6Z6
6S7|7
6T6^6
6T7[7b7
6U6\6
6U6b6
6U6e6}6
6V6]6
6V6]6{6+7L7
6W6d6k6r6
6W6w6
6W7a7
6W7K8
6W7w728
6X6b6
6X6e6l6s6
6X7p7
6Y6`6g6
6Z*'H
6z6#717w7
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7$7(7,7074787<7@7D7H7L7P7T7X7`7d7h7l7p7t7x7|7
7 7&9x9
7 7)7[7h7o7v7
7 7)7`7w7
7 7*7C7Y7x7
7 7/7F7y7
7 7@7`7
7 7\7e7
7 7'7.7A7Y7c7n7{7
7 7'7.7D7
7 7'7k7
7 7g7q7
7 7n7
7 7T7}7
7 8_8
7 8'8p8
7 898p8
7 8S8
7!7(7/7B7Z7d7o7|7
7!717A7Q7a7q7
7!7A7a7
7!7D7I7y7
7!7e7r7
7!7k7u7
7!8&8?8h8
7!8+8k8r8
7!8+8l8
7!8=8
7!8i8
7!8t8
7"7[7i7p7
7"777T7a7u7
7"787
7"7E7O7V7j7|7
7"7i7s7
7"7K7X7g7v7
7"7l7v7
7"8,8l8s8
7"8,8s8}8
7"8]8|9
7"8<8
7"8>8Q8b8
7"858l8
7#7)7/767=7D7K7R7Y7`7h7p7x7
7#7*71787b7
7#7=7V7
7#707
7#70777>7E7X7y7
7#747u7
7#7G7
7#8-8m8t8
7#8-8t8~8
7$7)7B7{7
7$7)7z7
7$7=7
7$747R7r7x7
7$767
7$7B7k7
7$7B7K7P7z7
7$7k7u7
7$7S7
7$7Y7r7
7$8;8N8
7$8@8}8
7$8\8e8
7$8+82898O8}8
7$8u8
7$8w8Y9b9~9
7%7.737e7
7%7\7
7%7_7
7%7D7,878B8T8
7%7L7U7
7%7l7v7
7%7V7l7
7%7x7
7%7Z7
7%8,838:8P8~8
7%828V8y8
7%888P8i8w8
7%888u8
7%8a8
7%8c8~8
7%8d8
7%8e8
7%8o8
7&7>7Q7
7&737:7A7Z7
7&7-7M7g7
7&7d7
7&7q7
7&7q7{7
7&8/8^8e8
7&8`8g8
7&8}8
7&808p8w8
7&838c8
7&8-8_8
7(7,7<7@7H7`7p7t7
7(7,7074787<7@7D7H7L7P7T7X7\7
7(7_7v7
7(7074787<7@7D7H7L7P7X7h7l7|7
7(7B7[7
7(7c7m7
7(7K7
7(7k7s7z7
7(7o7y7
7(7P7
7(7U7
7(8@8
7(8h8
7(8R8
7)7|7
7)707>7E7S7Z7k7r7M8T8b8i8
7)7C7Y7k7y7
7)7e7l7
7)7G7a7t7
7)7G7N7U7w7
7)7i7p7
7)7K7W7u7}7
7)7L7V7]7q7
7)7M7p7
7)7O7
7)7s7}7
7)7U7f7
7)838}8
7)8w8
7*7@7N7l7w7
7*797W7q7
7*7C7g7l7
7*7D7]7
7*7N7
7*848{8
7*848k8r8
7*848p8z8
7*8D8
7*8h8
7*8K8
7*8q8
7*8w8
7,717J7
7,757
7,757\7e7
7,7F7_7
7,7k7
7,7k7u7
7,7t7
7,858\8e8
7,858n8
7,868~8
7,898@8G8`8|8
7,8a8
7,8D8
7,8h8
7,8k8
7,8l8
7,8X8t8
7.7@7R7]7d7k7x7
7.7}7
7.757r7
7.7A7i7
7.7Q7
7.858
7.8e8
7.8I8
7.8I8o8
7.8l8
7.8Q8
7/7;7F7S7g7w7
7/7=7_7m7
7/777F7M7T7d7u7}7
7/787r7
7/7G7`7
7/7z7
7/8^8
7/8'9P9W9
7/8e8
7/8E8
7/8o8
7/8s8
7/8v8
7/8w8
7:8D8
7:8V8i8
7;7d7
7;7m7t7{7
7;7Q7
7;7Q7v7
7;7T7
7;7u7
7;7U7n7
7;8\8
7;8|8
7;8a8
7;8B8
7;8j8
7;8y8
7?7a7
7?7i7w7
7?7M7
7?7R7{7
7?7u7
7?7v7
7?7W7
7?8a8z8
7?8c8s8
7?8d8|8
7?8I8[8
7?8I8T8a8h8o8v8
7?8S8a8m8t8
7@7\7M8d8
7@7`7
7@7S7|7
7@8k8u8
7@8M8q8
7@9Y9d9
7[7b7i7
7[7h7
7[7v7
7\7i7
7\8r8
7]7z7
7^7e7
7^7e7l7
7^7y7
7_7f7
7`7j7
7`7k7p7
7+717d7
7+7i7
7+7I7
7+7r7|7
7+7x7
7+8B8p8
7+8D8R8
7+8Z8{8
7<7E7l7u7
7<7z7
7<8_8
7<8{8
7<8|8
7<8E8l8u8
7<8I8P8W8g8
7<8X8k8
7=7\8
7=7<8
7=7n7
7=7R7{7
7=7w7
7=8H8U8\8c8u8
7=8t8
7=8w8
7>7}7
7>7e7x7
7>7H7
7>7n7
7>7N7W7x7
7>8F8P8
7>8l8}8
7>8R8
7>8Y8
707?7m7
707C7M7l7|7
707h7t7
708^8s8
70878>8`8}8
70878o8
708i8
717_7
717C7
717r7
718}8
718k8
727H7
727U7
728:8?8c8n8s8
728<8|8
728L8
728m8
737>7K7R7Y7k7
73787I7
737a7
737I7[7
737O7
737w7
738J8S8
738m8
747F7p7
747G7p7
747U7m7
748;8
748>8
748L8
74N4p4
757[7
757H7P7b7
757J7n7
757r7z7
758\8o8
758<8
758=8D8d8~8
758o8
758o8}8
758t8
767^7~7
767=7
767f7
767I7r7
767L7u7
768@8
768=8o8
768=8y8
7'7@7z7
7'7\7o7
7'7^7e72898W8
7-7|7
7-767p7
777A7t7
777M7l7
777z7
778>8
778A8
778J8s8
7'7D7R7Z7u7
7'7J7i7s7
7-7m7
7-7n7u7|7
7-7P7
7-7R7b7k7s7
7-8,9
7-8:8^8
7'8[8
7'8<8`8
7'8=8b8u8
7'818d8|8
787]7
7-878w8~8
787P7i7
788?8
7-888C8U8
788O8l8
788P8
7-8H8
7'8W8
7'8w8
7'8W8w8
7-8Y8
791t}
791t5
797@7G7]7
798F8x8
798U8h8
798Y8h8
7A7^7
7A8k8
7A9Q9b9
7B7[7b7
7B7^7
7B7{7
7B7T7
7B7X7
7b8|8
7B8<9f9
7B8L8
7C7H7Y7
7C7J7
7c7j7
7C7J7Q7X7{7
7C7V7
7C7Y7k7
7d_UTZ
7D7{7
7d7n7
7D7w7~7
7D8K8R8r8
7D8N8m8
7E7\7e7
7E7c7|7
7E7d7
7E7S7
7E8O8
7F7b:l:~:
7F7f7
7F7k7
7F7P7
7F8]8f8
7F8K8P8U8Z8_8f8k8
7G7^7y7
7G8)929N9W9
7G8[8
7G8N8l8
7G8p8
7G8p8~8
7G8Q8
7h7r7
7h8u8
7H8u8
7I7e7
7I7m7
7I8z8
7J7k7
7J7Q7
7K7`7
7K7}7
7K7f7|7
7K8z8
7L7S7
7L7s7}7
7L7V7
7l8S9
7M7}7
7M7m7
7N7i7
7N7U7
7N7u7
7N7X7
7O7c7
7O7j7
7O7l7{7
7P7]7
7p7{7
7P7i7
7P7j7
7P7w7
7P7Z7
7Q7[7
7Q7h7q7
7Q7l7
7Q7q7
7R7\7
7R7Y7`7
7R7Z7_7
7S7]7
7S7k7u7
7S7Z7
7S8z8
7T7^7
7T8[9
7U7_7
7U7c7
7V7`7
7V7a7
7V7i7
7V8u8
7W7a7
7W8^8e8
7X7_7f7m7
7x7~7
7Y7u7
7Y7v7
7Y7y7
7Z7a7
7Z7d7
7Z9d9v9
8 8$8(8,8084888<8@8D8H8L8P8T8X8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(84888
8 8$8,8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8*858B8I8P8W8j8
8 8@8`8
8 8'8.858H8l8s8z8
8 898a8
8 8B8_8m8u8
8 9*9k9
8 9/9>9N9]9l9
8 9;9f9|9
8 9_9
8 9<9M:d:
8 9B9T9^9v9
8 9K9
8 9L9]9
8 9M9
8 9M9}9
8 9R9Y9`9
8!8:8l8
8!8a8h8
8!8e8r8
8!9.9L9
8!9~9
8!9f9
8!9I9f9m9
8!9n9
8!9Z9
8"8&868K8[8p8
8"8_8
8"8<8J8j8
8"8=8
8"8-8;8
8"8H8u8
8"8K8a8
8"9,9s9}9
8"9:9c9
8"9]9
8"9D9d9
8"9F9\9
8"9I9d9
8"9J9i9
8"9u9
8#8/8
8#8@8y8
8#8\8
8#8-8\8o8
8#8I8y8
8#8j8t8
8#8X8
8#9*9_9
8#989V9_9d9
8$8)8=8q8
8$8@8
8$8=8
8$878r8
8$8k8u8
8$8N8f8m8
8$8n8x8
8$8V8
8$8V8c8j8q8
8$9.9u9
8$9\9e9
8$9|9
8$939?9
8$9B9[9
8$9g9
8$9m9
8$9w9
8$9W9^9~9
8%8/8:8G8N8U8\8o8
8%8_8
8%8>8
8%888I8x8
8%8l8
8%8L8c8
8%8L8U8
8%8u8
8%8X8e8
8%9/9j9t9
8%9~9
8%9+9A9W9|9
8%939k9
8%939L9
8%989p9
8%9d9
8%9l9v9
8%9q9
8%9u9
8%9X9
8&8,8=8Q8m8{8
8&8@8g8
8&8_8
8&8+8{8
8&888I8^8o8
8&8D8W8
8&8J8
8&8l8
8&8m8
8&8q8{8
8&9=9F9
8&919<9N9
8(8@8Y8
8(898N8_8
8(8e8
8(8i8
8(8O8
8(8o8y8
8(8v8
8(9@9S9d9k9
8(9@9X9s9
8(9[:
8(919o9v9
8(9a9f9k9
8(9L9c9
8(9t9
8)8?8d8w8
8)8?8h8
8)8d8n8
8)8L8Q8
8)9^9
8)939z9
8*8G8
8*8H8e8
8*8N8
8*8X8
8*8Y8
8*9>9
8*949{9
8*9Z9
8,8?8|8
8,8<8I8]8m8}8
8,8c8l8
8,8I8[8n8
8,8K8n8x8
8,8K8R8r8
8,9?9h9~9
8,9\9e9
8,9|9
8,959a9
8,9a9
8,9B9f9
8,9J9c9
8,9k9
8,9l9
8,9o9B:U:h:v:
8,9u9
8,9w9
8,9x9
8.8~879K9Y9e9l9
8.8A8j8
8.8I8c8}8
8.8u8
8.8X8}8
8.8z8
8.9;9X9
8.9^9u9~9
8.9{9
8.989x9
8.9B9
8.9I9
8.9I9o9
8.9l9
8.9Q9
8/:@:
8/8|8
8/8~8
8/8a8
8/8B8L8d8s8
8/8G8m8{8
8/8k8
8/8T8g8
8/9^9
8/9=9W9s9
8/969o9
8/999t9~9
8/999y9
8/9l9
8/9p9
8/9s9
8/9S9k9
8/9w9
8/9z9
8:8^8
8:8A8Y8y8
8:8B8\8
8:8M8k8}8
8:8O8k8t8y8
8:8W8u8
8:9]9~9
8:9D9
8:9D9V9
8:9M9W9g9x9
8;8`8
8;8B8
8;8E8^8
8;8T8
8;8T8[8{8
8;9C9\9
8?8F8c8
8?8J8O8
8?8u8
8?8W8p8
8?9F9
8?9n9
8?9o9z9
8?9U9
8?9Y9p9
8@8\8
8@8c8j8
8@8G8Q8`8r8
8@9J9
8@9K9P9i9
8@9Y9
8[9|9
8[9s9
8\8c8
8\8e8
8\8f8
8]8j8
8^4t#
8^8y8
8^9y9
8_8}8
8_8f8
8_8i8
8`8|8
8+848f8s8z8
8+8n8v8}8
8+8T8j8
8+929_9
8+959
8+959{9
8+959q9{9
8+959u9|9
8+9A9
8+9A9S9}9
8+9F9c9
8+9R9
8+EO)
8<8E8
8<8L8k8y8
8<8n8u8|8
8<8V8o8
8<9a9y9
8<9E9l9u9
8<9F9
8<9q9
8<9R9q9
8<9U9s9-:W:
8<9z9
8=8]8z8
8=8{8
8=8I8P8}8
8=8P8y8
8=9J9g9
8=9y9
8>8e8x8
8>8H8t8
8>8S8x8
8>9[9v9
8>9|9
8>9a9
80?0F0M0
808{8
808L8
809=9a9
809L9]:t:
809o9
80B0y0
818;8]8
818~8
818C8\8}8
818D8m8
818J8
818K8
818u8
819N9
828}8
828p8
83888I8
838L8t8
839=9t9{9
839b9y9
839W9s9
848`8x8
848M8T8t8
849>9
849K9^9
849R9k9
849y9
858?8U8k8
858{8
858R8
859\9o9
859B9f9
859s9
859u9
868L8
869@9
869|9
869=9o9
869>9E9e9
869C9m9
869O9b9
878\8e8
879g9
879o9
879W9|9
879x9
8'8.858G8_8i8t8
8'8/8@8
8-8@8i8
8'8@8u8
8-868m8
8-878G8X8
888p8
889P9
889p9
889P9
889w9
889Y9f9
8-8A8S8n8
8'8c8
8'8D8Q8
8-8E8O8Z8g8n8u8|8
8'8g8n8m9
8-8O8]8
8-8P8
8-8V8l8
8-8x8
8'8X8f8
8-9:9^9
89;t}
89](u
8'949;9B9T9w9
8'949L9i9{9
8-979w9~9
898S8l8
898S8z8
898T8
899a9
899d9
899g9
8'9a9
8'9f9
8'9i9
8'9q9
8a8|8
8A8j8
8A8R8|8
8A8V8
8A8W8i8
8A9K9
8A9u9
8B8}8
8B8Y8b8
8B9\9
8B9b9
8B9L9
8bFB|
8C8\8
8C8_8
8C8V8
8C9M9
8d8|8
8D8k8
8d8v8
8D9J9^9t9
8D9N9
8e8o8
8E8q8
8E8X8
8E8Z8
8E9O9
8E9R9v9
8E9x9
8F8]8k8
8F8j8
8F8M8=9T9v9
8F9b9
8F9P9
8F9z9
8g8I9R9n9w9
8G8N8
8G8T8[8b8{8
8G8w8
8G9b9
8G9h9
8G9n9
8H8R8
8H8z8
8I8{8
8I8e8x8
8I8i8p8
8I8r8
8I8S8
8i9r9
8J8[8
8J8_8{8
8J8T8
8J8w8
8J9U9`9
8K8h8
8K8m8
8K8o8
8K8p8
8K8U8
8L8S8
8L8V8
8L8w8
8L8Y8}8
8M8T8[8{8
8M8W8
8M9j9
8N8_8h8
8N8q8
8O8|8
8O8V8
8O9e9
8P`'#
8P8]8
8P8W8
8P8W8^8~8
8P8Z8
8P9i9
8Q8n8
8R8t8{8
8R8Y8
8r9&:G:Q:[:
8R9l9
8T8^8
8U8_8
8u8Z9m9w9
8V8]8
8V8`8
8v8F9
8VWj8
8W8a8
8W8n8w8
8X8b8
8X8k8
8Z8d8
8Z8r8
8Z8s8
9 :*:j:q:
9 :*:q:{:
9 :_:
9 :e:
9 :N:<<N<\<
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9 9*959B9I9P9W9j9
9 9?9J9U9q9
9 9@9`9
9 999
9 9B9Z9m9
9 9I9
9!:(:_:
9!:.:5:<:U:q:|:
9!:.:L:
9!:?:X:
9!:[:
9!:_:}:
9!:+:r:|:
9!:A:H:h:
9!:m:z:
9!:n:
9!9(989L9S9Z9a9
9!9+969C9J9Q9X9k9
9!939N9h9z9
9!9a9h9
9!9n9
9":`:
9":F:Q:Z:n:
9":M:l:
9":p:
9"9;9
9"9?9]9z9
9"9_9
9"909A9V9g9
9#:?:R:
9#:7:I:h:
9#:d:
9#:W:^:y:
9#9*919J9
9#9*9L9i9w9
9#9<9}9
9#999r9y9
9#9G9
9#9J9
9#9n9x9
9$:.:u:
9$:;:D:{:
9$:;:N:
9$9(9,90989<9@9D9L9P9T9X9`9d9h9l9t9x9|9
9$9=9~9
9$979M9
9$9B9K9P9z9
9$9d9~9
9$9I9\9
9$9X9f9
9%:,:
9%:,:M:v:
9%:,;
9%:/:o:v:
9%:_:
9%:8:
9%:8:a:w:
9%:P:h:
9%9,9R9]9d9k9
9%959N9X9_9t9
9%969W9
9%989a9w9
9%9J9]9
9%9Q9W9`9i9s9
9&:-:
9&:>:E:^:v:
9&:D:]:
9&:Z:c:h:
9&9/9f9}9
9&9@9
9&9[9p9
9&9^9
9&9_9
9&9+9{9
9&9-9M9g9
9&9f9m9
9&9K9^9
9&9s9
9(:?:\:
9(:\:
9(:d:
9(:p:
9(:s:}:
9(9\9
9(999N9_9
9(9A9O9
9(9c9m9
9(9e9
9):3:s:z:
9):Q:
9):S:
9)9`9
9)9|9
9)9a9q9
9)9D9e9
9)9d9n9
9)9J9i9|9
9)9q9
9)9t9~9
9)9U9p9
9*:;:e:|:
9*:4:{:
9*:B:g:z:
9*:E:
9*:K:
9*:K:c:v:
9*:l:|:
9*:N:[:
9*9:9Y9
9*9@9^9
9*9<9O9w9
9*919p9
9*959;9P9U9^9i9|9
9*9u9
9,:5:\:e:
9,:5:g:
9,:n:
9,:t:
9,:u:
9,939S9m9
9,9i9
9,9I9W9_9z9
9,9k9
9,9L9[9{9
9,9s9}9
9,9t9
9.:;:X:
9.:8:
9.:8:s:}:
9.:H:O:
9.:Q:
9.:Z:y:
9.9}9
9.9>9N9^9n9~9
9.989C9P9W9^9e9x9
9.9H9a9
9.9N9U9\9v9
9/:^:
9/:6:d:z:
9/:6:o:
9/:9:t:~:
9/:9:y:
9/:l:
9/:m:
9/:N:
9/:p:
9/:s:
9/:Y:
9/:Y:g:
9/:Z:a:
9/9?9
9/9_9
9/969=9S9
9/9A9o9
9-:::W:
9::l:s:z:
9':?:h:{:
9-:\:
9':0:f:
9:9[9
9:9^9
9:9A9l9
9:9h9
9:9t9
9-:d:
9-:D:f:
9-:F:Q:{:
9-:G:N:h:
9-:Q:i:
9-:Q:q:
9':r:
9':w:
9;:b:
9;:B:
9;:d:j:
9;:w:
9;9b9z9
9;9E9^9
9;9p9
9;t?h
9?:{:
9?:c:h:y:
9?:I:
9?:R:v:
9?:U:
9?9]9z9
9?9~9
9?9n9
9?9W9p9
9@:J:|:
9@9_9v9
9[9e9
9\$ t
9\$,t
9\$0t
9\$8t
9\$Ht
9\:f:
9\9f9
9^:h:
9^9e9
9_:i:{:
9_9f9
9_9i9
9`9m9
9+:2:
9+:2:o:
9+:5:
9+:K:U:n:
9+:u:
9+9_9
9+9=9g9}9
9+9>9g9}9
9+979>9F9g9
9+999X9f9
9+9H9
9+9K9
9+9K9R9Y9`9k9|9
9+9P9c9
9+9W9j9
9<:{:
9<:C:}:
9<:c:v:
9<:h:
9<9_9
9<9Q9
9<9q9
9<9Z9
9<y1nX
9=:G:
9=:I:P:
9=:J:g:
9=:Z:~:
9=9B9[9
9=9D9d9~9
9=9Q9Y9z9
9=9v9
9=9V9]9}9
9>:Y:
9>9c9
9>9e9
9>9T9y9
9>u3WSj
90:7:`:
90:F:M:
90:o:
909{9
909~9
90979>9`9}9
909B9M9T9[9h9
91:8:o:
91:I:
91:k:
91:q:
919|9
919<9C9J9W9
919D9O9`9|9
919H9T9h9
919I9S9^9k9r9y9
919J9
919u9
919W9
919Z9
92:<:|:
92:<:r:|:
92:B:Z:
92:d:k:r:
92:f:s:z:
92:V:r:
929[9q9
929~9
929=9J9Q9X9j9
929E9n9
929L9h9T:s:
929o9
929p9
929U9
929V9n9
93:=:t:{:
93:J:S:
939_9
939e9
939E9
939F9Y9
939U9
939w9
939X9
94:;:o:
94:[:{:
94:|:
94:>:u:|:
94:k:
94:K:^:
94:l:
94:l:u:
94:Q:
94:t:
949;9[9u9
949;9B9d9
949=9D9Y9h9
949M9T9t9
949P9
949q9
95:?:
95:?:{:
95:?:z:
95:\:o:
95:o:
95:t:
95:u:
959^9
959<9\9v9
959D9~9
959R9d9
96:f:{:
96:p:~:
96:Z:j:
969=9n9
969f9
969G9q9
969L9^9
969O9h9
97:A:x:
97:g:
97:S:
979A9m9
979Q9j9
97s/j
98:B:
98:P:
98:t:
989f9
989g9
989P9i9
99:@:G:g:
99:G:`:h:n:x:}:
99:P:Y:
9'9@9
9'919`9s9
9-989?9F9S9
999_9
999f9z9
999n9
9'9C9N9[9b9i9{9
9-9E9g9x9
9-9F9
9-9J9X9`9{9
9'9n9x9
9-9R9e9
9A:d:
9a:t:
9A9{9
9a9k9
9A9W9u9
9B:z:
9b9i9p9w9
9b9l9
9b9r9
9B9U9~9
9C:~:
9C:a:h:o:
9C:U:
9C9I9O9t9
9C9M9
9C9u9
9D$8vO
9D:K:R:r:
9D:N:
9d:s:
9d9{9
9D9K9|9
9d9n9
9D9Z9
9E:O:
9e9o9
9E9t9
9F(u,j
9F:P:
9F9V9e9t9
9F9x9
9G:g:
9G|~M
9g9I:R:n:w:
9G9Q9
9H:m;
9H:O:V:]:
9I:i:x:
9I:p:
9I:S:
9I:t:
9I9V9]9d9v9
9I9x9
9J:T:
9J9Q9|9
9J9Q9f9
9j9t9
9K$v;
9K:k:
9K:V:]:
9K:W:^:
9K0t"
9K9a9
9K9z9
9L9U9|9
9M9T9[9b9x9
9M9Z9w9
9N:i:
9N9n9
9N9u9
9O0t?9O8t:9O<t5
9O9n9
9P$v-
9P$vP3
9P9l9
9P9l9}:
9P9Z9
9Q tQ9Q$tL
9Q$vW3
9Q,t h4R
9Q,t>
9Q:v:
9Q9l9
9R:l:
9R:Y:`:g:{:
9R9e9
9R9h9
9R9w9
9R9Y9`9g9}9
9S:s:
9S9Z9
9T:c:o:
9T9[9
9T9^9
9T9l9
9U:d:
9U9_9
9U9|9
9U9y9
9V:y:
9V9]9
9V9`9
9V9{9
9V9i9
9V9z9
9W99:B:^:g:
9W9a9
9W9d9
9W9u9
9wht#
9X9::
9X9_9
9X9|9
9X9a9
9X9b9
9Y,tq
9Y,tQ
9Y,tr
9y:$;E;O;Y;
9Y9c9
9Z,t<
9Z,te
9Z9x9
A$;A(
A$9Y,u
a=nv~
A0;B@
a8Lnc
AAppExecutionAlias
AccessControlFlags
AcquireSRWLockExclusive
AcquireSRWLockShared
action
Action
activatibleClassId
Activation
Activation\Data
Activation\Data\
Activation\Index
Activation\Index\ActivationKey
ActivationKey
ActivationStatics::ActivateInstance
ActivationStatics::ctor
ActivationStatics::dtor
ActivationStatics::Exists
ActivationStatics::ExistsByActivationKey
ActivationStatics::Find
ActivationStatics::TryGet
ActivationStatics::TryGetByActivationKey
ActivityError
ActivityFailure
ActivityIntermediateStop
ActivityStoppedAutomatically
Add: PackageDependencyId=%ls, UserSid=%p
aebN`
After:DeploymentJournalSize
After:DeploymentSize
After:MachineJournalSize
After:MachineSize
Ah;Qt|
Analyze
ANALYZE %s;
ANALYZE;
Analyze_Incremental
api-ms-win-appmodel-runtime-internal-l1-1-1.dll
api-ms-win-appmodel-runtime-internal-l1-1-2.dll
api-ms-win-appmodel-runtime-internal-l1-1-3.dll
api-ms-win-appmodel-runtime-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-0.dll
api-ms-win-core-file-l2-1-0.dll
api-ms-win-core-file-l2-1-2.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-psapi-l1-1-0.dll
api-ms-win-core-realtime-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-string-l2-1-1.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-windowserrorreporting-l1-1-1.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-accesshlpr-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-lsalookup-l1-1-0.dll
api-ms-win-security-lsalookup-l2-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-service-core-l1-1-0.dll
api-ms-win-service-management-l1-1-0.dll
api-ms-win-service-management-l2-1-0.dll
api-ms-win-service-winsvc-l1-1-0.dll
ApiSetQueryApiSetPresence
AppExecutionAliasStatics::ActivateInstance
AppExecutionAliasStatics::ctor
AppExecutionAliasStatics::dtor
AppExecutionAliasStatics::Exists
AppExecutionAliasStatics::ExistsByAlias
AppExecutionAliasStatics::ExistsByAliasAndExtension
AppExecutionAliasStatics::ExistsByExtension
AppExecutionAliasStatics::ExistsByUserAndAlias
AppExecutionAliasStatics::Find
AppExecutionAliasStatics::FindByAlias
AppExecutionAliasStatics::FindByExtension
AppExecutionAliasStatics::FindByUserAndAlias
AppExecutionAliasStatics::FindByUserAndAliasAndNotDisabled_SortedByEnabledAndInstallTime
AppExecutionAliasStatics::FindByUserAndApplicationUserModelId
AppExecutionAliasStatics::Get
AppExecutionAliasStatics::GetByAliasAndExtension
AppExecutionAliasStatics::TryGet
AppExecutionAliasStatics::TryGetByAliasAndExtension
AppExecutionAliasUser
AppExecutionAliasUserStatics::ActivateInstance
AppExecutionAliasUserStatics::Add
AppExecutionAliasUserStatics::ctor
AppExecutionAliasUserStatics::Delete
AppExecutionAliasUserStatics::DeleteByApplicationIdentityAndUserAndAlias
AppExecutionAliasUserStatics::dtor
AppExecutionAliasUserStatics::Exists
AppExecutionAliasUserStatics::ExistsByApplicationIdentity
AppExecutionAliasUserStatics::ExistsByApplicationIdentityAndUser
AppExecutionAliasUserStatics::ExistsByApplicationIdentityAndUserAndAlias
AppExecutionAliasUserStatics::ExistsByUser
AppExecutionAliasUserStatics::Find
AppExecutionAliasUserStatics::FindByApplicationIdentity
AppExecutionAliasUserStatics::FindByApplicationIdentityAndUser
AppExecutionAliasUserStatics::FindByUser
AppExecutionAliasUserStatics::Get
AppExecutionAliasUserStatics::GetByApplicationIdentityAndUserAndAlias
AppExecutionAliasUserStatics::TryGet
AppExecutionAliasUserStatics::TryGetByApplicationIdentityAndUserAndAlias
AppExecutionAliasUserStatics::Update
AppExtension
AppExtension\Data
AppExtension\Data\
AppExtension\Index
AppExtension\Index\ExtensionAndName
AppExtension\Index\Name
AppExtensionHost
AppExtensionHostStatics::ActivateInstance
AppExtensionHostStatics::ctor
AppExtensionHostStatics::dtor
AppExtensionHostStatics::Exists
AppExtensionHostStatics::ExistsByExtension
AppExtensionHostStatics::ExistsByExtensionAndName
AppExtensionHostStatics::ExistsByUserAndApplicationUserModelIdAndName
AppExtensionHostStatics::Find
AppExtensionHostStatics::FindByExtension
AppExtensionHostStatics::Get
AppExtensionHostStatics::GetByExtensionAndName
AppExtensionHostStatics::TryGet
AppExtensionHostStatics::TryGetByExtensionAndName
AppExtensionStatics::ActivateInstance
AppExtensionStatics::ctor
AppExtensionStatics::dtor
AppExtensionStatics::Exists
AppExtensionStatics::ExistsByExtension
AppExtensionStatics::ExistsByExtensionAndName
AppExtensionStatics::ExistsByName
AppExtensionStatics::Find
AppExtensionStatics::FindByExtension
AppExtensionStatics::FindByName
AppExtensionStatics::FindByUserOrDefaultAccountAndName
AppExtensionStatics::FindByUserOrDefaultAccountAndPackageFullNameAndName
AppExtensionStatics::Get
AppExtensionStatics::GetByExtensionAndName
AppExtensionStatics::TryGet
AppExtensionStatics::TryGetByExtensionAndName
AppInstaller
AppInstallerStatics::ActivateInstance
AppInstallerStatics::ctor
AppInstallerStatics::dtor
AppInstallerStatics::Exists
AppInstallerStatics::ExistsByUri
AppInstallerStatics::Find
AppInstallerStatics::Get
AppInstallerStatics::GetByUri
AppInstallerStatics::TryGet
AppInstallerStatics::TryGetByUri
AppInstallerUri
AppInstallerUriStatics::ActivateInstance
AppInstallerUriStatics::ctor
AppInstallerUriStatics::dtor
AppInstallerUriStatics::Exists
AppInstallerUriStatics::ExistsByAppInstaller
AppInstallerUriStatics::ExistsByAppInstallerAndUriType
AppInstallerUriStatics::ExistsByAppInstallerAndUriTypeAndIndex
AppInstallerUriStatics::ExistsByAppInstallerAndUriTypeAndUri
AppInstallerUriStatics::Find
AppInstallerUriStatics::FindByAppInstaller
AppInstallerUriStatics::FindByAppInstallerAndUriType
AppInstallerUriStatics::TryGet
AppInstallerUriStatics::TryGetByAppInstallerAndUriTypeAndIndex
AppInstallerUriStatics::TryGetByAppInstallerAndUriTypeAndUri
Application
Application\Data
Application\Data\
Application\Index
Application\Index\Package
Application\Index\PackageAndPackageRelativeApplicationId
ApplicationAndCategory
ApplicationBackgroundTask
ApplicationBackgroundTaskStatics::ActivateInstance
ApplicationBackgroundTaskStatics::ctor
ApplicationBackgroundTaskStatics::dtor
ApplicationBackgroundTaskStatics::Exists
ApplicationBackgroundTaskStatics::ExistsByExtension
ApplicationBackgroundTaskStatics::ExistsByExtensionAndIndex
ApplicationBackgroundTaskStatics::ExistsByType
ApplicationBackgroundTaskStatics::ExistsByTypeAndExtension
ApplicationBackgroundTaskStatics::ExistsByUserAndType
ApplicationBackgroundTaskStatics::Find
ApplicationBackgroundTaskStatics::FindByExtension
ApplicationBackgroundTaskStatics::FindByType
ApplicationBackgroundTaskStatics::FindByUserAndType
ApplicationBackgroundTaskStatics::Get
ApplicationBackgroundTaskStatics::GetByExtensionAndIndex
ApplicationBackgroundTaskStatics::GetByTypeAndExtension
ApplicationBackgroundTaskStatics::TryGet
ApplicationBackgroundTaskStatics::TryGetByExtensionAndIndex
ApplicationBackgroundTaskStatics::TryGetByTypeAndExtension
ApplicationContentUriRule
ApplicationContentUriRuleStatics::ActivateInstance
ApplicationContentUriRuleStatics::ctor
ApplicationContentUriRuleStatics::dtor
ApplicationContentUriRuleStatics::Exists
ApplicationContentUriRuleStatics::ExistsByApplication
ApplicationContentUriRuleStatics::ExistsByApplicationAndIndex
ApplicationContentUriRuleStatics::Find
ApplicationContentUriRuleStatics::FindByApplication
ApplicationContentUriRuleStatics::FindByApplication_SortedByIndex
ApplicationContentUriRuleStatics::Get
ApplicationContentUriRuleStatics::GetByApplicationAndIndex
ApplicationContentUriRuleStatics::TryGet
ApplicationContentUriRuleStatics::TryGetByApplicationAndIndex
ApplicationExtension
ApplicationExtension\Data
ApplicationExtension\Data\
ApplicationExtension\Index
ApplicationExtension\Index\Application
ApplicationExtension\Index\ApplicationAndCategory
ApplicationExtension\Index\Category
ApplicationExtensionStatics::ActivateInstance
ApplicationExtensionStatics::ctor
ApplicationExtensionStatics::dtor
ApplicationExtensionStatics::Exists
ApplicationExtensionStatics::ExistsByApplication
ApplicationExtensionStatics::ExistsByApplicationAndCategory
ApplicationExtensionStatics::ExistsByApplicationAndIndex
ApplicationExtensionStatics::ExistsByCategory
ApplicationExtensionStatics::ExistsByUserAndCategory
ApplicationExtensionStatics::Find
ApplicationExtensionStatics::FindByApplication
ApplicationExtensionStatics::FindByApplicationAndCategory
ApplicationExtensionStatics::FindByCategory
ApplicationExtensionStatics::FindByUserAndCategory
ApplicationExtensionStatics::FindByUserAndCategoryAndApplicationUserModelId
ApplicationExtensionStatics::FindByUserAndCategoryAndPackageFullName
ApplicationExtensionStatics::FindByUserOrDefaultAccountAndCategory
ApplicationExtensionStatics::FindByUserOrDefaultAccountAndPackageFullNameAndFileType
ApplicationExtensionStatics::FindByUserOrDefaultAccountAndPackageFullNameAndProtocolName
ApplicationExtensionStatics::Get
ApplicationExtensionStatics::GetByApplicationAndIndex
ApplicationExtensionStatics::TryGet
ApplicationExtensionStatics::TryGetByApplicationAndIndex
ApplicationExtensionStatics::TryGetByUserAndApplicationUserModelIdAndFileType
ApplicationExtensionStatics::TryGetByUserAndApplicationUserModelIdAndProtocolName
applicationIdentity
ApplicationIdentity
ApplicationIdentityStatics::ActivateInstance
ApplicationIdentityStatics::ctor
ApplicationIdentityStatics::dtor
ApplicationIdentityStatics::Exists
ApplicationIdentityStatics::ExistsByApplicationUserModelId
ApplicationIdentityStatics::Find
ApplicationIdentityStatics::TryGet
ApplicationIdentityStatics::TryGetByApplicationUserModelId
ApplicationProperty
ApplicationPropertyStatics::ActivateInstance
ApplicationPropertyStatics::ctor
ApplicationPropertyStatics::dtor
ApplicationPropertyStatics::Exists
ApplicationPropertyStatics::ExistsByApplication
ApplicationPropertyStatics::ExistsByApplicationAndIndex
ApplicationPropertyStatics::ExistsByApplicationAndName
ApplicationPropertyStatics::ExistsByName
ApplicationPropertyStatics::ExistsByUserAndName
ApplicationPropertyStatics::Find
ApplicationPropertyStatics::FindByApplication
ApplicationPropertyStatics::FindByApplicationAndName
ApplicationPropertyStatics::FindByName
ApplicationPropertyStatics::FindByUserAndName
ApplicationPropertyStatics::Get
ApplicationPropertyStatics::GetByApplicationAndIndex
ApplicationPropertyStatics::TryGet
ApplicationPropertyStatics::TryGetByApplicationAndIndex
ApplicationStatics::ActivateInstance
ApplicationStatics::ctor
ApplicationStatics::dtor
ApplicationStatics::Exists
ApplicationStatics::ExistsByApplicationUserModelId
ApplicationStatics::ExistsByEditionId
ApplicationStatics::ExistsByPackage
ApplicationStatics::ExistsByPackageAndPackageRelativeApplicationId
ApplicationStatics::ExistsByPackageFamilyName
ApplicationStatics::ExistsByPackageFullName
ApplicationStatics::ExistsByUserAndApplicationUserModelId
ApplicationStatics::ExistsByUserAndPackage
ApplicationStatics::ExistsByUserAndPackageFamily
ApplicationStatics::ExistsByUserAndPackageFamilyAndPackageType
ApplicationStatics::ExistsByUserAndPackageFamilyName
ApplicationStatics::ExistsByUserAndPackageFamilyNameAndPackageType
ApplicationStatics::ExistsByUserAndPackageFullName
ApplicationStatics::ExistsByUserOrDefaultAccountAndApplicationUserModelId
ApplicationStatics::ExistsByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
ApplicationStatics::ExistsByUserOrDefaultAccountAndPackageFullName
ApplicationStatics::Find
ApplicationStatics::FindByApplicationUserModelId
ApplicationStatics::FindByEditionId
ApplicationStatics::FindByPackage
ApplicationStatics::FindByPackageFamilyName
ApplicationStatics::FindByUser
ApplicationStatics::FindByUserAndAnyAppExecutionAlias
ApplicationStatics::FindByUserAndAppListEntry
ApplicationStatics::FindByUserAndPackage
ApplicationStatics::FindByUserAndPackageFamily
ApplicationStatics::FindByUserAndPackageFamilyAndPackageType
ApplicationStatics::FindByUserAndPackageFamilyName
ApplicationStatics::FindByUserAndPackageFamilyNameAndAppListEntry
ApplicationStatics::FindByUserAndPackageFamilyNameAndPackageType
ApplicationStatics::FindByUserAndPackageFullName
ApplicationStatics::FindByUserOrDefaultAccount
ApplicationStatics::FindByUserOrDefaultAccountAnd_ApplicationID
ApplicationStatics::FindByUserOrDefaultAccountAndApplicationUserModelId
ApplicationStatics::FindByUserOrDefaultAccountAndAppListEntry
ApplicationStatics::FindByUserOrDefaultAccountAndHostId
ApplicationStatics::FindByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
ApplicationStatics::FindByUserOrDefaultAccountAndPackageFullName
ApplicationStatics::Get
ApplicationStatics::GetApplicationTypeByUserAndApplicationUserModelId
ApplicationStatics::GetByPackageAndPackageRelativeApplicationId
ApplicationStatics::GetByUserAnd_ApplicationId
ApplicationStatics::GetByUserAndApplicationUserModelId
ApplicationStatics::GetCurrent
ApplicationStatics::TryGet
ApplicationStatics::TryGetActivationInfoByUserAndApplicationUserModelId
ApplicationStatics::TryGetByPackageAndPackageRelativeApplicationId
ApplicationStatics::TryGetByUserAndApplicationUserModelId
ApplicationUser
ApplicationUser\Data
ApplicationUser\Data\
ApplicationUser\Index
ApplicationUser\Index\Application
ApplicationUser\Index\PackageUser
ApplicationUser\Index\PackageUserAndApplication
ApplicationUser\Index\User
ApplicationUser\Index\UserAndApplication
ApplicationUser\Index\UserAndApplicationUserModelId
ApplicationUserModelId
AppModelPackageRepository
AppService
AppServiceStatics::ActivateInstance
AppServiceStatics::ctor
AppServiceStatics::dtor
AppServiceStatics::Exists
AppServiceStatics::ExistsByExtension
AppServiceStatics::ExistsByExtensionAndIndex
AppServiceStatics::ExistsByName
AppServiceStatics::ExistsByNameAndExtension
AppServiceStatics::ExistsByUserAndName
AppServiceStatics::Find
AppServiceStatics::FindByExtension
AppServiceStatics::FindByName
AppServiceStatics::FindByUserAndName
AppServiceStatics::Get
AppServiceStatics::GetByExtensionAndIndex
AppServiceStatics::GetByNameAndExtension
AppServiceStatics::TryGet
AppServiceStatics::TryGetByExtensionAndIndex
AppServiceStatics::TryGetByNameAndExtension
AppUriHandler
AppUriHandler\Data
AppUriHandler\Data\
AppUriHandler\Index
AppUriHandler\Index\Extension
AppUriHandler\Index\HostName
AppUriHandler\Index\HostNameAndExtensionAndPath
AppUriHandler\Index\ProgID
AppUriHandler\Index\ProgIDAndExtension
AppUriHandlerGroup
AppUriHandlerGroup\Data
AppUriHandlerGroup\Data\
AppUriHandlerGroup\Index
AppUriHandlerGroup\Index\Extension
AppUriHandlerGroup\Index\NameAndExtension
AppUriHandlerGroupStatics::ActivateInstance
AppUriHandlerGroupStatics::ctor
AppUriHandlerGroupStatics::dtor
AppUriHandlerGroupStatics::Exists
AppUriHandlerGroupStatics::ExistsByExtension
AppUriHandlerGroupStatics::ExistsByName
AppUriHandlerGroupStatics::ExistsByNameAndExtension
AppUriHandlerGroupStatics::Find
AppUriHandlerGroupStatics::FindByExtension
AppUriHandlerGroupStatics::FindByName
AppUriHandlerGroupStatics::TryGet
AppUriHandlerGroupStatics::TryGetByNameAndExtension
AppUriHandlerGroupStatics::TryGetByUserAndPackageFamilyNameAndName
AppUriHandlerStatics::ActivateInstance
AppUriHandlerStatics::ctor
AppUriHandlerStatics::dtor
AppUriHandlerStatics::Exists
AppUriHandlerStatics::ExistsByExtension
AppUriHandlerStatics::ExistsByHostName
AppUriHandlerStatics::ExistsByHostNameAndExtension
AppUriHandlerStatics::ExistsByProgID
AppUriHandlerStatics::ExistsByProgIDAndExtension
AppUriHandlerStatics::ExistsByUser
AppUriHandlerStatics::ExistsByUserAndHostNameAndPath
AppUriHandlerStatics::ExistsByUserAndProgId
AppUriHandlerStatics::ExistsByUserOrDefaultAccountAndHostNameAndPath
AppUriHandlerStatics::ExistsByUserOrDefaultAccountAndHostNameAndPathAndPackageFamilyName
AppUriHandlerStatics::Find
AppUriHandlerStatics::FindAllLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcardedAndPath
AppUriHandlerStatics::FindAllLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcardedAndPathAndPackageFamilyName
AppUriHandlerStatics::FindAllLauncherInfoByUserOrDefaultAccountAndProgId
AppUriHandlerStatics::FindByExtension
AppUriHandlerStatics::FindByHostName
AppUriHandlerStatics::FindByHostNameAndExtension
AppUriHandlerStatics::FindByProgID
AppUriHandlerStatics::FindByUser
AppUriHandlerStatics::FindByUserAndHostNameAndPath
AppUriHandlerStatics::FindByUserAndProgId
AppUriHandlerStatics::FindByUserOrDefaultAccount
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndHostNameAndPath
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndHostNameAndPathAndPackageFamilyName
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcardedAndPath
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcardedAndPathAndPackageFamilyName
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndProgId
AppUriHandlerStatics::Get
AppUriHandlerStatics::GetByProgIDAndExtension
AppUriHandlerStatics::TryGet
AppUriHandlerStatics::TryGetByHostNameAndExtensionAndPath
AppUriHandlerStatics::TryGetByProgIDAndExtension
AppxExtension
AppxManifest
AppxManifestStatics::ActivateInstance
AppxManifestStatics::ctor
AppxManifestStatics::dtor
AppxManifestStatics::Exists
AppxManifestStatics::ExistsByPackage
AppxManifestStatics::Find
AppxManifestStatics::Get
AppxManifestStatics::GetByPackage
AppxManifestStatics::TryGet
AppxManifestStatics::TryGetByPackage
AppxMiniRepository
AppxPolicies
AppxRoot
appxsvc
appxsvc status=%u
Aq4B V
Architectures
ARWVPQhH
as.,k{n?,
ATTACH DATABASE '%s' AS '%s';
AutoCheckIntegrity
automatic index on PackageIdByAll(_PackageID)
AutoUpdatePackage
AutoUpdatePackageStatics::ActivateInstance
AutoUpdatePackageStatics::ctor
AutoUpdatePackageStatics::dtor
AutoUpdatePackageStatics::Exists
AutoUpdatePackageStatics::ExistsByAppInstaller
AutoUpdatePackageStatics::ExistsByAppInstallerAndPackageFamily
AutoUpdatePackageStatics::ExistsByAppInstallerAndPackageFamilyAndVersion
AutoUpdatePackageStatics::ExistsByAppInstallerAndPackageFamilyAndVersionAndArchitecture
AutoUpdatePackageStatics::Find
AutoUpdatePackageStatics::FindByAppInstaller
AutoUpdatePackageStatics::FindByAppInstallerAndPackageFamily
AutoUpdatePackageStatics::FindByAppInstallerAndPackageFamilyAndVersion
AutoUpdatePackageStatics::TryGet
AutoUpdatePackageStatics::TryGetByAppInstallerAndPackageFamilyAndVersionAndArchitecture
AVSRW
ay$1u
B"LA<|
B$+D$
B(+D$
B,V;A<u#
B<;r0s|
B0R0m0
bad allocation
bad array new length
Bcrypt.dll
BCryptCloseAlgorithmProvider
BCryptCreateHash
BCryptDestroyHash
BCryptFinishHash
BCryptGetProperty
BCryptHashData
BCryptOpenAlgorithmProvider
BD)Vu
Before:DeploymentJournalSize
Before:DeploymentSize
Before:MachineJournalSize
Before:MachineSize
BEGIN -> COMMIT;
BEGIN -> ROLLBACK;
BEGIN DEFERRED /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
BEGIN EXCLUSIVE /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
BEGIN IMMEDIATE /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
Bn9!v
BPQRh0
buffer error
BuildSecurityDescriptorForSharingAccess
Bundle
Bundle.Package+_WorkId duplicate keys
BundlePackage
BundlePackageStatics::ActivateInstance
BundlePackageStatics::ctor
BundlePackageStatics::dtor
BundlePackageStatics::Exists
BundlePackageStatics::ExistsByBundle
BundlePackageStatics::ExistsByBundleAndVersion
BundlePackageStatics::ExistsByBundleAndVersionAndArchitecture
BundlePackageStatics::ExistsByBundleAndVersionAndArchitectureAndResourceId
BundlePackageStatics::ExistsByPackageFamilyNameAndResourceId
BundlePackageStatics::ExistsByPackageType
BundlePackageStatics::ExistsByPackageTypeAndBundle
BundlePackageStatics::Find
BundlePackageStatics::FindByBundle
BundlePackageStatics::FindByBundleAndVersion
BundlePackageStatics::FindByBundleAndVersionAndArchitecture
BundlePackageStatics::FindByPackageType
BundlePackageStatics::FindByPackageTypeAndBundle
BundlePackageStatics::Get
BundlePackageStatics::GetByBundleAndVersionAndArchitectureAndResourceId
BundlePackageStatics::TryGet
BundlePackageStatics::TryGetByBundleAndVersionAndArchitectureAndResourceId
BundleResource
BundleStatics::ActivateInstance
BundleStatics::ctor
BundleStatics::dtor
BundleStatics::Exists
BundleStatics::ExistsByPackage
BundleStatics::Find
BundleStatics::Get
BundleStatics::GetByPackage
BundleStatics::TryGet
BundleStatics::TryGetByPackage
busy_timeout
BusyCount
BusyDelayBetweenRetries
BusyMaxTimeout
BusyTimeout
BVT1%~z
C ;A t%
C ;A u
C ;F t(
C ;F u
C ;F0u
C ;G u
C ;G(u
C$;A$t%
C$;A$t0
C$;A@
C$;F$t(
C$;F4t%
C$;G$t(
C$;G,t(
C$;G,t0
C(;F(u
C,;A@t-
C,;F,t(
C,mFL
C;o"oks
C0;F0u
C0_^[]
C4;F4t(
Cache.Count
Cache.Hits
Cache.Misses
Cache_CheckAllCascadingInMachinePartition
Cache_Initialize
Cache_Shutdown
cache_size
Cache_Update
Cache_Update_SRJournalEntry
CacheActivation
CacheAppExtension
CacheApplication
CacheApplicationExtension
CacheApplicationUser
CacheAppUriHandler
CacheAppUriHandlerGroup
CacheDependencyGraph
CacheDynamicAppUriHandler
CacheDynamicAppUriHandlerGroup
CacheFileTypeAssociation
CacheHit
CacheHostRuntime
CacheMiss
CachePackage
CachePackageExtension
CachePackageExternalLocation
CachePackageFamily
CachePackageMachineStatus
CachePackageUser
CachePackageUserStatus
CacheProtocol
CacheSpill
CacheUsed
CacheUser
CacheWrite
callContext
CallContext:[%hs] 
CallerId
CallerProcessId
cannot start a transaction within a transaction
Category
cCZ zs
CD;FPt0
cfK#Z
changeid_next_value
changeid_next_value() failed
ChannelName
Check
CheckAllCascadingInDeploymentPartition
CheckAllCascadingInMachinePartition
Checkpoint
Checkpoint() error 0x%08X in _Checkpoint([%u]=%s)
Checkpoint: Options=0x%X, Machine:Size=%d,#=%d, Deployment:Size=%d,#=%d
CheckpointInterval
CheckpointLastPerformed
CheckpointMaxClockDelta
CheckpointMode
CheckpointOptions
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
Classes\CLSID\{AA00FB1F-4EC7-4b09-BDC1-E5D88D291440}
Clear
ClientId
CloseHandle
CloseServiceHandle
CloseThreadpoolTimer
CoCreateFreeThreadedMarshaler
CoCreateGuid
CoCreateInstance
CoDisconnectContext
CoGetCallContext
CoImpersonateClient
combase.dll
CommandLine
COMMIT /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
CompanyName
CompareStringOrdinal
compress
Compress(x[,level]) error: Invalid level (%d)
Compress(x[,level]) error: Invalid type for level (%d)
ConnectedSet
ConnectedSetPackageFamily
ConnectedSetPackageFamilyStatics::ActivateInstance
ConnectedSetPackageFamilyStatics::Add
ConnectedSetPackageFamilyStatics::ctor
ConnectedSetPackageFamilyStatics::Delete
ConnectedSetPackageFamilyStatics::DeleteByConnectedSetAndPackageFamily
ConnectedSetPackageFamilyStatics::dtor
ConnectedSetPackageFamilyStatics::Exists
ConnectedSetPackageFamilyStatics::ExistsByConnectedSet
ConnectedSetPackageFamilyStatics::ExistsByConnectedSetAndPackageFamily
ConnectedSetPackageFamilyStatics::Find
ConnectedSetPackageFamilyStatics::FindByConnectedSet
ConnectedSetPackageFamilyStatics::TryGet
ConnectedSetPackageFamilyStatics::TryGetByConnectedSetAndPackageFamily
ConnectedSetPackageFamilyStatics::Update
ConnectedSetStatics::ActivateInstance
ConnectedSetStatics::Add
ConnectedSetStatics::ctor
ConnectedSetStatics::Delete
ConnectedSetStatics::DeleteByName
ConnectedSetStatics::dtor
ConnectedSetStatics::Exists
ConnectedSetStatics::ExistsByName
ConnectedSetStatics::Find
ConnectedSetStatics::TryGet
ConnectedSetStatics::TryGetByName
ConnectedSetStatics::Update
ContentGroup
ContentGroupFile
ContentGroupFileStatics::ActivateInstance
ContentGroupFileStatics::ctor
ContentGroupFileStatics::dtor
ContentGroupFileStatics::Exists
ContentGroupFileStatics::ExistsByContentGroup
ContentGroupFileStatics::ExistsByContentGroupAndFile
ContentGroupFileStatics::Find
ContentGroupFileStatics::FindByContentGroup
ContentGroupFileStatics::Get
ContentGroupFileStatics::GetByContentGroupAndFile
ContentGroupFileStatics::TryGet
ContentGroupFileStatics::TryGetByContentGroupAndFile
ContentGroupStatics::ActivateInstance
ContentGroupStatics::ctor
ContentGroupStatics::dtor
ContentGroupStatics::Exists
ContentGroupStatics::ExistsByPackage
ContentGroupStatics::ExistsByPackageAndIndex
ContentGroupStatics::ExistsByPackageAndName
ContentGroupStatics::Find
ContentGroupStatics::FindByPackage
ContentGroupStatics::Get
ContentGroupStatics::GetByPackageAndIndex
ContentGroupStatics::GetByPackageAndName
ContentGroupStatics::TryGet
ContentGroupStatics::TryGetByPackageAndIndex
ContentGroupStatics::TryGetByPackageAndName
Context
Context=%p Id=%ls
Context=%p Id=%ls Id.found=%ls
ControlService
ConvertSidToStringSidW
ConvertStringSecurityDescriptorToSecurityDescriptorW
ConvertStringSidToSidW
CopyFileW
CopySid
CoRegisterClassObject
CoResumeClassObjects
CoRevertToSelf
CoRevokeClassObject
CortanaListenUIApp_1.1.0.0_neutral_neutral_cw5n1h2txyewy
CoTaskMemAlloc
CoTaskMemFree
CouldMultiUserAppsBehaviorBePossibleForPackage
Count
CountOfErrorsCorrected
CountOfErrorsDetected
cPackageStatics::GetByUserAndApplicationUserModelId
Cpt Q
Cpu:%d%s Mem:%d%s Io:%d%s
CpuPriority
Create
CreateDatabase_Deployment
CreateDatabase_Machine
CreatedSchemaVersion
CreateEventW
CreateFileW
CreateFlags
CreateMutexExW
CreateRepository
CreateSemaphoreExW
CreateSetting: Subkey=%ls
CreateThreadpoolTimer
CreateWellKnownSid
CRIM,
Critical
currentContextId
currentContextMessage
currentContextName
CurrentDirectoryPath
CustomInstallWork
CustomInstallWorkStatics::ActivateInstance
CustomInstallWorkStatics::Add
CustomInstallWorkStatics::ClearWorkByWorkId
CustomInstallWorkStatics::ctor
CustomInstallWorkStatics::Delete
CustomInstallWorkStatics::DeleteByUserAndPackageAndIndex
CustomInstallWorkStatics::DeleteByUserAndPackageAndName
CustomInstallWorkStatics::DeleteByWorkId
CustomInstallWorkStatics::dtor
CustomInstallWorkStatics::Exists
CustomInstallWorkStatics::ExistsByUser
CustomInstallWorkStatics::ExistsByUserAndPackage
CustomInstallWorkStatics::ExistsByUserAndPackageAndIndex
CustomInstallWorkStatics::ExistsByUserAndPackageAndName
CustomInstallWorkStatics::Find
CustomInstallWorkStatics::FindByUser
CustomInstallWorkStatics::FindByUserAndPackage
CustomInstallWorkStatics::FindByUserAndPackageAnd_WorkId
CustomInstallWorkStatics::TryGet
CustomInstallWorkStatics::TryGetByUserAndPackageAndIndex
CustomInstallWorkStatics::TryGetByUserAndPackageAndName
CustomInstallWorkStatics::Update
CustomInstallWorkStatics::UpdateWorkId
D$  A
D$ $x
D$ @/
D$ \=
D$ \c
D$ +D$$
D$ 0X
D$ di
D$ Dj
D$ Pj
D$ PQ
D$ PQQ
D$ PS
D$ PV
D$ PW
D$ QP
D$ VP
D$ XP
D$$ e
D$$ R
D$$(d
D$$0F
D$$0g
D$$9D$
D$$h4R
D$$hv
D$$L#
D$$Ph
D$$Pj
D$$PS
D$$x?
D$$Xe
D$( H
D$( x
D$(!\$$
D$(@9
D$(\"
D$(`G
D$(0p
D$(8[
D$(8R
D$(Hc
D$(pb
D$(Pj
D$(PQ
D$(PS
D$(PV
D$(SP
D$(VP
D$(WP
D$(XA
D$, k
D$,0O
D$,PF
D$,Pj
D$,pK
D$,PV
D$@Pj
D$@PQ
D$@PS
D$@PWh
D$@PWh(
D$@SP
D$@SVW
D$@WP
D$`F;
D$`Pj
D$`QP
D$<h4R
D$<Pj
D$<Xl
D$0 J
D$0$A
D$0`|
D$0|C
D$087
D$08H
D$0d;
D$0DC
D$0dk
D$0Do
D$0h>
D$0Hn
D$0lj
D$0p<
D$0Pj
D$0PN
D$0PQ
D$0PS
D$0PV
D$0SP
D$0VP
D$0WP
D$0X?
D$0xE
D$0Xw
D$4`h
D$40;
D$4f9
D$4Pj
D$4Pj*h
D$4PQQW
D$8,=
D$8@r
D$8d_
D$8lr
D$8Pj
D$8PQ
D$8PS
D$8SP
D$8u=
D$8WP
D$D 5
D$D9D$
D$d9D$
D$djdY
D$DPj
D$DPQQ
D$h9D$
D$hF;
D$hjdY
D$hPj
D$HPj
D$hPj
D$HPj
D$hPj
D$HPj
D$hPj
D$HPj
D$HSP
D$HSV
D$HWP
D$lf9
D$ljdY
D$lPQQ
D$LPQQ
D$P9D$
D$PF;
D$pF;
D$PG;
D$pPj
D$PPj
D$pPj
D$PQP
D$PSPj
D$pSVWj83
D$pWP
D$T9D$
D$tPQQ
D$TSP
D$XC;
D$xPj
D$XPQQ
d%e' P
D%Yhk:
D:(A;;0x1F;;;WD)(A;;0x1F;;;AC)(A;;0x1F;;;S-1-15-3-1024-1502825166-1963708345-2616377461-2562897074-4192028372-3968301570-1997628692-1435953622)S:(ML;;NX;;;LW)
D:(A;;GA;;;WD)
data error
Database
Database.Checkpoint
DatabaseCache.Add
DatabaseCache.Get
DatabaseCache.Lifespan
DatabaseConnection
DatabaseCorruption.Detected
DatabaseCorruptionFirstDetectedUptime
DatabaseCorruptionFirstDetectedWhen
DatabaseCorruptionLastReported
DatabasePtr
DatabasesCount
DatabaseStatisticsUpdateInterval
DatabaseStatisticsUpdateMaintenanceTaskInterval
DatabaseStatisticsUpdateMaxClockDelta
DbzCP
DebugBreak
DecodePointer
DefaultTile
DefaultTileStatics::ActivateInstance
DefaultTileStatics::ctor
DefaultTileStatics::dtor
DefaultTileStatics::Exists
DefaultTileStatics::ExistsByApplication
DefaultTileStatics::Find
DefaultTileStatics::Get
DefaultTileStatics::GetByApplication
DefaultTileStatics::TryGet
DefaultTileStatics::TryGetByApplication
DelayLoadFailureHook
Delete
DELETE
Delete
DELETE FROM %s WHERE _WorkId=0;
DELETE FROM %s WHERE _WorkId>0 AND _WorkId<>0;
DELETE FROM %s WHERE WhenOccurred<=? AND _WorkId=0;
DELETE FROM Activation WHERE (_ActivationID NOT IN (SELECT Activation FROM Application)) AND (_ActivationID NOT IN (SELECT Activation FROM ApplicationExtension)) AND (_ActivationID NOT IN (SELECT Activation FROM PackageExtension));
DELETE FROM AppExecutionAlias WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppExecutionAliasUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM AppExecutionAliasUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM AppExecutionAliasUser WHERE _AppExecutionAliasUserID=?;
DELETE FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=? AND Alias=?;
DELETE FROM AppExtension WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppExtensionHost WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppInstaller WHERE (PackageFamily = 0) AND (_AppInstallerID NOT IN (SELECT AppInstaller FROM AppInstallerUri)) AND (_AppInstallerID NOT IN (SELECT AppInstaller FROM AutoUpdatePackage)) AND (_AppInstallerID NOT IN (SELECT AppInstaller FROM PackageAppInstaller));
DELETE FROM AppInstaller WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM AppInstallerUri WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
DELETE FROM Application WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM Application WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM ApplicationBackgroundTask WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM ApplicationContentUriRule WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM ApplicationExtension WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationIdentity WHERE (ApplicationUserModelId NOT IN (SELECT ApplicationUserModelId FROM Application)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM AppExecutionAliasUser)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM ApplicationUser)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM PrimaryTileUser)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SRJournal)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SRJournalArchive)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SecondaryTileUser));
DELETE FROM ApplicationProperty WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationUser WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM ApplicationUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM ApplicationUser WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
DELETE FROM ApplicationUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM ApplicationUser;
DELETE FROM AppService WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppUriHandler WHERE (AppUriHandlerGroup>0) AND (AppUriHandlerGroup NOT IN (SELECT _AppUriHandlerGroupID FROM AppUriHandlerGroup));
DELETE FROM AppUriHandler WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppUriHandlerGroup WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppxExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM AppxExtension WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM AppxManifest WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM AutoUpdatePackage WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
DELETE FROM AutoUpdatePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM Bundle WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM BundlePackage WHERE (Bundle>0) AND (Bundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM BundleResource WHERE (BundlePackage>0) AND (BundlePackage NOT IN (SELECT _BundlePackageID FROM BundlePackage));
DELETE FROM ConnectedSet WHERE _ConnectedSetID=?;
DELETE FROM ConnectedSet WHERE Name=?;
DELETE FROM ConnectedSetPackageFamily WHERE (ConnectedSet>0) AND (ConnectedSet NOT IN (SELECT _ConnectedSetID FROM ConnectedSet));
DELETE FROM ConnectedSetPackageFamily WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM ConnectedSetPackageFamily WHERE _ConnectedSetPackageFamilyID=?;
DELETE FROM ConnectedSetPackageFamily WHERE ConnectedSet=? AND PackageFamily=?;
DELETE FROM ContentGroup WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM ContentGroupFile WHERE (ContentGroup>0) AND (ContentGroup NOT IN (SELECT _ContentGroupID FROM ContentGroup));
DELETE FROM ContentGroupFile WHERE (File>0) AND (File NOT IN (SELECT _FileID FROM File));
DELETE FROM CustomInstallWork WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM CustomInstallWork WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND _WorkId=0;
DELETE FROM CustomInstallWork WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND _WorkId=0;
DELETE FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND _WorkId=0;
DELETE FROM DefaultTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM Dependency WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DeploymentHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM DeploymentHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DeploymentHistory WHERE WhenOccurred<=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM DeploymentHistory WHERE WhenOccurred<=? AND _WorkId=0;
DELETE FROM DynamicAppUriHandler WHERE (DynamicAppUriHandlerGroup>0) AND (DynamicAppUriHandlerGroup NOT IN (SELECT _DynamicAppUriHandlerGroupID FROM DynamicAppUriHandlerGroup));
DELETE FROM DynamicAppUriHandler WHERE _DynamicAppUriHandlerID=?;
DELETE FROM DynamicAppUriHandler WHERE ProgID IS ? AND DynamicAppUriHandlerGroup=?;
DELETE FROM DynamicAppUriHandlerGroup WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM DynamicAppUriHandlerGroup WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DynamicAppUriHandlerGroup WHERE _DynamicAppUriHandlerGroupID=?;
DELETE FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=? AND Name=?;
DELETE FROM EndOfLifePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM Enterprise WHERE (_EnterpriseID NOT IN (SELECT Enterprise FROM Package));
DELETE FROM File WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM FileTypeAssociation WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM HostRuntime WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
DELETE FROM MrtApplication WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM MrtDefaultTile WHERE (DefaultTile>0) AND (DefaultTile NOT IN (SELECT _DefaultTileID FROM DefaultTile));
DELETE FROM MrtPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtSharedPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtUserPri WHERE (MrtSharedPri>0) AND (MrtSharedPri NOT IN (SELECT _MrtSharedPriID FROM MrtSharedPri));
DELETE FROM MrtUserPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtUserPri WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM NamedDependency WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM OptionalBundle WHERE (MainBundle>0) AND (MainBundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM OptionalBundlePackage WHERE (OptionalBundle>0) AND (OptionalBundle NOT IN (SELECT _OptionalBundleID FROM OptionalBundle));
DELETE FROM OptionalBundleResource WHERE (OptionalBundlePackage>0) AND (OptionalBundlePackage NOT IN (SELECT _OptionalBundlePackageID FROM OptionalBundlePackage));
DELETE FROM Package WHERE (Enterprise>0) AND (Enterprise NOT IN (SELECT _EnterpriseID FROM Enterprise));
DELETE FROM Package WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM Package WHERE (SourceBundle>0) AND (SourceBundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM Package WHERE (TargetDeviceFamily>0) AND (TargetDeviceFamily NOT IN (SELECT _TargetDeviceFamilyID FROM TargetDeviceFamily));
DELETE FROM Package WHERE _PackageID IN (SELECT p_PackageID FROM (SELECT p_PackageID, EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Package AS p ON bp.Version=p.Version AND bp.Architecture=p.Architecture AND ((bp.ResourceId=p.ResourceId) OR (bp.ResourceId IS NULL AND p.ResourceId IS NULL)) WHERE bp.PackageType=0 AND bp.Bundle=p_SourceBundle AND p.PackageFamily=p_PackageFamily AND bp._WorkId=0 AND p._WorkId=0 LIMIT 1) AS hasPackages FROM (SELECT p._PackageID AS p_PackageID, p.PackageFamily AS p_PackageFamily, p.SourceBundle AS p_SourceBundle FROM Package AS p WHERE p.PackageType & 8 != 0 AND p.SourceBundle <> 0 AND p._WorkId=0)) WHERE hasPackages=0);
DELETE FROM PackageAppInstaller WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
DELETE FROM PackageAppInstaller WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageDependency WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageDependency WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageDependency WHERE _PackageDependencyID=?;
DELETE FROM PackageDependency WHERE PackageDependencyId=?;
DELETE FROM PackageExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM PackageExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageExternalLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageExternalLocation WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageFamily WHERE (_PackageFamilyID NOT IN (SELECT PackageFamily FROM AppInstaller)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM AutoUpdatePackage)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM ConnectedSetPackageFamily)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM DynamicAppUriHandlerGroup)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM EndOfLifePackage)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM Package)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageDependency)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageFamilyPolicy)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageFamilyUser)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageIdentity)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM ProvisionedPackageExclude)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM SRJournal)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM SRJournalArchive));
DELETE FROM PackageFamilyPolicy WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageFamilyPolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND _WorkId=0;
DELETE FROM PackageFamilyPolicy WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0;
DELETE FROM PackageFamilyUser WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageFamilyUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageFamilyUserResource WHERE (PackageFamilyUser>0) AND (PackageFamilyUser NOT IN (SELECT _PackageFamilyUserID FROM PackageFamilyUser));
DELETE FROM PackageFamilyUserResource WHERE _PackageFamilyUserResourceID=?;
DELETE FROM PackageIdentity WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageIdentity WHERE (PackageFullName NOT IN (SELECT PackageFullName FROM Package)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM DeploymentHistory)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageMachineStatus)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageSuperceded)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageUserStatus)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM ProvisionedPackage)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM ProvisionedPackageDeleted)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM SRHistory)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM SRJournal)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM SRJournalArchive));
DELETE FROM PackageLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageLocation WHERE Package IN (SELECT Package FROM PackageLocation WHERE _WorkId<0 AND _WorkId<>0) AND _WorkId=0;
DELETE FROM PackageMachineStatus AS pmsINNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pms.PackageIdentityWHERE pi.PackageFullName=?;
DELETE FROM PackageMachineStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackagePolicy WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackagePolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackagePolicy WHERE _PackagePolicyID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackagePolicy WHERE _PackagePolicyID=? AND _WorkId=0;
DELETE FROM PackagePolicy WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND _WorkId=0;
DELETE FROM PackageProperty WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageSourceUri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageSuperceded WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackageSuperceded WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageUser WHERE _PackageUserID IN (SELECT _PackageUserID FROM PackageUser INNER JOIN (SELECT User AS U, Package AS P FROM PackageUser WHERE _WorkId<0 AND _WorkId<>0) WHERE _WorkId=0 AND User=U AND Package=P);
DELETE FROM PackageUserStatus as pus WHERE pus.PackageIdentity NOT IN ( SELECT _PackageIdentityID FROM PackageIdentity AS pi INNER JOIN Package AS p ON pi.PackageFullName=p.PackageFullName);
DELETE FROM PackageUserStatus AS pus WHERE User IN ( SELECT _UserID FROM User WHERE UserSid=?) AND PackageIdentity IN (SELECT _PackageIdentityID FROM PackageIdentity WHERE PackageFullName=?);
DELETE FROM PackageUserStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackageUserStatus WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PrimaryTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM PrimaryTile WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PrimaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM PrimaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserId IN (SELECT _PrimaryTileUserId FROM PrimaryTileUser INNER JOIN (SELECT ApplicationIdentity AS ai, User AS usr FROM PrimaryTileUser WHERE _WorkId<0 AND _WorkId<>0 ) WHERE _WorkId=0 AND ApplicationIdentity=ai AND User=usr);
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM PrimaryTileUser WHERE TileUniqueId IN (SELECT TileUniqueId FROM PrimaryTileUser WHERE _WorkId<0 AND _WorkId<>0) AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUser WHERE User=? AND TileUniqueId=? AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PrimaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUserChangelog WHERE _Created=? AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0;
DELETE FROM Protocol WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM ProvisionedPackage WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM ProvisionedPackageDeleted WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM ProvisionedPackageExclude WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM ProvisionedPackageExclude WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PublisherCacheFolder WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
DELETE FROM Resource WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM SecondaryTile WHERE _SecondaryTileID IN (SELECT SecondaryTile FROM SecondaryTileUser WHERE _WorkId=0 AND TileUniqueId IN (SELECT TileUniqueId FROM SecondaryTileUser WHERE _WorkId<0 AND _WorkId<>0)) AND _WorkId=0;
DELETE FROM SecondaryTile WHERE _SecondaryTileID IN (SELECT SecondaryTile FROM SecondaryTileUser WHERE TileUniqueId=?1 AND (_WorkId=0 OR _WorkId=?2)) AND (_WorkId=0 OR _WorkId=?2);
DELETE FROM SecondaryTile WHERE _SecondaryTileID IN (SELECT SecondaryTile FROM SecondaryTileUser WHERE TileUniqueId=?1 AND _WorkId=0) AND _WorkId=0;
DELETE FROM SecondaryTile WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTile WHERE _SecondaryTileID=? AND _WorkId=0;
DELETE FROM SecondaryTile WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM SecondaryTile WHERE SecondaryTile._SecondaryTileID NOT IN (SELECT SecondaryTile FROM SecondaryTileUser);
DELETE FROM SecondaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SecondaryTileUser WHERE (SecondaryTile>0) AND (SecondaryTile NOT IN (SELECT _SecondaryTileID FROM SecondaryTile));
DELETE FROM SecondaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM SecondaryTileUser WHERE TileUniqueId IN (SELECT TileUniqueId FROM SecondaryTileUser WHERE _WorkId<0 AND _WorkId<>0) AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE TileUniqueId=? AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE User=? AND TileUniqueId=? AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SecondaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUserChangelog WHERE _Created=? AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0;
DELETE FROM SharedPackageContainer WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SharedPackageContainerPackageFamily WHERE (SharedPackageContainer>0) AND (SharedPackageContainer NOT IN (SELECT _SharedPackageContainerID FROM SharedPackageContainer));
DELETE FROM Source.Bundle WHERE _BundleID IN ( SELECT b._BundleId FROM Source.Bundle AS b WHERE b.Package NOT IN (SELECT p._PackageID FROM Source.Package AS p) UNION SELECT b._BundleID FROM Source.Bundle AS b INNER JOIN Source.Package AS p ON p._PackageID=b.Package WHERE p.SourceBundle<>b._BundleID);
DELETE FROM SRHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM SRHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SRHistory WHERE WhenOccurred<=?;
DELETE FROM SRJournal WHERE (_WorkId=0 OR _WorkId=?);
DELETE FROM SRJournal WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM SRJournal WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SRJournal WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM SRJournal WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM SRJournal WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM SRJournal WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
DELETE FROM SRJournal WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SRJournal WHERE _WorkId=0;
DELETE FROM SRJournal;
DELETE FROM SRJournalArchive WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM SRJournalArchive WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SRJournalArchive WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM SRJournalArchive WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM SRJournalArchive WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM SRJournalArchive WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
DELETE FROM SRJournalArchive WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SRJournalArchive WHERE WhenOccurred<=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SRJournalArchive WHERE WhenOccurred<=? AND _WorkId=0;
DELETE FROM TargetDeviceFamily WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM User WHERE (_UserID NOT IN (SELECT User FROM AppExecutionAliasUser)) AND (_UserID NOT IN (SELECT User FROM ApplicationUser)) AND (_UserID NOT IN (SELECT User FROM AppxExtension)) AND (_UserID NOT IN (SELECT User FROM CustomInstallWork)) AND (_UserID NOT IN (SELECT User FROM DependencyGraph)) AND (_UserID NOT IN (SELECT User FROM DeploymentHistory)) AND (_UserID NOT IN (SELECT User FROM DynamicAppUriHandlerGroup)) AND (_UserID NOT IN (SELECT User FROM MrtUserPri)) AND (_UserID NOT IN (SELECT User FROM PackageDependency)) AND (_UserID NOT IN (SELECT User FROM PackageExternalLocation)) AND (_UserID NOT IN (SELECT User FROM PackageFamilyPolicy)) AND (_UserID NOT IN (SELECT User FROM PackageFamilyUser)) AND (_UserID NOT IN (SELECT User FROM PackagePolicy)) AND (_UserID NOT IN (SELECT User FROM PackageSuperceded)) AND (_UserID NOT IN (SELECT User FROM PackageUser)) AND (_UserID NOT IN (SELECT User FROM PackageUserStatus)) AND (_UserID NOT IN (SELECT User FROM PrimaryTileUser)) AND (_UserID NOT IN (SELECT User FROM PrimaryTileUserChangelog)) AND (_UserID NOT IN (SELECT User FROM ProvisionedPackageExclude)) AND (_UserID NOT IN (SELECT User FROM SRHistory)) AND (_UserID NOT IN (SELECT User FROM SRJournal)) AND (_UserID NOT IN (SELECT User FROM SRJournalArchive)) AND (_UserID NOT IN (SELECT User FROM SecondaryTileUser)) AND (_UserID NOT IN (SELECT User FROM SecondaryTileUserChangelog)) AND (_UserID NOT IN (SELECT User FROM SharedPackageContainer)) AND (_UserID NOT IN (SELECT User FROM WowDependencyGraph));
DELETE FROM WowDependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM WowDependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM WowDependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM XboxPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM XboxPackage WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM XboxPackage WHERE _XboxPackageID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM XboxPackage WHERE _XboxPackageID=? AND _WorkId=0;
DELETE FROM XboxPackage WHERE EditionId IN (SELECT EditionId FROM XboxPackage WHERE _WorkId<0 AND _WorkId<>0) AND _WorkId=0;
DELETE FROM XboxPackage WHERE EditionId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM XboxPackage WHERE EditionId=? AND _WorkId=0;
DeleteCriticalSection
Deleted
DeleteFileW
DeleteSetting: Name=%ls
Dependency
DependencyGraph
DependencyGraph\Data
DependencyGraph\Data\
DependencyGraph\Index
DependencyGraph\Index\UserAndDependentPackageAndDependencyType
DependencyGraphStatics::ActivateInstance
DependencyGraphStatics::ctor
DependencyGraphStatics::dtor
DependencyGraphStatics::Exists
DependencyGraphStatics::ExistsByDependencyType
DependencyGraphStatics::ExistsBySupplierPackage
DependencyGraphStatics::ExistsByUser
DependencyGraphStatics::ExistsByUserAndDependentPackage
DependencyGraphStatics::ExistsByUserAndDependentPackageAndDependencyType
DependencyGraphStatics::ExistsByUserAndDependentPackageAndDependencyTypeAnd_DependencyGraphID
DependencyGraphStatics::ExistsByUserAndDependentPackageAndHasExternalLocation
DependencyGraphStatics::ExistsByUserAndDependentPackageAndIndex
DependencyGraphStatics::ExistsByUserAndDependentPackageAndSupplierPackage
DependencyGraphStatics::ExistsByUserAndDependentPackageAndSupplierPackageFamilyName
DependencyGraphStatics::ExistsByUserAndDependentPackageFullNameAndHasExternalLocation
DependencyGraphStatics::ExistsByUserAndSupplierPackage
DependencyGraphStatics::Find
DependencyGraphStatics::FindByDependencyType
DependencyGraphStatics::FindBySupplierPackage
DependencyGraphStatics::FindByUser
DependencyGraphStatics::FindByUserAndDependentPackage
DependencyGraphStatics::FindByUserAndDependentPackage_SortedByIndex
DependencyGraphStatics::FindByUserAndDependentPackageAndDependencyType
DependencyGraphStatics::FindByUserAndDependentPackageAndDependencyTypeAnd_DependencyGraphID
DependencyGraphStatics::FindByUserAndDependentPackageAndIndex
DependencyGraphStatics::FindByUserAndSupplierPackage
DependencyGraphStatics::FindByUserAndSupplierPackageAndDependencyType
DependencyGraphStatics::Get
DependencyGraphStatics::GetByUserAndDependentPackageAndSupplierPackage
DependencyGraphStatics::GetMainPackageDependencyByUserAndSupplierPackage
DependencyGraphStatics::TryGet
DependencyGraphStatics::TryGetByUserAndDependentPackageAndSupplierPackage
DependencyType
DependentPackage
Deployment
DeploymentDatabase
DeploymentDatabase_Pages
DeploymentDatabase_PagesCheckpointed
DeploymentDatabaseAutoCheckpoint
DeploymentDatabaseCacheSize
DeploymentDatabaseCheckpointThreshold
DeploymentDatabaseFileChunkSize
DeploymentDatabaseJournalSizeLimit
DeploymentDatabaseOptions
DeploymentDatabasePageSize
DeploymentDatabaseSize_After
DeploymentDatabaseSize_Before
DeploymentDatabaseStatisticsLastUpdated
DeploymentDisposition
DeploymentHistory
DeploymentHistoryStatics::ActivateInstance
DeploymentHistoryStatics::ctor
DeploymentHistoryStatics::dtor
DeploymentHistoryStatics::Exists
DeploymentHistoryStatics::ExistsByPackageIdentity
DeploymentHistoryStatics::ExistsByUser
DeploymentHistoryStatics::ExistsByWhenOccurred
DeploymentHistoryStatics::Find
DeploymentHistoryStatics::FindByPackageIdentity
DeploymentHistoryStatics::FindByUser
DeploymentHistoryStatics::FindByWhenOccurred
DeploymentHistoryStatics::Get
DeploymentHistoryStatics::TryGet
DeploymentJournalSize_After
DeploymentJournalSize_Before
DeploymentSize_After
DeploymentSize_Before
Description
DETACH DATABASE '%s';
DisplayName
Disposition
DoMaintenance
DoRepair
DownlevelMachineDatabase
DownlevelMachineDatabaseAutoCheckpoint
DownlevelMachineDatabaseCacheSize
DownlevelMachineDatabaseCheckpointThreshold
DownlevelMachineDatabaseFileChunkSize
DownlevelMachineDatabaseJournalSizeLimit
DownlevelMachineDatabaseOptions
DownlevelMachineDatabasePageSize
DownlevelMachineDatabaseStatisticsLastUpdated
DROP INDEX IF EXISTS IDX_Activation_ActivationKey;CREATE UNIQUE INDEX IDX_Activation_ActivationKey ON Activation(ActivationKey) WHERE ActivationKey IS NOT NULL;DROP TRIGGER IF EXISTS TRG_IDX_Activation_ActivationKey;CREATE TRIGGER TRG_IDX_Activation_ActivationKey BEFORE INSERT ON Activation FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _ActivationID FROM Activation WHERE ActivationKey IS NEW.ActivationKey AND ActivationKey IS NOT NULL) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "Activation" violates the unique index "IDX_Activation_ActivationKey"')END;END;DROP INDEX IF EXISTS IDX_Activation_Flags_Executable_Entrypoint_RuntimeType_StartPage_ResourceGroup;CREATE UNIQUE INDEX IDX_Activation_Flags_Executable_Entrypoint_RuntimeType_StartPage_ResourceGroup ON Activation(Flags, IFNULL(HostId, ''), IFNULL(Executable, ''), IFNULL(Entrypoint, ''), IFNULL(RuntimeType, ''), IFNULL(StartPage, ''), IFNULL(ResourceGroup, ''));DROP INDEX IF EXISTS IDX_AppExecutionAlias_Alias_Extension;CREATE UNIQUE INDEX IDX_AppExecutionAlias_Alias_Extension ON AppExecutionAlias(Alias, Extension);DROP INDEX IF EXISTS IDX_AppExecutionAlias_Extension;CREATE INDEX IDX_AppExecutionAlias_Extension ON AppExecutionAlias(Extension);DROP INDEX IF EXISTS IDX_AppExecutionAlias__WorkId;CREATE INDEX IDX_AppExecutionAlias__WorkId ON AppExecutionAlias(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppExecutionAliasUser_ApplicationIdentity_User_Alias;CREATE UNIQUE INDEX IDX_AppExecutionAliasUser_ApplicationIdentity_User_Alias ON AppExecutionAliasUser(ApplicationIdentity, User, Alias);DROP INDEX IF EXISTS IDX_AppExecutionAliasUser_User;CREATE INDEX IDX_AppExecutionAliasUser_User ON AppExecutionAliasUser(User);DROP INDEX IF EXISTS IDX_AppExtension_Extension_Name;CREATE UNIQUE INDEX IDX_AppExtension_Extension_Name ON AppExtension(Extension, Name);DROP INDEX IF EXISTS IDX_AppExtension_Name;CREATE INDEX IDX_AppExtension_Name ON AppExtension(Name);DROP INDEX IF EXISTS IDX_AppExtension__WorkId;CREATE INDEX IDX_AppExtension__WorkId ON AppExtension(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppExtensionHost_Extension_Name;CREATE UNIQUE INDEX IDX_AppExtensionHost_Extension_Name ON AppExtensionHost(Extension, Name);DROP INDEX IF EXISTS IDX_AppExtensionHost__WorkId;CREATE INDEX IDX_AppExtensionHost__WorkId ON AppExtensionHost(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppService_Extension_Index;CREATE UNIQUE INDEX IDX_AppService_Extension_Index ON AppService(Extension, "Index");DROP INDEX IF EXISTS IDX_AppService_Name_Extension;CREATE UNIQUE INDEX IDX_AppService_Name_Extension ON AppService(Name, Extension);DROP INDEX IF EXISTS IDX_AppService__WorkId;CREATE INDEX IDX_AppService__WorkId ON AppService(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppUriHandler_ProgID_Extension;CREATE UNIQUE INDEX IDX_AppUriHandler_ProgID_Extension ON AppUriHandler(ProgID, Extension);DROP TRIGGER IF EXISTS TRG_IDX_AppUriHandler_ProgID_Extension;CREATE TRIGGER TRG_IDX_AppUriHandler_ProgID_Extension BEFORE INSERT ON AppUriHandler FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _AppUriHandlerID FROM AppUriHandler WHERE ProgID IS NEW.ProgID AND Extension=NEW.Extension) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "AppUriHandler" violates the unique index "IDX_AppUriHandler_ProgID_Extension"')END;END;DROP INDEX IF EXISTS IDX_AppUriHandler_HostName_Extension;CREATE INDEX IDX_AppUriHandler_HostName_Extension ON AppUriHandler(HostName, Extension);DROP INDEX IF EXISTS IDX_AppUriHandler_Extension;CREATE INDEX IDX_AppUriHandler_Extension ON AppUriHandler(Extension);DROP INDEX IF EXISTS IDX_AppUriHandler__WorkId_Extension;CREATE INDEX IDX_AppUriHandler__WorkId_Extension ON AppUriHandler(_WorkId, Extension);DROP INDEX IF EXISTS IDX_AppUriHandler__WorkId;CREATE INDEX IDX_AppUriHandler__WorkId ON AppUriHandler(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppUriHandlerGroup_Name_Extension;CREATE UNIQUE INDEX IDX_AppUriHandlerGroup_Name_Extension ON AppUriHandlerGroup(Name, Extension);DROP INDEX IF EXISTS IDX_AppUriHandlerGroup_Extension;CREATE INDEX IDX_AppUriHandlerGroup_Extension ON AppUriHandlerGroup(Extension);DROP INDEX IF EXISTS IDX_AppUriHandlerGroup__WorkId;CREATE INDEX IDX_AppUriHandlerGroup__WorkId ON AppUriHandlerGroup(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Application_Package_PackageRelativeApplicationId;CREATE UNIQUE INDEX IDX_Application_Package_PackageRelativeApplicationId ON Application(Package, PackageRelativeApplicationId);DROP INDEX IF EXISTS IDX_Application_ApplicationUserModelId;CREATE INDEX IDX_Application_ApplicationUserModelId ON Application(ApplicationUserModelId);DROP INDEX IF EXISTS IDX_Application_EditionId;CREATE INDEX IDX_Application_EditionId ON Application(EditionId);DROP INDEX IF EXISTS IDX_Application__WorkId;CREATE INDEX IDX_Application__WorkId ON Application(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationBackgroundTask_Extension_Index;CREATE UNIQUE INDEX IDX_ApplicationBackgroundTask_Extension_Index ON ApplicationBackgroundTask(Extension, "Index");DROP INDEX IF EXISTS IDX_ApplicationBackgroundTask_Type_Extension;CREATE UNIQUE INDEX IDX_ApplicationBackgroundTask_Type_Extension ON ApplicationBackgroundTask(Type, Extension);DROP INDEX IF EXISTS IDX_ApplicationBackgroundTask__WorkId;CREATE INDEX IDX_ApplicationBackgroundTask__WorkId ON ApplicationBackgroundTask(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationContentUriRule_Application_Index;CREATE UNIQUE INDEX IDX_ApplicationContentUriRule_Application_Index ON ApplicationContentUriRule(Application, "Index");DROP INDEX IF EXISTS IDX_ApplicationContentUriRule__WorkId;CREATE INDEX IDX_ApplicationContentUriRule__WorkId ON ApplicationContentUriRule(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationExtension_Application_Index;CREATE UNIQUE INDEX IDX_ApplicationExtension_Application_Index ON ApplicationExtension(Application, "Index");DROP INDEX IF EXISTS IDX_ApplicationExtension_Application_Category;CREATE INDEX IDX_ApplicationExtension_Application_Category ON ApplicationExtension(Application, Category);DROP INDEX IF EXISTS IDX_ApplicationExtension_Category;CREATE INDEX IDX_ApplicationExtension_Category ON ApplicationExtension(Category);DROP INDEX IF EXISTS IDX_ApplicationExtension__WorkId;CREATE INDEX IDX_ApplicationExtension__WorkId ON ApplicationExtension(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationIdentity_ApplicationUserModelId;CREATE UNIQUE INDEX IDX_ApplicationIdentity_ApplicationUserModelId ON ApplicationIdentity(ApplicationUserModelId);DROP INDEX IF EXISTS IDX_ApplicationProperty_Application_Index;CREATE UNIQUE INDEX IDX_ApplicationProperty_Application_Index ON ApplicationProperty(Application, "Index");DROP INDEX IF EXISTS IDX_ApplicationProperty_Application_Name;CREATE INDEX IDX_ApplicationProperty_Application_Name ON ApplicationProperty(Application, Name);DROP INDEX IF EXISTS IDX_ApplicationProperty_Name;CREATE INDEX IDX_ApplicationProperty_Name ON ApplicationProperty(Name);DROP INDEX IF EXISTS IDX_ApplicationProperty__WorkId;CREATE INDEX IDX_ApplicationProperty__WorkId ON ApplicationProperty(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationUser_User_Application__WorkId;CREATE UNIQUE INDEX IDX_ApplicationUser_User_Application__WorkId ON ApplicationUser(User, Application, _WorkId);DROP INDEX IF EXISTS IDX_ApplicationUser_PackageUser_Application__WorkId;CREATE UNIQUE INDEX IDX_ApplicationUser_PackageUser_Application__WorkId ON ApplicationUser(PackageUser, Application, _WorkId);DROP INDEX IF EXISTS IDX_ApplicationUser_ApplicationIdentity;CREATE INDEX IDX_ApplicationUser_ApplicationIdentity ON ApplicationUser(ApplicationIdentity);DROP INDEX IF EXISTS IDX_ApplicationUser_Application;CREATE INDEX IDX_ApplicationUser_Application ON ApplicationUser(Application);DROP INDEX IF EXISTS IDX_ApplicationUser_Package;CREATE INDEX IDX_ApplicationUser_Package ON ApplicationUser(Package);DROP INDEX IF EXISTS IDX_ApplicationUser__WorkId;CREATE INDEX IDX_ApplicationUser__WorkId ON ApplicationUser(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation;CREATE UNIQUE INDEX IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation ON AppxExtension(User, Package, Category, KeyString, RegistrationInformation);DROP TRIGGER IF EXISTS TRG_IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation;CREATE TRIGGER TRG_IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation BEFORE INSERT ON AppxExtension FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _AppxExtensionID FROM AppxExtension WHERE User=NEW.User AND Package=NEW.Package AND Category=NEW.Category AND KeyString IS NEW.KeyString AND RegistrationInformation=NEW.RegistrationInformation) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "AppxExtension" violates the unique index "IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation"')END;END;DROP INDEX IF EXISTS IDX_AppxExtension_User_Category_KeyString;CREATE INDEX IDX_AppxExtension_User_Category_KeyString ON AppxExtension(User, Category, KeyString);DROP INDEX IF EXISTS IDX_AppxExtension__WorkId;CREATE INDEX IDX_AppxExtension__WorkId ON AppxExtension(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Bundle_Package__WorkId;CREATE UNIQUE INDEX IDX_Bundle_Package__WorkId ON Bundle(Package, _WorkId);DROP INDEX IF EXISTS IDX_Bundle__WorkId;CREATE INDEX IDX_Bundle__WorkId ON Bundle(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId;CREATE UNIQUE INDEX IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId ON BundlePackage(Bundle, Version, Architecture, ResourceId, _WorkId) WHERE Bundle<>0;DROP TRIGGER IF EXISTS TRG_IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId;CREATE TRIGGER TRG_IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId BEFORE INSERT ON BundlePackage FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _BundlePackageID FROM BundlePackage WHERE Bundle=NEW.Bundle AND Version=NEW.Version AND Architecture=NEW.Architecture AND ResourceId IS NEW.ResourceId AND _WorkId=NEW._WorkId AND Bundle<>0) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "BundlePackage" violates the unique index "IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId"')END;END;DROP INDEX IF EXISTS IDX_BundlePackage_PackageType_Bundle;CREATE INDEX IDX_BundlePackage_PackageType_Bundle ON BundlePackage(PackageType, Bundle);DROP INDEX IF EXISTS IDX_BundlePackage__WorkId;CREATE INDEX IDX_BundlePackage__WorkId ON BundlePackage(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_BundleResource_BundlePackage;CREATE INDEX IDX_BundleResource_BundlePackage ON BundleResource(BundlePackage);DROP INDEX IF EXISTS IDX_BundleResource__WorkId;CREATE INDEX IDX_BundleResource__WorkId ON BundleResource(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ConnectedSet_Name;CREATE UNIQUE INDEX IDX_ConnectedSet_Name ON ConnectedSet(Name);DROP INDEX IF EXISTS IDX_ConnectedSetPackageFamily_ConnectedSet_PackageFamily;CREATE UNIQUE INDEX IDX_ConnectedSetPackageFamily_ConnectedSet_PackageFamily ON ConnectedSetPackageFamily(ConnectedSet, PackageFamily);DROP INDEX IF EXISTS IDX_CustomInstallWork_User_Package_Name__WorkId;CREATE UNIQUE INDEX IDX_CustomInstallWork_User_Package_Name__WorkId ON CustomInstallWork(User, Package, Name, _WorkId);DROP INDEX IF EXISTS IDX_CustomInstallWork_User_Package_Index__WorkId;CREATE UNIQUE INDEX IDX_CustomInstallWork_User_Package_Index__WorkId ON CustomInstallWork(User, Package, "Index", _WorkId);DROP INDEX IF EXISTS IDX_DefaultTile_Application;CREATE UNIQUE INDEX IDX_DefaultTile_Application ON DefaultTile(Application);DROP INDEX IF EXISTS IDX_DefaultTile__WorkId;CREATE INDEX IDX_DefaultTile__WorkId ON DefaultTile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Dependency_DependentPackage_Name;CREATE UNIQUE INDEX IDX_Dependency_DependentPackage_Name ON Dependency(DependentPackage, Name);DROP INDEX IF EXISTS IDX_Dependency_DependentPackage_Index;CREATE UNIQUE INDEX IDX_Dependency_DependentPackage_Index ON Dependency(DependentPackage, "Index");DROP INDEX IF EXISTS IDX_Dependency_Name;CREATE INDEX IDX_Dependency_Name ON Dependency(Name);DROP INDEX IF EXISTS IDX_Dependency__WorkId;CREATE INDEX IDX_Dependency__WorkId ON Dependency(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_DependencyGraph_User_DependentPackage_SupplierPackage__WorkId;CREATE UNIQUE INDEX IDX_DependencyGraph_User_DependentPackage_SupplierPackage__WorkId ON DependencyGraph(User, DependentPackage, SupplierPackage, _WorkId);DROP INDEX IF EXISTS IDX_DependencyGraph_User_DependentPackage_Index__WorkId;CREATE INDEX IDX_DependencyGraph_User_DependentPackage_Index__WorkId ON DependencyGraph(User, DependentPackage, "Index", _WorkId);DROP INDEX IF EXISTS IDX_DependencyGraph_User_DependentPackage_DependencyType__DependencyGraphID;CREATE INDEX IDX_DependencyGraph_User_DependentPackage_DependencyType__DependencyGraphID ON DependencyGraph(User, DependentPackage, DependencyType, _DependencyGraphID);DROP INDEX IF EXISTS IDX_DependencyGraph_User_SupplierPackage;CREATE INDEX IDX_DependencyGraph_User_SupplierPackage ON DependencyGraph(User, SupplierPackage);DROP INDEX IF EXISTS IDX_DependencyGraph_DependentPackage__WorkId;CREATE INDEX IDX_DependencyGraph_DependentPackage__WorkId ON DependencyGraph(DependentPackage, _WorkId);DROP INDEX IF EXISTS IDX_DependencyGraph_SupplierPackage;CREATE INDEX IDX_DependencyGraph_SupplierPackage ON DependencyGraph(SupplierPackage);DROP INDEX IF EXISTS IDX_DependencyGraph_DependencyType;CREATE INDEX IDX_DependencyGraph_DependencyType ON DependencyGraph(DependencyType);DROP INDEX IF EXISTS IDX_DependencyGraph__WorkId;CREATE INDEX IDX_DependencyGraph__WorkId ON DependencyGraph(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_DeploymentHistory_PackageIdentity;CREATE INDEX IDX_DeploymentHistory_PackageIdentity ON DeploymentHistory(PackageIdentity);DROP INDEX IF EXISTS IDX_DeploymentHistory_User;CREATE INDEX IDX_DeploymentHistory_User ON DeploymentHistory(User);DROP INDEX IF EXISTS IDX_DeploymentHistory_WhenOccurred;CREATE INDEX IDX_DeploymentHistory_WhenOccurred ON DeploymentHistory(WhenOccurred);DROP INDEX IF EXISTS IDX_DeploymentHistory__WorkId;CREATE INDEX IDX_DeploymentHistory__WorkId ON DeploymentHistory(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup;CREATE UNIQUE INDEX IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup ON DynamicAppUriHandler(ProgID, DynamicAppUriHandlerGroup);DROP TRIGGER IF EXISTS TRG_IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup;CREATE TRIGGER TRG_IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup BEFORE INSERT ON DynamicAppUriHandler FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _DynamicAppUriHandlerID FROM DynamicAppUriHandler WHERE ProgID IS NEW.ProgID AND DynamicAppUriHandlerGroup=NEW.DynamicAppUriHandlerGroup) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "DynamicAppUriHandler" violates the unique index "IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup"')END;END;DROP INDEX IF EXISTS IDX_DynamicAppUriHandler_HostName_DynamicAppUriHandlerGroup;CREATE INDEX IDX_DynamicAppUriHandler_HostName_DynamicAppUriHandlerGroup ON DynamicAppUriHandler(HostName, DynamicAppUriHandlerGroup);DROP INDEX IF EXISTS IDX_DynamicAppUriHandler_DynamicAppUriHandlerGroup;CREATE INDEX IDX_DynamicAppUriHandler_DynamicAppUriHandlerGroup ON DynamicAppUriHandler(DynamicAppUriHandlerGroup);DROP INDEX IF EXISTS IDX_DynamicAppUriHandlerGroup_User_PackageFamily_Name;CREATE UNIQUE INDEX IDX_DynamicAppUriHandlerGroup_User_PackageFamily_Name ON DynamicAppUriHandlerGroup(User, PackageFamily, Name);DROP INDEX IF EXISTS IDX_EndOfLifePackage_PackageFamily;CREATE UNIQUE INDEX IDX_EndOfLifePackage_PackageFamily ON EndOfLifePackage(PackageFamily);DROP INDEX IF EXISTS IDX_Enterprise_EnterpriseId;CREATE UNIQUE INDEX IDX_Enterprise_EnterpriseId ON Enterprise(EnterpriseId);DROP INDEX IF EXISTS IDX_FileTypeAssociation_Extension_Index;CREATE UNIQUE INDEX IDX_FileTypeAssociation_Extension_Index ON FileTypeAssociation(Extension, "Index");DROP INDEX IF EXISTS IDX_FileTypeAssociation_FileType_Extension;CREATE INDEX IDX_FileTypeAssociation_FileType_Extension ON FileTypeAssociation(FileType, Extension);DROP INDEX IF EXISTS IDX_FileTypeAssociation_ContentType_Extension;CREATE INDEX IDX_FileTypeAssociation_ContentType_Extension ON FileTypeAssociation(ContentType, Extension);DROP INDEX IF EXISTS IDX_FileTypeAssociation_ProgID_Extension;CREATE INDEX IDX_FileTypeAssociation_ProgID_Extension ON FileTypeAssociation(ProgID, Extension);DROP INDEX IF EXISTS IDX_FileTypeAssociation__WorkId;CREATE INDEX IDX_FileTypeAssociation__WorkId ON FileTypeAssociation(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_HostRuntime_PackageExtension_HostId;CREATE UNIQUE INDEX IDX_HostRuntime_PackageExtension_HostId ON HostRuntime(PackageExtension, HostId);DROP INDEX IF EXISTS IDX_HostRuntime_HostId;CREATE INDEX IDX_HostRuntime_HostId ON HostRuntime(HostId);DROP INDEX IF EXISTS IDX_HostRuntime__WorkId;CREATE INDEX IDX_HostRuntime__WorkId ON HostRuntime(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MigratorPatch_PatchId;CREATE INDEX IDX_MigratorPatch_PatchId ON MigratorPatch(PatchId);DROP INDEX IF EXISTS IDX_MigratorPatch__WorkId;CREATE INDEX IDX_MigratorPatch__WorkId ON MigratorPatch(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtApplication_Application;CREATE UNIQUE INDEX IDX_MrtApplication_Application ON MrtApplication(Application);DROP INDEX IF EXISTS IDX_MrtApplication__WorkId;CREATE INDEX IDX_MrtApplication__WorkId ON MrtApplication(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtDefaultTile_DefaultTile;CREATE UNIQUE INDEX IDX_MrtDefaultTile_DefaultTile ON MrtDefaultTile(DefaultTile);DROP INDEX IF EXISTS IDX_MrtDefaultTile__WorkId;CREATE INDEX IDX_MrtDefaultTile__WorkId ON MrtDefaultTile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtPackage_Package;CREATE UNIQUE INDEX IDX_MrtPackage_Package ON MrtPackage(Package);DROP INDEX IF EXISTS IDX_MrtPackage__WorkId;CREATE INDEX IDX_MrtPackage__WorkId ON MrtPackage(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtSharedPri_Filename;CREATE UNIQUE INDEX IDX_MrtSharedPri_Filename ON MrtSharedPri(Filename);DROP INDEX IF EXISTS IDX_MrtSharedPri_Package;CREATE INDEX IDX_MrtSharedPri_Package ON MrtSharedPri(Package);DROP INDEX IF EXISTS IDX_MrtSharedPri__WorkId;CREATE INDEX IDX_MrtSharedPri__WorkId ON MrtSharedPri(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtUserPri_Package_User__WorkId;CREATE UNIQUE INDEX IDX_MrtUserPri_Package_User__WorkId ON MrtUserPri(Package, User, _WorkId);DROP INDEX IF EXISTS IDX_MrtUserPri_MrtSharedPri;CREATE INDEX IDX_MrtUserPri_MrtSharedPri ON MrtUserPri(MrtSharedPri);DROP INDEX IF EXISTS IDX_MrtUserPri_User;CREATE INDEX IDX_MrtUserPri_User ON MrtUserPri(User);DROP INDEX IF EXISTS IDX_MrtUserPri__WorkId;CREATE INDEX IDX_MrtUserPri__WorkId ON MrtUserPri(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_NamedDependency_Package_DependencyType_Index__WorkId;CREATE UNIQUE INDEX IDX_NamedDependency_Package_DependencyType_Index__WorkId ON NamedDependency(Package, DependencyType, "Index", _WorkId);DROP INDEX IF EXISTS IDX_NamedDependency__WorkId;CREATE INDEX IDX_NamedDependency__WorkId ON NamedDependency(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_OptionalBundle_MainBundle_Name_Publisher__WorkId;CREATE UNIQUE INDEX IDX_OptionalBundle_MainBundle_Name_Publisher__WorkId ON OptionalBundle(MainBundle, Name, Publisher, _WorkId);DROP INDEX IF EXISTS IDX_OptionalBundle_Name_Publisher__WorkId;CREATE INDEX IDX_OptionalBundle_Name_Publisher__WorkId ON OptionalBundle(Name, Publisher, _WorkId);DROP INDEX IF EXISTS IDX_OptionalBundle_MainBundle__WorkId;CREATE INDEX IDX_OptionalBundle_MainBundle__WorkId ON OptionalBundle(MainBundle, _WorkId);DROP INDEX IF EXISTS IDX_OptionalBundle__WorkId;CREATE INDEX IDX_OptionalBundle__WorkId ON OptionalBundle(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId;CREATE UNIQUE INDEX IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId ON OptionalBundlePackage(OptionalBundle, Version, Architecture, ResourceId, _WorkId) WHERE OptionalBundle<>0;DROP TRIGGER IF EXISTS TRG_IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId;CREATE TRIGGER TRG_IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId BEFORE INSERT ON OptionalBundlePackage FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _OptionalBundlePackageID FROM OptionalBundlePackage WHERE OptionalBundle=NEW.OptionalBundle AND Version=NEW.Version AND Architecture=NEW.Architecture AND ResourceId IS NEW.ResourceId AND _WorkId=NEW._WorkId AND OptionalBundle<>0) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "OptionalBundlePackage" violates the unique index "IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId"')END;END;DROP INDEX IF EXISTS IDX_OptionalBundlePackage__WorkId;CREATE INDEX IDX_OptionalBundlePackage__WorkId ON OptionalBundlePackage(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_OptionalBundleResource_OptionalBundlePackage;CREATE INDEX IDX_OptionalBundleResource_OptionalBundlePackage ON OptionalBundleResource(OptionalBundlePackage);DROP INDEX IF EXISTS IDX_OptionalBundleResource__WorkId;CREATE INDEX IDX_OptionalBundleResource__WorkId ON OptionalBundleResource(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Package_PackageFullName__WorkId;CREATE UNIQUE INDEX IDX_Package_PackageFullName__WorkId ON Package(PackageFullName, _WorkId);DROP INDEX IF EXISTS IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId;CREATE UNIQUE INDEX IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId ON Package(PackageFamily, ResourceId, Architecture, Version, _WorkId);DROP TRIGGER IF EXISTS TRG_IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId;CREATE TRIGGER TRG_IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId BEFORE INSERT ON Package FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _PackageID FROM Package WHERE PackageFamily=NEW.PackageFamily AND ResourceId IS NEW.ResourceId AND Architecture=NEW.Architecture AND Version=NEW.Version AND _WorkId=NEW._WorkId) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "Package" violates the unique index "IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId"')END;END;DROP INDEX IF EXISTS IDX_Package_PackageFamily;CREATE INDEX IDX_Package_PackageFamily ON Package(PackageFamily);DROP INDEX IF EXISTS IDX_Package_PackageFamily_PackageType_ResourceId_Version;CREATE INDEX IDX_Package_PackageFamily_PackageType_ResourceId_Version ON Package(PackageFamily, PackageType, ResourceId, Version);DROP INDEX IF EXISTS IDX_Package_SourceBundle_PackageType;CREATE INDEX IDX_Package_SourceBundle_PackageType ON Package(SourceBundle, PackageType);DROP INDEX IF EXISTS IDX_Package_EditionId;CREATE INDEX IDX_Package_EditionId ON Package(EditionId);DROP INDEX IF EXISTS IDX_Package__WorkId_PackageFamily;CREATE INDEX IDX_Package__WorkId_PackageFamily ON Package(_WorkId, PackageFamily);DROP INDEX IF EXISTS IDX_Package__WorkId;CREATE INDEX IDX_Package__WorkId ON Package(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageDependency_PackageDependencyId;CREATE UNIQUE INDEX IDX_PackageDependency_PackageDependencyId ON PackageDependency(PackageDependencyId);DROP INDEX IF EXISTS IDX_PackageDependency_User_PackageFamilyName_MinVersion;CREATE INDEX IDX_PackageDependency_User_PackageFamilyName_MinVersion ON PackageDependency(User, PackageFamilyName, MinVersion);DROP INDEX IF EXISTS IDX_PackageDependency_User_PackageFamily_MinVersion;CREATE INDEX IDX_PackageDependency_User_PackageFamily_MinVersion ON PackageDependency(User, PackageFamily, MinVersion);DROP INDEX IF EXISTS IDX_PackageExtension_Package_Index;CREATE UNIQUE INDEX IDX_PackageExtension_Package_Index ON PackageExtension(Package, "Index");DROP INDEX IF EXISTS IDX_PackageExtension_Package_Category;CREATE INDEX IDX_PackageExtension_Package_Category ON PackageExtension(Package, Category);DROP INDEX IF EXISTS IDX_PackageExtension_Category;CREATE INDEX IDX_PackageExtension_Category ON PackageExtension(Category);DROP INDEX IF EXISTS IDX_PackageExtension__WorkId;CREATE INDEX IDX_PackageExtension__WorkId ON PackageExtension(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageExternalLocation_User_Package__WorkId;CREATE UNIQUE INDEX IDX_PackageExternalLocation_User_Package__WorkId ON PackageExternalLocation(User, Package, _WorkId);DROP INDEX IF EXISTS IDX_PackageExternalLocation_User__WorkId;CREATE INDEX IDX_PackageExternalLocation_User__WorkId ON PackageExternalLocation(User, _WorkId);DROP INDEX IF EXISTS IDX_PackageExternalLocation_Package__WorkId;CREATE INDEX IDX_PackageExternalLocation_Package__WorkId ON PackageExternalLocation(Package, _WorkId);DROP INDEX IF EXISTS IDX_PackageExternalLocation__WorkId;CREATE INDEX IDX_PackageExternalLocation__WorkId ON PackageExternalLocation(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageFamily_PackageFamilyName;CREATE UNIQUE INDEX IDX_PackageFamily_PackageFamilyName ON PackageFamily(PackageFamilyName);DROP INDEX IF EXISTS IDX_PackageFamily_Name_PublisherId;CREATE UNIQUE INDEX IDX_PackageFamily_Name_PublisherId ON PackageFamily(Name, PublisherId);DROP INDEX IF EXISTS IDX_PackageFamily_PackageSID;CREATE INDEX IDX_PackageFamily_PackageSID ON PackageFamily(PackageSID);DROP INDEX IF EXISTS IDX_PackageFamily_PublisherId;CREATE INDEX IDX_PackageFamily_PublisherId ON PackageFamily(PublisherId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_PackageFamily_Name_Index__WorkId;CREATE UNIQUE INDEX IDX_PackageFamilyPolicy_User_PackageFamily_Name_Index__WorkId ON PackageFamilyPolicy(User, PackageFamily, Name, "Index", _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_PackageFamily_Name_Index__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_PackageFamily_Name_Index__WorkId ON PackageFamilyPolicy(PackageFamily, Name, "Index", _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_PackageFamily_Name_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_PackageFamily_Name_ValueString__WorkId ON PackageFamilyPolicy(User, PackageFamily, Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_PackageFamily_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_PackageFamily_Name_ValueNumber__WorkId ON PackageFamilyPolicy(User, PackageFamily, Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_Name_Index_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_Name_Index_ValueString__WorkId ON PackageFamilyPolicy(User, Name, "Index", ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_Name_Index_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_Name_Index_ValueString__WorkId ON PackageFamilyPolicy(Name, "Index", ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_Name_Index_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_Name_Index_ValueNumber__WorkId ON PackageFamilyPolicy(User, Name, "Index", ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_Name_Index_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_Name_Index_ValueNumber__WorkId ON PackageFamilyPolicy(Name, "Index", ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_Name_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_Name_ValueString__WorkId ON PackageFamilyPolicy(User, Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_Name_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_Name_ValueString__WorkId ON PackageFamilyPolicy(Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_Name_ValueNumber__WorkId ON PackageFamilyPolicy(User, Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_Name_ValueNumber__WorkId ON PackageFamilyPolicy(Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy__WorkId;CREATE INDEX IDX_PackageFamilyPolicy__WorkId ON PackageFamilyPolicy(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageFamilyUser_User_PackageFamily;CREATE UNIQUE INDEX IDX_PackageFamilyUser_User_PackageFamily ON PackageFamilyUser(User, PackageFamily);DROP INDEX IF EXISTS IDX_PackageFamilyUser_PackageFamily;CREATE INDEX IDX_PackageFamilyUser_PackageFamily ON PackageFamilyUser(PackageFamily);DROP INDEX IF EXISTS IDX_PackageFamilyUserResource_PackageFamilyUser_ResourceId;CREATE UNIQUE INDEX IDX_PackageFamilyUserResource_PackageFamilyUser_ResourceId ON PackageFamilyUserResource(PackageFamilyUser, ResourceId);DROP INDEX IF EXISTS IDX_PackageIdentity_PackageFullName;CREATE UNIQUE INDEX IDX_PackageIdentity_PackageFullName ON PackageIdentity(PackageFullName);DROP INDEX IF EXISTS IDX_PackageIdentity_PackageFamily;CREATE INDEX IDX_PackageIdentity_PackageFamily ON PackageIdentity(PackageFamily);DROP INDEX IF EXISTS IDX_PackageLocation_Package__WorkId;CREATE UNIQUE INDEX IDX_PackageLocation_Package__WorkId ON PackageLocation(Package, _WorkId);DROP INDEX IF EXISTS IDX_PackageLocation_Volume;CREATE INDEX IDX_PackageLocation_Volume ON PackageLocation(Volume);DROP INDEX IF EXISTS IDX_PackageLocation_InstalledLocation;CREATE INDEX IDX_PackageLocation_InstalledLocation ON PackageLocation(InstalledLocation);DROP INDEX IF EXISTS IDX_PackageLocation__WorkId;CREATE INDEX IDX_PackageLocation__WorkId ON PackageLocation(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageMachineStatus_PackageIdentity;CREATE UNIQUE INDEX IDX_PackageMachineStatus_PackageIdentity ON PackageMachineStatus(PackageIdentity);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Package_Name_Index__WorkId;CREATE UNIQUE INDEX IDX_PackagePolicy_User_Package_Name_Index__WorkId ON PackagePolicy(User, Package, Name, "Index", _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Package_Name_Index__WorkId;CREATE INDEX IDX_PackagePolicy_Package_Name_Index__WorkId ON PackagePolicy(Package, Name, "Index", _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Package_Name_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_User_Package_Name_ValueString__WorkId ON PackagePolicy(User, Package, Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Package_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_User_Package_Name_ValueNumber__WorkId ON PackagePolicy(User, Package, Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Name_Index_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_User_Name_Index_ValueString__WorkId ON PackagePolicy(User, Name, "Index", ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Name_Index_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_Name_Index_ValueString__WorkId ON PackagePolicy(Name, "Index", ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Name_Index_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_User_Name_Index_ValueNumber__WorkId ON PackagePolicy(User, Name, "Index", ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Name_Index_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_Name_Index_ValueNumber__WorkId ON PackagePolicy(Name, "Index", ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Name_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_User_Name_ValueString__WorkId ON PackagePolicy(User, Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Name_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_Name_ValueString__WorkId ON PackagePolicy(Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_User_Name_ValueNumber__WorkId ON PackagePolicy(User, Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_Name_ValueNumber__WorkId ON PackagePolicy(Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy__WorkId;CREATE INDEX IDX_PackagePolicy__WorkId ON PackagePolicy(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageProperty_Package_Index;CREATE UNIQUE INDEX IDX_PackageProperty_Package_Index ON PackageProperty(Package, "Index");DROP INDEX IF EXISTS IDX_PackageProperty_Package_Name;CREATE INDEX IDX_PackageProperty_Package_Name ON PackageProperty(Package, Name);DROP INDEX IF EXISTS IDX_PackageProperty_Name;CREATE INDEX IDX_PackageProperty_Name ON PackageProperty(Name);DROP INDEX IF EXISTS IDX_PackageProperty__WorkId;CREATE INDEX IDX_PackageProperty__WorkId ON PackageProperty(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageSuperceded_User_PackageIdentity;CREATE UNIQUE INDEX IDX_PackageSuperceded_User_PackageIdentity ON PackageSuperceded(User, PackageIdentity);DROP INDEX IF EXISTS IDX_PackageSuperceded_PackageIdentity;CREATE INDEX IDX_PackageSuperceded_PackageIdentity ON PackageSuperceded(PackageIdentity);DROP INDEX IF EXISTS IDX_PackageUser_User_Package__WorkId;CREATE UNIQUE INDEX IDX_PackageUser_User_Package__WorkId ON PackageUser(User, Package, _WorkId);DROP INDEX IF EXISTS IDX_PackageUser_User__WorkId;CREATE INDEX IDX_PackageUser_User__WorkId ON PackageUser(User, _WorkId);DROP INDEX IF EXISTS IDX_PackageUser_Package;CREATE INDEX IDX_PackageUser_Package ON PackageUser(Package);DROP INDEX IF EXISTS IDX_PackageUser_User_DeploymentState_IsExplicitlyInstalled;CREATE INDEX IDX_PackageUser_User_DeploymentState_IsExplicitlyInstalled ON PackageUser(User, DeploymentState, IsExplicitlyInstalled);DROP INDEX IF EXISTS IDX_PackageUser_AppDataVolume;CREATE INDEX IDX_PackageUser_AppDataVolume ON PackageUser(AppDataVolume);DROP INDEX IF EXISTS IDX_PackageUser_DeploymentState__WorkId_Package;CREATE INDEX IDX_PackageUser_DeploymentState__WorkId_Package ON PackageUser(DeploymentState, _WorkId, Package);DROP INDEX IF EXISTS IDX_PackageUser__WorkId;CREATE INDEX IDX_PackageUser__WorkId ON PackageUser(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageUserStatus_User_PackageIdentity;CREATE UNIQUE INDEX IDX_PackageUserStatus_User_PackageIdentity ON PackageUserStatus(User, PackageIdentity);DROP INDEX IF EXISTS IDX_PrimaryTile_Application_TileId__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTile_Application_TileId__WorkId ON PrimaryTile(Application, TileId, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTile_Application__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTile_Application__WorkId ON PrimaryTile(Application, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTile_Package;CREATE INDEX IDX_PrimaryTile_Package ON PrimaryTile(Package);DROP INDEX IF EXISTS IDX_PrimaryTile__WorkId;CREATE INDEX IDX_PrimaryTile__WorkId ON PrimaryTile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PrimaryTile_Package_Application;CREATE INDEX IDX_PrimaryTile_Package_Application ON PrimaryTile(Package, Application);DROP INDEX IF EXISTS IDX_PrimaryTileUser_User_ApplicationIdentity__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTileUser_User_ApplicationIdentity__WorkId ON PrimaryTileUser(User, ApplicationIdentity, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTileUser_TileUniqueId__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTileUser_TileUniqueId__WorkId ON PrimaryTileUser(TileUniqueId, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTileUser_ApplicationIdentity__WorkId;CREATE INDEX IDX_PrimaryTileUser_ApplicationIdentity__WorkId ON PrimaryTileUser(ApplicationIdentity, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTileUser__Created;CREATE INDEX IDX_PrimaryTileUser__Created ON PrimaryTileUser(_Created);DROP INDEX IF EXISTS IDX_PrimaryTileUser__Modified;CREATE INDEX IDX_PrimaryTileUser__Modified ON PrimaryTileUser(_Modified);DROP INDEX IF EXISTS IDX_PrimaryTileUser__WorkId;CREATE INDEX IDX_PrimaryTileUser__WorkId ON PrimaryTileUser(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog__Created;CREATE UNIQUE INDEX IDX_PrimaryTileUserChangelog__Created ON PrimaryTileUserChangelog(_Created);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog__Deleted;CREATE UNIQUE INDEX IDX_PrimaryTileUserChangelog__Deleted ON PrimaryTileUserChangelog(_Deleted);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog_User_TileUniqueId;CREATE UNIQUE INDEX IDX_PrimaryTileUserChangelog_User_TileUniqueId ON PrimaryTileUserChangelog(User, TileUniqueId);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog_TileUniqueId__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTileUserChangelog_TileUniqueId__WorkId ON PrimaryTileUserChangelog(TileUniqueId, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog_WhenOccurred;CREATE INDEX IDX_PrimaryTileUserChangelog_WhenOccurred ON PrimaryTileUserChangelog(WhenOccurred);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog__WorkId;CREATE INDEX IDX_PrimaryTileUserChangelog__WorkId ON PrimaryTileUserChangelog(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Protocol_Extension_Index;CREATE UNIQUE INDEX IDX_Protocol_Extension_Index ON Protocol(Extension, "Index");DROP INDEX IF EXISTS IDX_Protocol_ProtocolName_Extension;CREATE INDEX IDX_Protocol_ProtocolName_Extension ON Protocol(ProtocolName, Extension);DROP INDEX IF EXISTS IDX_Protocol_ProtocolName_ReturnResults;CREATE INDEX IDX_Protocol_ProtocolName_ReturnResults ON Protocol(ProtocolName, ReturnResults);DROP INDEX IF EXISTS IDX_Protocol_ProgID_Extension;CREATE INDEX IDX_Protocol_ProgID_Extension ON Protocol(ProgID, Extension);DROP INDEX IF EXISTS IDX_Protocol__WorkId;CREATE INDEX IDX_Protocol__WorkId ON Protocol(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ProvisionedPackage_PackageIdentity;CREATE UNIQUE INDEX IDX_ProvisionedPackage_PackageIdentity ON ProvisionedPackage(PackageIdentity);DROP INDEX IF EXISTS IDX_ProvisionedPackage_Path;CREATE UNIQUE INDEX IDX_ProvisionedPackage_Path ON ProvisionedPackage(Path);DROP INDEX IF EXISTS IDX_ProvisionedPackageDeleted_PackageIdentity;CREATE UNIQUE INDEX IDX_ProvisionedPackageDeleted_PackageIdentity ON ProvisionedPackageDeleted(PackageIdentity);DROP INDEX IF EXISTS IDX_ProvisionedPackageDeleted_Path;CREATE UNIQUE INDEX IDX_ProvisionedPackageDeleted_Path ON ProvisionedPackageDeleted(Path);DROP INDEX IF EXISTS IDX_ProvisionedPackageExclude_PackageFamily;CREATE UNIQUE INDEX IDX_ProvisionedPackageExclude_PackageFamily ON ProvisionedPackageExclude(PackageFamily);DROP INDEX IF EXISTS IDX_PublisherCacheFolder_PackageExtension_Index;CREATE UNIQUE INDEX IDX_PublisherCacheFolder_PackageExtension_Index ON PublisherCacheFolder(PackageExtension, "Index");DROP INDEX IF EXISTS IDX_PublisherCacheFolder_PackageExtension_FolderName;CREATE UNIQUE INDEX IDX_PublisherCacheFolder_PackageExtension_FolderName ON PublisherCacheFolder(PackageExtension, FolderName);DROP TRIGGER IF EXISTS TRG_IDX_PublisherCacheFolder_PackageExtension_FolderName;CREATE TRIGGER TRG_IDX_PublisherCacheFolder_PackageExtension_FolderName BEFORE INSERT ON PublisherCacheFolder FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _PublisherCacheFolderID FROM PublisherCacheFolder WHERE PackageExtension=NEW.PackageExtension AND FolderName IS NEW.FolderName) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "PublisherCacheFolder" violates the unique index "IDX_PublisherCacheFolder_PackageExtension_FolderName"')END;END;DROP INDEX IF EXISTS IDX_PublisherCacheFolder_FolderName;CREATE INDEX IDX_PublisherCacheFolder_FolderName ON PublisherCacheFolder(FolderName);DROP INDEX IF EXISTS IDX_PublisherCacheFolder__WorkId;CREATE INDEX IDX_PublisherCacheFolder__WorkId ON PublisherCacheFolder(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Resource_Package_Index__WorkId;CREATE UNIQUE INDEX IDX_Resource_Package_Index__WorkId ON Resource(Package, "Index", _WorkId);DROP INDEX IF EXISTS IDX_Resource__WorkId;CREATE INDEX IDX_Resource__WorkId ON Resource(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SRHistory_PackageIdentity;CREATE INDEX IDX_SRHistory_PackageIdentity ON SRHistory(PackageIdentity);DROP INDEX IF EXISTS IDX_SRHistory_User;CREATE INDEX IDX_SRHistory_User ON SRHistory(User);DROP INDEX IF EXISTS IDX_SRHistory_WhenOccurred;CREATE INDEX IDX_SRHistory_WhenOccurred ON SRHistory(WhenOccurred);DROP INDEX IF EXISTS IDX_SRHistory__WorkId;CREATE INDEX IDX_SRHistory__WorkId ON SRHistory(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SRJournal_ObjectType_Action_ObjectId;CREATE INDEX IDX_SRJournal_ObjectType_Action_ObjectId ON SRJournal(ObjectType, "Action", ObjectId);DROP INDEX IF EXISTS IDX_SRJournal_SequenceId;CREATE INDEX IDX_SRJournal_SequenceId ON SRJournal(SequenceId);DROP INDEX IF EXISTS IDX_SRJournal__WorkId;CREATE INDEX IDX_SRJournal__WorkId ON SRJournal(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SRJournalArchive_ObjectType_Action_ObjectId;CREATE INDEX IDX_SRJournalArchive_ObjectType_Action_ObjectId ON SRJournalArchive(ObjectType, "Action", ObjectId);DROP INDEX IF EXISTS IDX_SRJournalArchive_SequenceId;CREATE INDEX IDX_SRJournalArchive_SequenceId ON SRJournalArchive(SequenceId);DROP INDEX IF EXISTS IDX_SecondaryTile__WorkId;CREATE INDEX IDX_SecondaryTile__WorkId ON SecondaryTile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SecondaryTileUser_User_SecondaryTile__WorkId;CREATE UNIQUE INDEX IDX_SecondaryTileUser_User_SecondaryTile__WorkId ON SecondaryTileUser(User, SecondaryTile, _WorkId);DROP INDEX IF EXISTS IDX_SecondaryTileUser_TileUniqueId__WorkId;CREATE UNIQUE INDEX IDX_SecondaryTileUser_TileUniqueId__WorkId ON SecondaryTileUser(TileUniqueId, _WorkId);DROP INDEX IF EXISTS IDX_SecondaryTileUser_User_ApplicationIdentity__WorkId;CREATE INDEX IDX_SecondaryTileUser_User_ApplicationIdentity__WorkId ON SecondaryTileUser(User, ApplicationIdentity, _WorkId);DROP INDEX IF EXISTS IDX_SecondaryTileUser__Created;CREATE INDEX IDX_SecondaryTileUser__Created ON SecondaryTileUser(_Created);DROP INDEX IF EXISTS IDX_SecondaryTileUser__Modified;CREATE INDEX IDX_SecondaryTileUser__Modified ON SecondaryTileUser(_Modified);DROP INDEX IF EXISTS IDX_SecondaryTileUser__WorkId;CREATE INDEX IDX_SecondaryTileUser__WorkId ON SecondaryTileUser(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog__Created;CREATE UNIQUE INDEX IDX_SecondaryTileUserChangelog__Created ON SecondaryTileUserChangelog(_Created);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog__Deleted;CREATE UNIQUE INDEX IDX_SecondaryTileUserChangelog__Deleted ON SecondaryTileUserChangelog(_Deleted);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog_User_TileUniqueId;CREATE UNIQUE INDEX IDX_SecondaryTileUserChangelog_User_TileUniqueId ON SecondaryTileUserChangelog(User, TileUniqueId);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog_TileUniqueId__WorkId;CREATE UNIQUE INDEX IDX_SecondaryTileUserChangelog_TileUniqueId__WorkId ON SecondaryTileUserChangelog(TileUniqueId, _WorkId);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog_WhenOccurred;CREATE INDEX IDX_SecondaryTileUserChangelog_WhenOccurred ON SecondaryTileUserChangelog(WhenOccurred);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog__WorkId;CREATE INDEX IDX_SecondaryTileUserChangelog__WorkId ON SecondaryTileUserChangelog(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Sequence_Id;CREATE UNIQUE INDEX IDX_Sequence_Id ON Sequence(Id);DROP INDEX IF EXISTS IDX_SharedPackageContainer_Id__WorkId;CREATE UNIQUE INDEX IDX_SharedPackageContainer_Id__WorkId ON SharedPackageContainer(Id, _WorkId);DROP INDEX IF EXISTS IDX_SharedPackageContainer_User_Name__WorkId;CREATE UNIQUE INDEX IDX_SharedPackageContainer_User_Name__WorkId ON SharedPackageContainer(User, Name, _WorkId);DROP INDEX IF EXISTS IDX_SharedPackageContainer__WorkId;CREATE INDEX IDX_SharedPackageContainer__WorkId ON SharedPackageContainer(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SharedPackageContainerPackageFamily_SharedPackageContainer_PackageFamilyName__WorkId;CREATE UNIQUE INDEX IDX_SharedPackageContainerPackageFamily_SharedPackageContainer_PackageFamilyName__WorkId ON SharedPackageContainerPackageFamily(SharedPackageContainer, PackageFamilyName, _WorkId);DROP INDEX IF EXISTS IDX_SharedPackageContainerPackageFamily__WorkId;CREATE INDEX IDX_SharedPackageContainerPackageFamily__WorkId ON SharedPackageContainerPackageFamily(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_TargetDeviceFamily_Package_Index__WorkId;CREATE UNIQUE INDEX IDX_TargetDeviceFamily_Package_Index__WorkId ON TargetDeviceFamily(Package, "Index", _WorkId);DROP INDEX IF EXISTS IDX_TargetDeviceFamily__WorkId;CREATE INDEX IDX_TargetDeviceFamily__WorkId ON TargetDeviceFamily(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_User_UserSid;CREATE UNIQUE INDEX IDX_User_UserSid ON User(UserSid);DROP INDEX IF EXISTS IDX_WorkInProgress_Key;CREATE UNIQUE INDEX IDX_WorkInProgress_Key ON WorkInProgress("Key");DROP TRIGGER IF EXISTS TRG_IDX_WorkInProgress_Key;CREATE TRIGGER TRG_IDX_WorkInProgress_Key BEFORE INSERT ON WorkInProgress FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _WorkInProgressID FROM WorkInProgress WHERE "Key" IS NEW."Key") IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "WorkInProgress" violates the unique index "IDX_WorkInProgress_Key"')END;END;DROP INDEX IF EXISTS IDX_WowDependencyGraph_User_DependentPackage_SupplierPackage__WorkId;CREATE UNIQUE INDEX IDX_WowDependencyGraph_User_DependentPackage_SupplierPackage__WorkId ON WowDependencyGraph(User, DependentPackage, SupplierPackage, _WorkId);DROP INDEX IF EXISTS IDX_WowDependencyGraph_User_DependentPackage_Index__WorkId;CREATE INDEX IDX_WowDependencyGraph_User_DependentPackage_Index__WorkId ON WowDependencyGraph(User, DependentPackage, "Index", _WorkId);DROP INDEX IF EXISTS IDX_WowDependencyGraph_User_DependentPackage_DependencyType__WowDependencyGraphID;CREATE INDEX IDX_WowDependencyGraph_User_DependentPackage_DependencyType__WowDependencyGraphID ON WowDependencyGraph(User, DependentPackage, DependencyType, _WowDependencyGraphID);DROP INDEX IF EXISTS IDX_WowDependencyGraph_User_SupplierPackage;CREATE INDEX IDX_WowDependencyGraph_User_SupplierPackage ON WowDependencyGraph(User, SupplierPackage);DROP INDEX IF EXISTS IDX_WowDependencyGraph_SupplierPackage;CREATE INDEX IDX_WowDependencyGraph_SupplierPackage ON WowDependencyGraph(SupplierPackage);DROP INDEX IF EXISTS IDX_WowDependencyGraph__WorkId;CREATE INDEX IDX_WowDependencyGraph__WorkId ON WowDependencyGraph(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_XboxPackage_EditionId__WorkId;CREATE UNIQUE INDEX IDX_XboxPackage_EditionId__WorkId ON XboxPackage(EditionId, _WorkId);DROP INDEX IF EXISTS IDX_XboxPackage_Package;CREATE INDEX IDX_XboxPackage_Package ON XboxPackage(Package);DROP INDEX IF EXISTS IDX_XboxPackage_ContentId;CREATE INDEX IDX_XboxPackage_ContentId ON XboxPackage(ContentId);DROP INDEX IF EXISTS IDX_XboxPackage_ProductId;CREATE INDEX IDX_XboxPackage_ProductId ON XboxPackage(ProductId);DROP INDEX IF EXISTS IDX_XboxPackage_DeviceId;CREATE INDEX IDX_XboxPackage_DeviceId ON XboxPackage(DeviceId);DROP INDEX IF EXISTS IDX_XboxPackage_TitleId;CREATE INDEX IDX_XboxPackage_TitleId ON XboxPackage(TitleId);DROP INDEX IF EXISTS IDX_XboxPackage_EscrowedKeyBlobId;CREATE INDEX IDX_XboxPackage_EscrowedKeyBlobId ON XboxPackage(EscrowedKeyBlobId);DROP INDEX IF EXISTS IDX_XboxPackage__WorkId;CREATE INDEX IDX_XboxPackage__WorkId ON XboxPackage(_WorkId) WHERE _WorkId<>0;
DROP INDEX IF EXISTS IDX_AppInstaller_Uri;CREATE UNIQUE INDEX IDX_AppInstaller_Uri ON AppInstaller(Uri);DROP INDEX IF EXISTS IDX_AppInstallerUri_AppInstaller_UriType_Uri;CREATE UNIQUE INDEX IDX_AppInstallerUri_AppInstaller_UriType_Uri ON AppInstallerUri(AppInstaller, UriType, Uri);DROP INDEX IF EXISTS IDX_AppInstallerUri_AppInstaller_UriType_Index;CREATE UNIQUE INDEX IDX_AppInstallerUri_AppInstaller_UriType_Index ON AppInstallerUri(AppInstaller, UriType, "Index");DROP INDEX IF EXISTS IDX_AppxManifest_Package;CREATE UNIQUE INDEX IDX_AppxManifest_Package ON AppxManifest(Package);DROP INDEX IF EXISTS IDX_AppxManifest__WorkId;CREATE INDEX IDX_AppxManifest__WorkId ON AppxManifest(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AutoUpdatePackage_AppInstaller_PackageFamily_Version_Architecture;CREATE UNIQUE INDEX IDX_AutoUpdatePackage_AppInstaller_PackageFamily_Version_Architecture ON AutoUpdatePackage(AppInstaller, PackageFamily, Version, Architecture);DROP INDEX IF EXISTS IDX_ContentGroup_Package_Name;CREATE UNIQUE INDEX IDX_ContentGroup_Package_Name ON ContentGroup(Package, Name);DROP INDEX IF EXISTS IDX_ContentGroup_Package_Index;CREATE UNIQUE INDEX IDX_ContentGroup_Package_Index ON ContentGroup(Package, "Index");DROP INDEX IF EXISTS IDX_ContentGroup__WorkId;CREATE INDEX IDX_ContentGroup__WorkId ON ContentGroup(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ContentGroupFile_ContentGroup_File;CREATE UNIQUE INDEX IDX_ContentGroupFile_ContentGroup_File ON ContentGroupFile(ContentGroup, File);DROP INDEX IF EXISTS IDX_ContentGroupFile__WorkId;CREATE INDEX IDX_ContentGroupFile__WorkId ON ContentGroupFile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_File_Package_RelativeFilePath__WorkId;CREATE UNIQUE INDEX IDX_File_Package_RelativeFilePath__WorkId ON File(Package, RelativeFilePath, _WorkId);DROP INDEX IF EXISTS IDX_File_Package__WorkId;CREATE INDEX IDX_File_Package__WorkId ON File(Package, _WorkId);DROP INDEX IF EXISTS IDX_File_Digest__WorkId;CREATE INDEX IDX_File_Digest__WorkId ON File(Digest, _WorkId);DROP INDEX IF EXISTS IDX_File__WorkId;CREATE INDEX IDX_File__WorkId ON File(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageAppInstaller_Package_AppInstaller__WorkId;CREATE UNIQUE INDEX IDX_PackageAppInstaller_Package_AppInstaller__WorkId ON PackageAppInstaller(Package, AppInstaller, _WorkId);DROP INDEX IF EXISTS IDX_PackageAppInstaller_AppInstaller__WorkId;CREATE INDEX IDX_PackageAppInstaller_AppInstaller__WorkId ON PackageAppInstaller(AppInstaller, _WorkId);DROP INDEX IF EXISTS IDX_PackageAppInstaller__WorkId;CREATE INDEX IDX_PackageAppInstaller__WorkId ON PackageAppInstaller(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageSourceUri_Package_Kind;CREATE INDEX IDX_PackageSourceUri_Package_Kind ON PackageSourceUri(Package, Kind);DROP INDEX IF EXISTS IDX_PackageSourceUri__WorkId;CREATE INDEX IDX_PackageSourceUri__WorkId ON PackageSourceUri(_WorkId) WHERE _WorkId<>0;
DROP TABLE IF EXISTS Activation;CREATE TABLE Activation(_ActivationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,ActivationKey TEXT COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,HostId TEXT COLLATE NOCASE,Executable TEXT COLLATE NOCASE,Entrypoint TEXT,RuntimeType TEXT COLLATE NOCASE,StartPage TEXT COLLATE NOCASE,ResourceGroup TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS AppExecutionAlias;CREATE TABLE AppExecutionAlias(_AppExecutionAliasID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Alias TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID));DROP TABLE IF EXISTS AppExecutionAliasUser;CREATE TABLE AppExecutionAliasUser(_AppExecutionAliasUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,User INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,Alias TEXT NOT NULL COLLATE NOCASE,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(ApplicationIdentity) REFERENCES ApplicationIdentity(_ApplicationIdentityID));DROP TABLE IF EXISTS AppExtension;CREATE TABLE AppExtension(_AppExtensionID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Name TEXT NOT NULL COLLATE NOCASE,Id TEXT NOT NULL COLLATE NOCASE,PublicFolder TEXT COLLATE NOCASE,DisplayName TEXT NOT NULL,Description TEXT,Extension INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID));DROP TABLE IF EXISTS AppExtensionHost;CREATE TABLE AppExtensionHost(_AppExtensionHostID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Extension INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID));DROP TABLE IF EXISTS AppService;CREATE TABLE AppService(_AppServiceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Name TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,"Index" INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID));DROP TABLE IF EXISTS AppUriHandler;CREATE TABLE AppUriHandler(_AppUriHandlerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,HostName TEXT NOT NULL COLLATE NOCASE,Path TEXT COLLATE NOCASE,Extension INTEGER NOT NULL,ProgID TEXT COLLATE NOCASE,AppUriHandlerGroup INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID),FOREIGN KEY(AppUriHandlerGroup) REFERENCES AppUriHandlerGroup(_AppUriHandlerGroupID));DROP TABLE IF EXISTS AppUriHandlerGroup;CREATE TABLE AppUriHandlerGroup(_AppUriHandlerGroupID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Name TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID));DROP TABLE IF EXISTS Application;CREATE TABLE Application(_ApplicationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,ApplicationType INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,Subsystem INTEGER NOT NULL DEFAULT 0,PackageRelativeApplicationId TEXT NOT NULL COLLATE NOCASE,ApplicationUserModelId TEXT NOT NULL COLLATE NOCASE,DisplayName TEXT NOT NULL,Description TEXT NOT NULL,Square150x150Logo TEXT COLLATE NOCASE,Square44x44Logo TEXT NOT NULL COLLATE NOCASE,Wide310x150Logo TEXT COLLATE NOCASE,Square310x310Logo TEXT COLLATE NOCASE,Square71x71Logo TEXT COLLATE NOCASE,ForegroundText TEXT,BackgroundColor INTEGER NOT NULL,Activation INTEGER NOT NULL DEFAULT 0,HostId TEXT COLLATE NOCASE,Executable TEXT COLLATE NOCASE,Entrypoint TEXT,StartPage TEXT COLLATE NOCASE,ResourceGroup TEXT COLLATE NOCASE,LockScreenNotification INTEGER NOT NULL DEFAULT 0,LockScreenBadgeLogo TEXT COLLATE NOCASE,SplashScreenImage TEXT COLLATE NOCASE,SplashScreenBackgroundColor INTEGER NOT NULL DEFAULT 0,InitialRotationPreference INTEGER NOT NULL DEFAULT 0,ApplicationViewMinWidth INTEGER NOT NULL DEFAULT 0,AppListEntry INTEGER NOT NULL DEFAULT 0,EditionId TEXT COLLATE NOCASE,VisualGroup TEXT COLLATE NOCASE,Parameters TEXT COLLATE NOCASE,CurrentDirectoryPath TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID),FOREIGN KEY(Activation) REFERENCES Activation(_ActivationID));DROP TABLE IF EXISTS ApplicationBackgroundTask;CREATE TABLE ApplicationBackgroundTask(_BackgroundTaskID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Type TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,"Index" INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID));DROP TABLE IF EXISTS ApplicationContentUriRule;CREATE TABLE ApplicationContentUriRule(_ApplicationContentUriRuleID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,"Index" INTEGER NOT NULL,Uri TEXT NOT NULL COLLATE NOCASE,Type INTEGER NOT NULL,WindowsRuntimeAccess INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(Application) REFERENCES Application(_ApplicationID));DROP TABLE IF EXISTS ApplicationExtension;CREATE TABLE ApplicationExtension(_ApplicationExtensionID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,"Index" INTEGER NOT NULL,Category TEXT NOT NULL COLLATE NOCASE,Activation INTEGER NOT NULL DEFAULT 0,HostId TEXT COLLATE NOCASE,Executable TEXT COLLATE NOCASE,Entrypoint TEXT,RuntimeType TEXT COLLATE NOCASE,StartPage TEXT COLLATE NOCASE,ResourceGroup TEXT COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,Subsystem INTEGER NOT NULL DEFAULT 0,Parameters TEXT COLLATE NOCASE,CurrentDirectoryPath TEXT COLLATE NOCASE,Id TEXT COLLATE NOCASE,_LocalizedDictionary BLOB,_Dictionary BLOB,FOREIGN KEY(Application) REFERENCES Application(_ApplicationID),FOREIGN KEY(Activation) REFERENCES Activation(_ActivationID));DROP TABLE IF EXISTS ApplicationIdentity;CREATE TABLE ApplicationIdentity(_ApplicationIdentityID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,ApplicationUserModelId TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS ApplicationProperty;CREATE TABLE ApplicationProperty(_ApplicationPropertyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,"Index" INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Application) REFERENCES Application(_ApplicationID));DROP TABLE IF EXISTS ApplicationUser;CREATE TABLE ApplicationUser(_ApplicationUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,Application INTEGER NOT NULL,Package INTEGER NOT NULL,PackageUser INTEGER NOT NULL,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(ApplicationIdentity) REFERENCES ApplicationIdentity(_ApplicationIdentityID),FOREIGN KEY(Application) REFERENCES Application(_ApplicationID),FOREIGN KEY(Package) REFERENCES Package(_PackageID),FOREIGN KEY(PackageUser) REFERENCES PackageUser(_PackageUserID));DROP TABLE IF EXISTS AppxExtension;CREATE TABLE AppxExtension(_AppxExtensionID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,Package INTEGER NOT NULL,Category TEXT NOT NULL,KeyString TEXT,RegistrationInformation TEXT NOT NULL,ExtensionStatus INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS Bundle;CREATE TABLE Bundle(_BundleID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,UniqueLanguage TEXT COLLATE NOCASE,UniqueScale INTEGER NOT NULL,UniqueDXFeatureLevel INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS BundlePackage;CREATE TABLE BundlePackage(_BundlePackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Bundle INTEGER NOT NULL,PackageType INTEGER NOT NULL DEFAULT 0,Version INTEGER NOT NULL,Architecture INTEGER NOT NULL,ResourceId TEXT COLLATE NOCASE,Filename TEXT NOT NULL COLLATE NOCASE,"Offset" INTEGER NOT NULL,Size INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(Bundle) REFERENCES Bundle(_BundleID));DROP TABLE IF EXISTS BundleResource;CREATE TABLE BundleResource(_BundleResourceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,BundlePackage INTEGER NOT NULL,Language TEXT COLLATE NOCASE,Scale INTEGER NOT NULL,DXFeatureLevel INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(BundlePackage) REFERENCES BundlePackage(_BundlePackageID));DROP VIEW IF EXISTS CacheActivation;CREATE VIEW CacheActivation AS SELECT a._ActivationID AS _CacheActivationID,a.ActivationKey AS ActivationKey,a.Flags AS Flags,a.HostId AS HostId,a.Executable AS Executable,a.Entrypoint AS Entrypoint,a.RuntimeType AS RuntimeType,a.StartPage AS StartPage,a.ResourceGroup AS ResourceGroup FROM Activation AS a;DROP VIEW IF EXISTS CacheAppExtension;CREATE VIEW CacheAppExtension AS SELECT ae._AppExtensionID AS _CacheAppExtensionID,ae.Name AS Name,ae.Id AS Id,ae.PublicFolder AS PublicFolder,ae.DisplayName AS DisplayName,ae.Description AS Description,ae.Extension AS Extension,ae._Dictionary AS _Dictionary FROM AppExtension AS ae WHERE ae._WorkId=0;DROP VIEW IF EXISTS CacheAppUriHandler;CREATE VIEW CacheAppUriHandler AS SELECT auh._AppUriHandlerID AS _CacheAppUriHandlerID,auh.HostName AS HostName,auh.Path AS Path,auh.Extension AS Extension,auh.ProgID AS ProgID,auh.AppUriHandlerGroup AS AppUriHandlerGroup FROM AppUriHandler AS auh WHERE auh._WorkId=0;DROP VIEW IF EXISTS CacheAppUriHandlerGroup;CREATE VIEW CacheAppUriHandlerGroup AS SELECT auhg._AppUriHandlerGroupID AS _CacheAppUriHandlerGroupID,auhg.Name AS Name,auhg.Extension AS Extension FROM AppUriHandlerGroup AS auhg WHERE auhg._WorkId=0;DROP VIEW IF EXISTS CacheApplication;CREATE VIEW CacheApplication AS SELECT a._ApplicationID AS _CacheApplicationID,a.Package AS Package,a."Index" AS "Index",a.Flags & 0xFFFF | CASE WHEN a.Subsystem==1 THEN 0x00010000 ELSE 0 END As Flags,a.PackageRelativeApplicationId AS PackageRelativeApplicationId,a.ApplicationUserModelId AS ApplicationUserModelId,a.Activation AS Activation,a.HostId AS HostId,a.Parameters AS Parameters,a.CurrentDirectoryPath AS CurrentDirectoryPath,a.Executable AS Executable,a.Entrypoint AS Entrypoint,a.StartPage AS StartPage FROM Application AS a WHERE a._WorkId=0;DROP VIEW IF EXISTS CacheApplicationExtension;CREATE VIEW CacheApplicationExtension AS SELECT ae._ApplicationExtensionID AS _CacheApplicationExtensionID,ae.Application AS Application,ae."Index" AS "Index",ae.Flags AS Flags,ae.Category AS Category,ae.Activation AS Activation,ae.HostId AS HostId,ae.Parameters AS Parameters,ae.CurrentDirectoryPath AS CurrentDirectoryPath,ae._Dictionary AS _Dictionary FROM ApplicationExtension AS ae WHERE ae._WorkId=0;DROP VIEW IF EXISTS CacheApplicationUser;CREATE VIEW CacheApplicationUser AS SELECT au._ApplicationUserID AS _CacheApplicationUserID,au.User AS User,au.ApplicationIdentity AS ApplicationIdentity,au.Application AS Application,au.PackageUser AS PackageUser,ai.ApplicationUserModelId AS ApplicationUserModelId FROM ApplicationUser AS au INNER JOIN ApplicationIdentity AS ai ON ai._ApplicationIdentityID=au.ApplicationIdentity WHERE au._WorkId=0;DROP VIEW IF EXISTS CacheDependencyGraph;CREATE VIEW CacheDependencyGraph AS SELECT dg._DependencyGraphID AS _CacheDependencyGraphID,dg.User AS User,dg.DependentPackage AS DependentPackage,dg."Index" AS "Index",dg.SupplierPackage AS SupplierPackage,dg.DependencyType AS DependencyType FROM DependencyGraph AS dg WHERE DependencyType & 0xC /*0x4=OptionalPackageDependency 0x8=HostRuntimeDependency*/ != 0   AND dg._WorkId=0;DROP VIEW IF EXISTS CacheDynamicAppUriHandler;CREATE VIEW CacheDynamicAppUriHandler AS SELECT dauh._DynamicAppUriHandlerID AS _CacheDynamicAppUriHandlerID,dauh.DynamicAppUriHandlerGroup AS DynamicAppUriHandlerGroup,dauh.HostName AS HostName,dauh.Path AS Path,dauh.ProgID AS ProgID FROM DynamicAppUriHandler AS dauh;DROP VIEW IF EXISTS CacheDynamicAppUriHandlerGroup;CREATE VIEW CacheDynamicAppUriHandlerGroup AS SELECT dauhg._DynamicAppUriHandlerGroupID AS _CacheDynamicAppUriHandlerGroupID,dauhg.User AS User,dauhg.PackageFamily AS PackageFamily,dauhg.Name AS Name FROM DynamicAppUriHandlerGroup AS dauhg;DROP VIEW IF EXISTS CacheFileTypeAssociation;CREATE VIEW CacheFileTypeAssociation AS SELECT fta._FileTypeAssociationID AS _CacheFileTypeAssociationID,fta.Extension AS Extension,fta.FileType AS FileType,fta.ProgID AS ProgID FROM FileTypeAssociation AS fta WHERE fta._WorkId=0;DROP VIEW IF EXISTS CacheHostRuntime;CREATE VIEW CacheHostRuntime AS SELECT hr._HostRuntimeID AS _CacheHostRuntimeID,hr.HostId AS HostId,hr.PackageExtension AS PackageExtension FROM HostRuntime AS hr WHERE hr._WorkId=0;DROP VIEW IF EXISTS CachePackage;CREATE VIEW CachePackage AS SELECT p._PackageID AS _CachePackageID,p.PackageFullName AS PackageFullName,p.PackageFamily AS PackageFamily,p.PackageType AS PackageType,(p.Flags & 0xFEFFFFFF) | CASE WHEN p.SupportedUsers==2 THEN 0x01000000 ELSE 0 END AS Flags,p.Flags2 AS Flags2,p.PackageOrigin AS PackageOrigin,pl.Volume AS Volume,p.OSMaxVersionTested AS OSMaxVersionTested,pl.InstalledLocation AS InstalledLocation,pl.MutableLink AS MutableLink,pl.MutableLocation AS MutableLocation,IFNULL(tdf.Name, 0) AS TargetDeviceFamilyName FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID LEFT JOIN TargetDeviceFamily AS tdf ON tdf._TargetDeviceFamilyID=p.TargetDeviceFamily WHERE p._WorkId=0 AND pl._WorkId=0 AND tdf._WorkId=0;DROP VIEW IF EXISTS CachePackageExtension;CREATE VIEW CachePackageExtension AS SELECT pe._PackageExtensionID AS _CachePackageExtensionID,pe.Package AS Package,pe."Index" AS "Index",pe.Flags AS Flags,pe.Category AS Category,pe.Activation AS Activation,pe.HostId AS HostId,pe.Parameters AS Parameters,pe.CurrentDirectoryPath AS CurrentDirectoryPath FROM PackageExtension AS pe WHERE pe.Category NOT LIKE 'windows.activatableClass%' AND pe._WorkId=0;DROP VIEW IF EXISTS CachePackageExternalLocation;CREATE VIEW CachePackageExternalLocation AS SELECT pel._PackageExternalLocationID AS _CachePackageExternalLocationID,pel.User AS User,pel.Package AS Package,pel.Path AS Path FROM PackageExternalLocation AS pel WHERE pel._WorkId=0;DROP VIEW IF EXISTS CachePackageFamily;CREATE VIEW CachePackageFamily AS SELECT p._PackageFamilyID AS _CachePackageFamilyID,p.PackageFamilyName AS PackageFamilyName,p.PackageSID AS PackageSID,p.Publisher AS Publisher FROM PackageFamily AS p;DROP VIEW IF EXISTS CachePackageMachineStatus;CREATE VIEW CachePackageMachineStatus AS SELECT pms._PackageMachineStatusID AS _CachePackageMachineStatusID,pms.PackageIdentity AS PackageIdentity,pi.PackageFullName AS PackageFullName,pms.Status AS Status FROM PackageMachineStatus AS pms INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pms.PackageIdentity;DROP VIEW IF EXISTS CachePackageUser;CREATE VIEW CachePackageUser AS SELECT pu._PackageUserID AS _CachePackageUserID,pu.Package AS Package,pu.User AS User,pu.InstallTime AS InstallTime FROM PackageUser AS pu WHERE pu._WorkId=0;DROP VIEW IF EXISTS CachePackageUserStatus;CREATE VIEW CachePackageUserStatus AS SELECT pus._PackageUserStatusID AS _CachePackageUserStatusID,pus.User AS User,pus.PackageIdentity AS PackageIdentity,pi.PackageFullName AS PackageFullName,pus.Status AS Status FROM PackageUserStatus AS pus INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentity;DROP VIEW IF EXISTS CacheProtocol;CREATE VIEW CacheProtocol AS SELECT p._ProtocolID AS _CacheProtocolID,p.Extension AS Extension,p.ProtocolName AS Name,p.ProgID AS ProgID FROM Protocol AS p WHERE p._WorkId=0;DROP VIEW IF EXISTS CacheUser;CREATE VIEW CacheUser AS SELECT u._UserID AS _CacheUserID,u.UserSid AS UserSid FROM User AS u;DROP TABLE IF EXISTS ConnectedSet;CREATE TABLE ConnectedSet(_ConnectedSetID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,Name TEXT NOT NULL COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS ConnectedSetPackageFamily;CREATE TABLE ConnectedSetPackageFamily(_ConnectedSetPackageFamilyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,ConnectedSet INTEGER NOT NULL,PackageFamily INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(ConnectedSet) REFERENCES ConnectedSet(_ConnectedSetID),FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID));DROP TABLE IF EXISTS CustomInstallWork;CREATE TABLE CustomInstallWork(_CustomInstallWorkID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,Package INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,"Index" INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,File TEXT NOT NULL COLLATE NOCASE,Arguments TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS DefaultTile;CREATE TABLE DefaultTile(_DefaultTileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,UpdateRecurrence INTEGER NOT NULL DEFAULT 0,UpdateUriTemplate TEXT COLLATE NOCASE,ShowNameOnTiles INTEGER NOT NULL DEFAULT 0,ShortName TEXT COLLATE NOCASE,DefaultSize INTEGER NOT NULL DEFAULT 0,HoloContentChoice TEXT COLLATE NOCASE,MixedRealityModel TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Application) REFERENCES Application(_ApplicationID));DROP TABLE IF EXISTS Dependency;CREATE TABLE Dependency(_DependencyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,DependentPackage INTEGER NOT NULL,"Index" INTEGER NOT NULL,DependencyType INTEGER NOT NULL DEFAULT 2,Name TEXT NOT NULL COLLATE NOCASE,Publisher TEXT COLLATE NOCASE,MinVersion INTEGER NOT NULL,MaxVersion INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(DependentPackage) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS DependencyGraph;CREATE TABLE DependencyGraph(_DependencyGraphID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_ShadowId INTEGER NOT NULL DEFAULT 0,_IsMarkedForDeletion INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,DependentPackage INTEGER NOT NULL,"Index" INTEGER NOT NULL DEFAULT 0,SupplierPackage INTEGER NOT NULL,DependencyType INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(DependentPackage) REFERENCES Package(_PackageID),FOREIGN KEY(SupplierPackage) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS DeploymentHistory;CREATE TABLE DeploymentHistory(_DeploymentHistoryID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PackageIdentity INTEGER NOT NULL,User INTEGER NOT NULL,HResult INTEGER NOT NULL,WhenOccurred INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID),FOREIGN KEY(User) REFERENCES User(_UserID));DROP TABLE IF EXISTS DynamicAppUriHandler;CREATE TABLE DynamicAppUriHandler(_DynamicAppUriHandlerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,DynamicAppUriHandlerGroup INTEGER NOT NULL,HostName TEXT NOT NULL COLLATE NOCASE,Path TEXT COLLATE NOCASE,ProgID TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(DynamicAppUriHandlerGroup) REFERENCES DynamicAppUriHandlerGroup(_DynamicAppUriHandlerGroupID));DROP TABLE IF EXISTS DynamicAppUriHandlerGroup;CREATE TABLE DynamicAppUriHandlerGroup(_DynamicAppUriHandlerGroupID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,User INTEGER NOT NULL,PackageFamily INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID));DROP TABLE IF EXISTS EndOfLifePackage;CREATE TABLE EndOfLifePackage(_EndOfLifePackage INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamily INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID));DROP TABLE IF EXISTS Enterprise;CREATE TABLE Enterprise(_EnterpriseID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,EnterpriseId BLOB NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS FileTypeAssociation;CREATE TABLE FileTypeAssociation(_FileTypeAssociationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,FileType TEXT NOT NULL COLLATE NOCASE,ContentType TEXT COLLATE NOCASE,Extension INTEGER NOT NULL,"Index" INTEGER NOT NULL,ProgID TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID));DROP TABLE IF EXISTS HostRuntime;CREATE TABLE HostRuntime(_HostRuntimeID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,HostId TEXT NOT NULL COLLATE NOCASE,PackageExtension INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(PackageExtension) REFERENCES PackageExtension(_PackageExtensionID));DROP TABLE IF EXISTS MigratorPatch;CREATE TABLE MigratorPatch(_MigratorPatchID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PatchId TEXT NOT NULL COLLATE NOCASE,HResult INTEGER NOT NULL,StateRepositoryVersion INTEGER NOT NULL,"When" INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS MrtApplication;CREATE TABLE MrtApplication(_MrtApplicationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,DisplayNameReference TEXT NOT NULL,DescriptionReference TEXT NOT NULL,Square150x150LogoReference TEXT NOT NULL,Square44x44LogoReference TEXT NOT NULL,Wide310x150LogoReference TEXT,Square310x310LogoReference TEXT,Square71x71LogoReference TEXT,StartPageReference TEXT,SplashScreenImageReference TEXT,VisualGroupReference TEXT,_Dictionary BLOB,FOREIGN KEY(Application) REFERENCES Application(_ApplicationID));DROP TABLE IF EXISTS MrtDefaultTile;CREATE TABLE MrtDefaultTile(_MrtDefaultTileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,DefaultTile INTEGER NOT NULL,ShortNameReference TEXT NOT NULL,_Dictionary BLOB,FOREIGN KEY(DefaultTile) REFERENCES DefaultTile(_DefaultTileID));DROP TABLE IF EXISTS MrtPackage;CREATE TABLE MrtPackage(_MrtPackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,DisplayNameReference TEXT NOT NULL,PublisherDisplayNameReference TEXT NOT NULL,DescriptionReference TEXT,LogoReference TEXT NOT NULL,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS MrtSharedPri;CREATE TABLE MrtSharedPri(_MrtSharedPriID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Filename TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS MrtUserPri;CREATE TABLE MrtUserPri(_MrtUserPriID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,User INTEGER NOT NULL,Filename TEXT NOT NULL COLLATE NOCASE,MrtSharedPri INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID),FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(MrtSharedPri) REFERENCES MrtSharedPri(_MrtSharedPriID));DROP TABLE IF EXISTS NamedDependency;CREATE TABLE NamedDependency(_NamedDependncyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,DependencyType INTEGER NOT NULL,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,Version INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS OptionalBundle;CREATE TABLE OptionalBundle(_OptionalBundleID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,MainBundle INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,Publisher TEXT NOT NULL,Version INTEGER NOT NULL,Filename TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(MainBundle) REFERENCES Bundle(_BundleID));DROP TABLE IF EXISTS OptionalBundlePackage;CREATE TABLE OptionalBundlePackage(_OptionalBundlePackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,OptionalBundle INTEGER NOT NULL DEFAULT 0,PackageType INTEGER NOT NULL DEFAULT 0,Version INTEGER NOT NULL,Architecture INTEGER NOT NULL,ResourceId TEXT COLLATE NOCASE,Filename TEXT NOT NULL COLLATE NOCASE,"Offset" INTEGER NOT NULL,Size INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(OptionalBundle) REFERENCES OptionalBundle(_OptionalBundleID));DROP TABLE IF EXISTS OptionalBundleResource;CREATE TABLE OptionalBundleResource(_OptionalBundleResourceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,OptionalBundlePackage INTEGER NOT NULL,Language TEXT COLLATE NOCASE,Scale INTEGER NOT NULL,DXFeatureLevel INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(OptionalBundlePackage) REFERENCES OptionalBundlePackage(_OptionalBundlePackageID));DROP TABLE IF EXISTS Package;CREATE TABLE Package(_PackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PackageFamily INTEGER NOT NULL,ResourceId TEXT COLLATE NOCASE,Architecture INTEGER NOT NULL,Version INTEGER NOT NULL,PackageFullName TEXT NOT NULL COLLATE NOCASE,IsInbox INTEGER NOT NULL,PackageType INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,Flags2 INTEGER NOT NULL DEFAULT 0,DisplayName TEXT NOT NULL,PublisherDisplayName TEXT NOT NULL,Description TEXT,Logo TEXT NOT NULL COLLATE NOCASE,OSMinVersion INTEGER NOT NULL,OSMaxVersionTested INTEGER NOT NULL,TargetDeviceFamily INTEGER NOT NULL DEFAULT 0,Capabilities INTEGER NOT NULL,SupportedUsers INTEGER NOT NULL DEFAULT 0,SignatureOrigin INTEGER NOT NULL DEFAULT 0,PackageOrigin INTEGER NOT NULL DEFAULT 0,Enterprise INTEGER NOT NULL DEFAULT 0,SourceBundle INTEGER NOT NULL DEFAULT 0,EditionId TEXT COLLATE NOCASE,OSVersionWhenIndexed INTEGER NOT NULL DEFAULT 0,InPlaceUpdateBaseline INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID),FOREIGN KEY(Enterprise) REFERENCES Enterprise(_EnterpriseID));DROP TABLE IF EXISTS PackageDependency;CREATE TABLE PackageDependency(_PackageDependencyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageDependencyId TEXT NOT NULL COLLATE NOCASE,User INTEGER NOT NULL DEFAULT 0,PackageFamilyName TEXT NOT NULL COLLATE NOCASE,PackageFamily INTEGER NOT NULL,MinVersion INTEGER NOT NULL,Architectures INTEGER NOT NULL DEFAULT 0,LifetimeKind INTEGER NOT NULL DEFAULT 0,LifetimeArtifact TEXT COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID));DROP TABLE IF EXISTS PackageExtension;CREATE TABLE PackageExtension(_PackageExtensionID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Category TEXT NOT NULL COLLATE NOCASE,Activation INTEGER NOT NULL DEFAULT 0,HostId TEXT COLLATE NOCASE,Executable TEXT COLLATE NOCASE,Entrypoint TEXT,RuntimeType TEXT COLLATE NOCASE,StartPage TEXT COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,Parameters TEXT COLLATE NOCASE,CurrentDirectoryPath TEXT COLLATE NOCASE,Id TEXT COLLATE NOCASE,ResourceGroup TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID),FOREIGN KEY(Activation) REFERENCES Activation(_ActivationID));DROP TABLE IF EXISTS PackageExternalLocation;CREATE TABLE PackageExternalLocation(_PackageExternalLocationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,Package INTEGER NOT NULL,Path TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS PackageFamily;CREATE TABLE PackageFamily(_PackageFamilyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,Name TEXT NOT NULL COLLATE NOCASE,Publisher TEXT NOT NULL,PublisherId TEXT NOT NULL COLLATE NOCASE,PackageFamilyName TEXT NOT NULL COLLATE NOCASE,PackageSID BLOB NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS PackageFamilyPolicy;CREATE TABLE PackageFamilyPolicy(_PackageFamilyPolicyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL DEFAULT 0,PackageFamily INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,"Index" INTEGER NOT NULL,ValueString TEXT COLLATE NOCASE,ValueNumber INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID));DROP TABLE IF EXISTS PackageFamilyUser;CREATE TABLE PackageFamilyUser(_PackageFamilyUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamily INTEGER NOT NULL,User INTEGER NOT NULL,WhenInstalled INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID),FOREIGN KEY(User) REFERENCES User(_UserID));DROP TABLE IF EXISTS PackageFamilyUserResource;CREATE TABLE PackageFamilyUserResource(_PackageFamilyUserResourceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamilyUser INTEGER NOT NULL,ResourceId TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(PackageFamilyUser) REFERENCES PackageFamilyUser(_PackageFamilyUserID));DROP TABLE IF EXISTS PackageIdentity;CREATE TABLE PackageIdentity(_PackageIdentityID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamily INTEGER NOT NULL,PackageFullName TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID));DROP TABLE IF EXISTS PackageLocation;CREATE TABLE PackageLocation(_PackageLocationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Volume INTEGER NOT NULL,InstalledLocation TEXT NOT NULL COLLATE NOCASE,MutableLink TEXT COLLATE NOCASE,MutableLocation TEXT COLLATE NOCASE,ProjectionId TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS PackageMachineStatus;CREATE TABLE PackageMachineStatus(_PackageMachineStatusID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID));DROP TABLE IF EXISTS PackagePolicy;CREATE TABLE PackagePolicy(_PackagePolicyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,"Index" INTEGER NOT NULL,ValueString TEXT COLLATE NOCASE,ValueNumber INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS PackageProperty;CREATE TABLE PackageProperty(_PackagePropertyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS PackageSuperceded;CREATE TABLE PackageSuperceded(_PackageSupercededID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL,User INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID),FOREIGN KEY(User) REFERENCES User(_UserID));DROP TABLE IF EXISTS PackageUser;CREATE TABLE PackageUser(_PackageUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,User INTEGER NOT NULL,InstallTime INTEGER NOT NULL,OSVersionWhenInstalled INTEGER NOT NULL DEFAULT 0,WhenRestored INTEGER,IsExplicitlyInstalled INTEGER NOT NULL,DeploymentState INTEGER NOT NULL DEFAULT 0,AppDataVolume INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID),FOREIGN KEY(User) REFERENCES User(_UserID));DROP TABLE IF EXISTS PackageUserStatus;CREATE TABLE PackageUserStatus(_PackageUserStatusID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID),FOREIGN KEY(User) REFERENCES User(_UserID));DROP VIEW IF EXISTS PrimaryPreviewTileView;CREATE VIEW PrimaryPreviewTileView AS SELECT pt._PrimaryTileID AS _PrimaryTileID,pt._Revision AS _Revision,ptu._WorkId AS _WorkId,pt.Application AS Application,pt.Package AS Package,pt.Flags AS Flags,1 AS TileType,pt.TileTemplate AS TileTemplate,pt.TileId AS TileId,pt.Arguments AS Arguments,pt.EditionId AS EditionId,IFNULL(ptu._Dictionary, pt._Dictionary) AS _Dictionary,ptu._PrimaryTileUserID AS _PrimaryTileUserID,ptu._Revision AS _PrimaryTileUser_Revision,ptu._Created AS _Created,ptu._Modified AS _Modified,ptu.User AS User,ptu.ApplicationIdentity AS ApplicationIdentity,2 AS State,ptu.TileUniqueId AS TileUniqueId,ai.ApplicationUserModelId AS ApplicationUserModelId FROM PrimaryTileUser AS ptu INNER JOIN ApplicationIdentity AS ai ON ptu.ApplicationIdentity=ai._ApplicationIdentityID INNER JOIN Application AS a ON ai.ApplicationUserModelId=a.ApplicationUserModelId INNER JOIN Package AS p ON a.Package=p._PackageID INNER JOIN PrimaryTile AS pt ON pt.Package=p._PackageID AND pt.Application=a._ApplicationID WHERE ptu._WorkId=0 AND ptu._PrimaryTileUserID NOT IN (SELECT _PrimaryTileUserID FROM PrimaryTileUser AS ptu INNER JOIN PackageUser AS pu ON pu.User=ptu.User INNER JOIN ApplicationIdentity AS ai ON ai._ApplicationIdentityID=ptu.ApplicationIdentity INNER JOIN Application AS a ON a.ApplicationUserModelID=ai.ApplicationUserModelID WHERE pu.Package=a.Package)GROUP BY ptu.User, ptu.ApplicationIdentity, ptu._WorkId;DROP TABLE IF EXISTS PrimaryTile;CREATE TABLE PrimaryTile(_PrimaryTileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,TileTemplate INTEGER NOT NULL DEFAULT 0,TileId TEXT NOT NULL COLLATE NOCASE,Arguments TEXT COLLATE NOCASE,EditionId TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Application) REFERENCES Application(_ApplicationID),FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS PrimaryTileUser;CREATE TABLE PrimaryTileUser(_PrimaryTileUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_Created INTEGER NOT NULL DEFAULT 0,_Modified INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,State INTEGER NOT NULL DEFAULT 0,TileUniqueId BLOB NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(ApplicationIdentity) REFERENCES ApplicationIdentity(_ApplicationIdentityID));DROP VIEW IF EXISTS PrimaryTileUser_Add;CREATE VIEW PrimaryTileUser_Add AS SELECT _WorkId,_Created AS ChangeId,1 AS Disposition,TileUniqueId,User FROM PrimaryTileUser WHERE _Created>0;DROP VIEW IF EXISTS PrimaryTileUser_Update;CREATE VIEW PrimaryTileUser_Update AS SELECT _WorkId,_Modified AS ChangeId,2 AS Disposition,TileUniqueId,User FROM PrimaryTileUser WHERE _Modified>0;DROP VIEW IF EXISTS PrimaryTileUser_Delete;CREATE VIEW PrimaryTileUser_Delete AS SELECT 0 AS _WorkId,_Deleted AS ChangeId,3 AS Disposition,TileUniqueId,User FROM PrimaryTileUserChangelog WHERE _Deleted>0;DROP VIEW IF EXISTS PrimaryTileUser_AddNoUpdate;CREATE VIEW PrimaryTileUser_AddNoUpdate AS SELECT _WorkId,_Created AS ChangeId,1 AS Disposition,TileUniqueId,User FROM PrimaryTileUser WHERE _Created>0 AND _Modified<=0;DROP VIEW IF EXISTS PrimaryTileUserDataChange;CREATE VIEW PrimaryTileUserDataChange AS SELECT * FROM PrimaryTileUser_AddNoUpdate UNION ALL SELECT * FROM PrimaryTileUser_Update UNION ALL SELECT * FROM PrimaryTileUser_Delete;DROP TABLE IF EXISTS PrimaryTileUserChangelog;CREATE TABLE PrimaryTileUserChangelog(_PrimaryTileUserChangelogID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_Created INTEGER NOT NULL,_Deleted INTEGER NOT NULL,User INTEGER NOT NULL,TileUniqueId BLOB NOT NULL,WhenOccurred INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID));DROP VIEW IF EXISTS PrimaryTileView;CREATE VIEW PrimaryTileView AS SELECT pt._PrimaryTileID AS _PrimaryTileID,pt._Revision AS _Revision,ptu._WorkId AS _WorkId,pt.Application AS Application,pt.Package AS Package,pt.Flags AS Flags,1 AS TileType,pt.TileTemplate AS TileTemplate,pt.TileId AS TileId,pt.Arguments AS Arguments,pt.EditionId AS EditionId,IFNULL(ptu._Dictionary, pt._Dictionary) AS _Dictionary,ptu._PrimaryTileUserID AS _PrimaryTileUserID,ptu._Revision AS _PrimaryTileUser_Revision,ptu._Created AS _Created,ptu._Modified AS _Modified,ptu.User AS User,ptu.ApplicationIdentity AS ApplicationIdentity,1 AS State,ptu.TileUniqueId AS TileUniqueId,ai.ApplicationUserModelId AS ApplicationUserModelId FROM PrimaryTile AS pt INNER JOIN Application AS a ON (pt.Application=a._ApplicationID AND a._WorkId=0) INNER JOIN PackageUser AS pu ON (a.Package=pu.Package AND ptu.User=pu.User AND pu._WorkId=0) INNER JOIN ApplicationIdentity AS ai ON a.ApplicationUserModelId=ai.ApplicationUserModelId INNER JOIN PrimaryTileUser AS ptu ON (ptu.ApplicationIdentity=ai._ApplicationIdentityID AND ptu._WorkId=0) WHERE pt._WorkId=0;DROP TABLE IF EXISTS Protocol;CREATE TABLE Protocol(_ProtocolID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,ProtocolName TEXT NOT NULL COLLATE NOCASE,ReturnResults INTEGER NOT NULL DEFAULT 0,Extension INTEGER NOT NULL,"Index" INTEGER NOT NULL,ProgID TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Extension) REFERENCES ApplicationExtension(_ApplicationExtensionID));DROP TABLE IF EXISTS ProvisionedPackage;CREATE TABLE ProvisionedPackage(_ProvisionedPackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,Path TEXT NOT NULL COLLATE NOCASE,SignatureOrigin INTEGER NOT NULL DEFAULT 0,Region TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID));DROP TABLE IF EXISTS ProvisionedPackageDeleted;CREATE TABLE ProvisionedPackageDeleted(_ProvisionedPackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,Path TEXT NOT NULL COLLATE NOCASE,SignatureOrigin INTEGER NOT NULL DEFAULT 0,Region TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID));DROP TABLE IF EXISTS ProvisionedPackageExclude;CREATE TABLE ProvisionedPackageExclude(_ProvisionedPackageExcludeID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,User INTEGER NOT NULL,PackageFamily INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID));DROP TABLE IF EXISTS PublisherCacheFolder;CREATE TABLE PublisherCacheFolder(_PublisherCacheFolderID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PackageExtension INTEGER NOT NULL,"Index" INTEGER NOT NULL,FolderName TEXT COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(PackageExtension) REFERENCES PackageExtension(_PackageExtensionID));DROP TABLE IF EXISTS Resource;CREATE TABLE Resource(_ResourceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Language TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS SRHistory;CREATE TABLE SRHistory(_SRHistoryID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,"Action" INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,PackageIdentity INTEGER NOT NULL,User INTEGER NOT NULL,ActivityId BLOB,HResult INTEGER NOT NULL,WhenOccurred INTEGER NOT NULL,SequenceId INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID),FOREIGN KEY(User) REFERENCES User(_UserID));DROP TABLE IF EXISTS SRJournal;CREATE TABLE SRJournal(_SRJournalID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,ObjectType INTEGER NOT NULL DEFAULT 0,"Action" INTEGER NOT NULL DEFAULT 0,ObjectId INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL DEFAULT 0,PackageFamily INTEGER NOT NULL DEFAULT 0,PackageIdentity INTEGER NOT NULL DEFAULT 0,ApplicationIdentity INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL DEFAULT 0,PackageUser INTEGER NOT NULL DEFAULT 0,WhenOccurred INTEGER NOT NULL,SequenceId INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID),FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID),FOREIGN KEY(ApplicationIdentity) REFERENCES ApplicationIdentity(_ApplicationIdentityID),FOREIGN KEY(Application) REFERENCES Application(_ApplicationID),FOREIGN KEY(Package) REFERENCES Package(_PackageID),FOREIGN KEY(PackageUser) REFERENCES PackageUser(_PackageUserID));DROP TABLE IF EXISTS SRJournalArchive;CREATE TABLE SRJournalArchive(_SRJournalArchiveID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL,ObjectType INTEGER NOT NULL DEFAULT 0,"Action" INTEGER NOT NULL DEFAULT 0,ObjectId INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,PackageFamily INTEGER NOT NULL,PackageIdentity INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,Application INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL DEFAULT 0,PackageUser INTEGER NOT NULL DEFAULT 0,WhenOccurred INTEGER NOT NULL,SequenceId INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID),FOREIGN KEY(PackageIdentity) REFERENCES PackageIdentity(_PackageIdentityID),FOREIGN KEY(ApplicationIdentity) REFERENCES ApplicationIdentity(_ApplicationIdentityID),FOREIGN KEY(Application) REFERENCES Application(_ApplicationID),FOREIGN KEY(Package) REFERENCES Package(_PackageID),FOREIGN KEY(PackageUser) REFERENCES PackageUser(_PackageUserID));DROP TABLE IF EXISTS SecondaryTile;CREATE TABLE SecondaryTile(_SecondaryTileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,TileTemplate INTEGER NOT NULL DEFAULT 0,TileId TEXT NOT NULL COLLATE NOCASE,Arguments TEXT COLLATE NOCASE,EditionId TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS SecondaryTileUser;CREATE TABLE SecondaryTileUser(_SecondaryTileUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_Created INTEGER NOT NULL DEFAULT 0,_Modified INTEGER NOT NULL DEFAULT 0,SecondaryTile INTEGER NOT NULL,User INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,State INTEGER NOT NULL DEFAULT 0,TileUniqueId BLOB NOT NULL,_Dictionary BLOB,FOREIGN KEY(SecondaryTile) REFERENCES SecondaryTile(_SecondaryTileID),FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(ApplicationIdentity) REFERENCES ApplicationIdentity(_ApplicationIdentityID));DROP VIEW IF EXISTS SecondaryTileUser_Add;CREATE VIEW SecondaryTileUser_Add AS SELECT _WorkId,_Created AS ChangeId,1 AS Disposition,TileUniqueId,User FROM SecondaryTileUser WHERE _Created>0;DROP VIEW IF EXISTS SecondaryTileUser_Update;CREATE VIEW SecondaryTileUser_Update AS SELECT _WorkId,_Modified AS ChangeId,2 AS Disposition,TileUniqueId,User FROM SecondaryTileUser WHERE _Modified>0;DROP VIEW IF EXISTS SecondaryTileUser_Delete;CREATE VIEW SecondaryTileUser_Delete AS SELECT 0 AS _WorkId,_Deleted AS ChangeId,3 AS Disposition,TileUniqueId,User FROM SecondaryTileUserChangelog WHERE _Deleted>0;DROP VIEW IF EXISTS SecondaryTileUser_AddNoUpdate;CREATE VIEW SecondaryTileUser_AddNoUpdate AS SELECT _WorkId,_Created AS ChangeId,1 AS Disposition,TileUniqueId,User FROM SecondaryTileUser WHERE _Created>0 AND _Modified<=0;DROP VIEW IF EXISTS SecondaryTileUserDataChange;CREATE VIEW SecondaryTileUserDataChange AS SELECT * FROM SecondaryTileUser_AddNoUpdate UNION ALL SELECT * FROM SecondaryTileUser_Update UNION ALL SELECT * FROM SecondaryTileUser_Delete;DROP TABLE IF EXISTS SecondaryTileUserChangelog;CREATE TABLE SecondaryTileUserChangelog(_SecondaryTileUserChangelogID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_Created INTEGER NOT NULL,_Deleted INTEGER NOT NULL,User INTEGER NOT NULL,TileUniqueId BLOB NOT NULL,WhenOccurred INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID));DROP VIEW IF EXISTS SecondaryTileView;CREATE VIEW SecondaryTileView AS SELECT st._SecondaryTileID AS _SecondaryTileID,st._Revision AS _Revision,st._WorkId AS _WorkId,a._ApplicationID AS Application,a.Package AS Package,st.Flags AS Flags,2 AS TileType,st.TileTemplate AS TileTemplate,st.TileId AS TileId,st.Arguments AS Arguments,st.EditionId AS EditionId,IFNULL(stu._Dictionary, st._Dictionary) AS _Dictionary,stu._SecondaryTileUserID AS _SecondaryTileUserID,stu._Revision AS _SecondaryTileUser_Revision,stu._Created AS _Created,stu._Modified AS _Modified,stu.User AS User,stu.ApplicationIdentity AS ApplicationIdentity,1 AS State,stu.TileUniqueId AS TileUniqueId,ai.ApplicationUserModelId AS ApplicationUserModelId FROM SecondaryTile AS st INNER JOIN SecondaryTileUser AS stu ON (stu.SecondaryTile=st._SecondaryTileID AND stu._WorkId=0) INNER JOIN ApplicationIdentity AS ai ON stu.ApplicationIdentity=ai._ApplicationIdentityID INNER JOIN Application AS a ON (a.ApplicationUserModelId=ai.ApplicationUserModelId AND a._WorkId=0) INNER JOIN PackageUser AS pu ON (pu.Package=a.Package AND pu.User=stu.User AND pu._WorkId=0) WHERE st._WorkId=0 ORDER BY st._SecondaryTileID;DROP TABLE IF EXISTS Sequence;CREATE TABLE Sequence(_SequenceID INTEGER PRIMARY KEY NOT NULL,Id INTEGER NOT NULL,LastValue INTEGER NOT NULL);INSERT INTO Sequence (Id, LastValue) VALUES(1, 0);INSERT INTO Sequence (Id, LastValue) VALUES(2, 0);INSERT INTO Sequence (Id, LastValue) VALUES(3, 0);INSERT INTO Sequence (Id, LastValue) VALUES(4, 0);DROP TABLE IF EXISTS SharedPackageContainer;CREATE TABLE SharedPackageContainer(_SharedPackageContainerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Id TEXT NOT NULL COLLATE NOCASE,Name TEXT NOT NULL COLLATE NOCASE,User INTEGER NOT NULL,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID));DROP TABLE IF EXISTS SharedPackageContainerPackageFamily;CREATE TABLE SharedPackageContainerPackageFamily(_SharedPackageContainerPackageFamilyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,SharedPackageContainer INTEGER NOT NULL,PackageFamilyName TEXT NOT NULL COLLATE NOCASE,"Index" INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(SharedPackageContainer) REFERENCES SharedPackageContainer(_SharedPackageContainerID));DROP TABLE IF EXISTS TargetDeviceFamily;CREATE TABLE TargetDeviceFamily(_TargetDeviceFamilyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Name INTEGER NOT NULL,MinVersion INTEGER NOT NULL,MaxVersion INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP VIEW IF EXISTS TileView;CREATE VIEW TileView AS SELECT ptv._PrimaryTileID AS _TileViewID,ptv._Revision AS _Revision,ptv._WorkId AS _WorkId,ptv.Application AS Application,ptv.Package AS Package,ptv.Flags AS Flags,ptv.TileType AS TileType,ptv.TileTemplate AS TileTemplate,ptv.TileId AS TileId,ptv.Arguments AS Arguments,ptv.EditionId AS EditionId,ptv._Dictionary AS _Dictionary,ptv._PrimaryTileUserID AS _TileUserID,ptv._PrimaryTileUser_Revision AS _TileUser_Revision,ptv._Created AS _Created,ptv._Modified AS _Modified,ptv.User AS User,ptv.ApplicationIdentity AS ApplicationIdentity,ptv.State AS State,ptv.TileUniqueId AS TileUniqueId,ptv.ApplicationUserModelId AS ApplicationUserModelId FROM PrimaryTileView AS ptv UNION SELECT pptv._PrimaryTileID AS _TileViewID,pptv._Revision AS _Revision,pptv._WorkId AS _WorkId,pptv.Application AS Application,pptv.Package AS Package,pptv.Flags AS Flags,pptv.TileType AS TileType,pptv.TileTemplate AS TileTemplate,pptv.TileId AS TileId,pptv.Arguments AS Arguments,pptv.EditionId AS EditionId,pptv._Dictionary AS _Dictionary,pptv._PrimaryTileUserID AS _TileUserID,pptv._PrimaryTileUser_Revision AS _TileUser_Revision,pptv._Created AS _Created,pptv._Modified AS _Modified,pptv.User AS User,pptv.ApplicationIdentity AS ApplicationIdentity,pptv.State AS State,pptv.TileUniqueId AS TileUniqueId,pptv.ApplicationUserModelId AS ApplicationUserModelId FROM PrimaryPreviewTileView AS pptv UNION SELECT stv._SecondaryTileID AS _TileViewID,stv._Revision AS _Revision,stv._WorkId AS _WorkId,stv.Application AS Application,stv.Package AS Package,stv.Flags AS Flags,stv.TileType AS TileType,stv.TileTemplate AS TileTemplate,stv.TileId AS TileId,stv.Arguments AS Arguments,stv.EditionId AS EditionId,stv._Dictionary AS _Dictionary,stv._SecondaryTileUserID AS _TileUserID,stv._SecondaryTileUser_Revision AS _TileUser_Revision,stv._Created AS _Created,stv._Modified AS _Modified,stv.User AS User,stv.ApplicationIdentity AS ApplicationIdentity,stv.State AS State,stv.TileUniqueId AS TileUniqueId,stv.ApplicationUserModelId AS ApplicationUserModelId FROM SecondaryTileView AS stv;DROP VIEW IF EXISTS TileUserDataChange;CREATE VIEW TileUserDataChange AS SELECT * FROM PrimaryTileUserDataChange UNION ALL SELECT * FROM SecondaryTileUserDataChange;DROP TABLE IF EXISTS User;CREATE TABLE User(_UserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,UserSid BLOB NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS WorkInProgress;CREATE TABLE WorkInProgress(_WorkInProgressID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,"Key" TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS WowDependencyGraph;CREATE TABLE WowDependencyGraph(_WowDependencyGraphID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_ShadowId INTEGER NOT NULL DEFAULT 0,_IsMarkedForDeletion INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,DependentPackage INTEGER NOT NULL,"Index" INTEGER NOT NULL DEFAULT 0,SupplierPackage INTEGER NOT NULL,DependencyType INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(User) REFERENCES User(_UserID),FOREIGN KEY(DependentPackage) REFERENCES Package(_PackageID),FOREIGN KEY(SupplierPackage) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS XboxPackage;CREATE TABLE XboxPackage(_XboxPackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL DEFAULT 0,EditionId TEXT NOT NULL COLLATE NOCASE,BuildId BLOB NOT NULL,DeviceId BLOB NOT NULL,BuildVersion INTEGER NOT NULL,ContentId BLOB NOT NULL,ProductId BLOB NOT NULL,MediaId TEXT COLLATE NOCASE,PackageSize INTEGER NOT NULL DEFAULT 0,TitleId INTEGER DEFAULT 0,PrimaryServiceConfigId BLOB,EraVersion INTEGER NOT NULL DEFAULT 0,EscrowedKeyBlobId BLOB,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));
DROP TABLE IF EXISTS AppInstaller;CREATE TABLE AppInstaller(_AppInstallerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamily INTEGER NOT NULL DEFAULT 0,Uri TEXT NOT NULL COLLATE NOCASE,Version INTEGER NOT NULL,LastChecked INTEGER NOT NULL,CheckUpdateInterval INTEGER NOT NULL DEFAULT 1440,Flags INTEGER NOT NULL DEFAULT 2,PauseUntil INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID));DROP TABLE IF EXISTS AppInstallerUri;CREATE TABLE AppInstallerUri(_AppInstallerUriID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,AppInstaller INTEGER NOT NULL,UriType INTEGER NOT NULL DEFAULT 0,"Index" INTEGER NOT NULL,Uri TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB,FOREIGN KEY(AppInstaller) REFERENCES AppInstaller(_AppInstallerID));DROP TABLE IF EXISTS AppxManifest;CREATE TABLE AppxManifest(_AppxManifestID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Xml BLOB NOT NULL,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS AutoUpdatePackage;CREATE TABLE AutoUpdatePackage(_AutoUpdatePackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamily INTEGER NOT NULL,Architecture INTEGER NOT NULL,Version INTEGER NOT NULL,PackageType INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,Uri TEXT NOT NULL COLLATE NOCASE,AppInstaller INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(PackageFamily) REFERENCES PackageFamily(_PackageFamilyID),FOREIGN KEY(AppInstaller) REFERENCES AppInstaller(_AppInstallerID));DROP TABLE IF EXISTS ContentGroup;CREATE TABLE ContentGroup(_ContentGroupID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL DEFAULT 0,Name TEXT NOT NULL,ContentGroupType INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS ContentGroupFile;CREATE TABLE ContentGroupFile(_ContentGroupFileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,ContentGroup INTEGER NOT NULL,File INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(ContentGroup) REFERENCES ContentGroup(_ContentGroupID),FOREIGN KEY(File) REFERENCES File(_FileID));DROP TABLE IF EXISTS File;CREATE TABLE File(_FileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,RelativeFilePath TEXT NOT NULL COLLATE NOCASE,Size INTEGER NOT NULL,Digest BLOB,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));DROP TABLE IF EXISTS PackageAppInstaller;CREATE TABLE PackageAppInstaller(_PackageAppInstallerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,AppInstaller INTEGER NOT NULL,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID),FOREIGN KEY(AppInstaller) REFERENCES AppInstaller(_AppInstallerID));DROP TABLE IF EXISTS PackageSourceUri;CREATE TABLE PackageSourceUri(_PackageSourceUriID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Uri TEXT NOT NULL COLLATE NOCASE,Kind INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB,FOREIGN KEY(Package) REFERENCES Package(_PackageID));
DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Activation_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_Activation_SRJournal AFTER INSERT ON Activation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, WhenOccurred, SequenceId)SELECT 15, 1, NEW._ActivationID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_Activation_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_Activation_SRJournal AFTER UPDATE ON Activation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, WhenOccurred, SequenceId)SELECT 15, 2, NEW._ActivationID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_Activation_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_Activation_SRJournal BEFORE DELETE ON Activation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, WhenOccurred, SequenceId)SELECT 15, 3, OLD._ActivationID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_AppExtension_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_AppExtension_SRJournal AFTER INSERT ON AppExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 22, 1, NEW._AppExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_AppExtension_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_AppExtension_SRJournal AFTER UPDATE ON AppExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 22, 2, NEW._AppExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_AppExtension_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_AppExtension_SRJournal BEFORE DELETE ON AppExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 22, 3, OLD._AppExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_AppUriHandler_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_AppUriHandler_SRJournal AFTER INSERT ON AppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 9, 1, NEW._AppUriHandlerID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_AppUriHandler_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_AppUriHandler_SRJournal AFTER UPDATE ON AppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 9, 2, NEW._AppUriHandlerID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_AppUriHandler_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_AppUriHandler_SRJournal BEFORE DELETE ON AppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 9, 3, OLD._AppUriHandlerID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_AppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_AppUriHandlerGroup_SRJournal AFTER INSERT ON AppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 8, 1, NEW._AppUriHandlerGroupID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_AppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_AppUriHandlerGroup_SRJournal AFTER UPDATE ON AppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 8, 2, NEW._AppUriHandlerGroupID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_AppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_AppUriHandlerGroup_SRJournal BEFORE DELETE ON AppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 8, 3, OLD._AppUriHandlerGroupID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Application_ApplicationIdentity;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Application_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_Application_SRJournal AFTER INSERT ON Application FOR EACH ROW BEGIN INSERT OR IGNORE INTO ApplicationIdentity (ApplicationUserModelId) VALUES(NEW.ApplicationUserModelId);UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 3, 1, NEW._ApplicationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai WHERE is_srjournal_enabled()AND s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package AND ai.ApplicationUserModelId=NEW.ApplicationUserModelId;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_Application_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_Application_SRJournal AFTER UPDATE ON Application FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 3, 2, NEW._ApplicationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package AND ai.ApplicationUserModelId=NEW.ApplicationUserModelId;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_Application_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_Application_SRJournal BEFORE DELETE ON Application FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 3, 3, OLD._ApplicationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=OLD.Package AND ai.ApplicationUserModelId=OLD.ApplicationUserModelId;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_ApplicationExtension_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_ApplicationExtension_SRJournal AFTER INSERT ON ApplicationExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 7, 1, NEW._ApplicationExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW._ApplicationExtensionID;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_ApplicationExtension_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_ApplicationExtension_SRJournal AFTER UPDATE ON ApplicationExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 7, 2, NEW._ApplicationExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW._ApplicationExtensionID;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_ApplicationExtension_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_ApplicationExtension_SRJournal BEFORE DELETE ON ApplicationExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 7, 3, OLD._ApplicationExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD._ApplicationExtensionID;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_ApplicationUser_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_ApplicationUser_SRJournal AFTER INSERT ON ApplicationUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, ApplicationIdentity, Application, Package, PackageUser, WhenOccurred, SequenceId)SELECT workid(), 14, 1, NEW._ApplicationUserID, NEW.User, pi._PackageIdentityID, NEW.ApplicationIdentity, NEW.Application, NEW.Package, NEW.PackageUser, now(), s.LastValue FROM Sequence AS s CROSS JOIN Application AS a ON a._ApplicationID=NEW.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN ApplicationUser AS au ON au.Application=a._ApplicationID AND au.User=NEW.User INNER JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREUPDATE_ApplicationUser_SRJournal;CREATE TRIGGER TRG_BEFOREUPDATE_ApplicationUser_SRJournal BEFORE UPDATE ON ApplicationUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, ApplicationIdentity, Application, Package, PackageUser, WhenOccurred, SequenceId)SELECT workid(), 14, 2, NEW._ApplicationUserID, NEW.User, pi._PackageIdentityID, NEW.ApplicationIdentity, NEW.Application, NEW.Package, NEW.PackageUser, now(), s.LastValue FROM Sequence AS s CROSS JOIN Application AS a ON a._ApplicationID=NEW.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN ApplicationUser AS au ON au.Application=a._ApplicationID AND au.User=NEW.User INNER JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_ApplicationUser_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_ApplicationUser_SRJournal BEFORE DELETE ON ApplicationUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, ApplicationIdentity, Application, Package, PackageUser, WhenOccurred, SequenceId)SELECT workid(), 14, 3, OLD._ApplicationUserID, OLD.User, pi._PackageIdentityID, OLD.ApplicationIdentity, OLD.Application, OLD.Package, OLD.PackageUser, now(), s.LastValue FROM Sequence AS s CROSS JOIN Application AS a ON a._ApplicationID=OLD.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN ApplicationUser AS au ON au.Application=a._ApplicationID AND au.User=OLD.User INNER JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_DependencyGraph_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_DependencyGraph_SRJournal AFTER INSERT ON DependencyGraph FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 21, 1, NEW._DependencyGraphID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE s.Id=2 AND NEW.DependencyType & 0xC != 0 AND p._PackageID=NEW.DependentPackage AND pi.PackageFullName=p.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_DependencyGraph_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_DependencyGraph_SRJournal AFTER UPDATE ON DependencyGraph FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 21, 2, NEW._DependencyGraphID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE s.Id=2 AND NEW.DependencyType & 0xC != 0 AND p._PackageID=NEW.DependentPackage AND pi.PackageFullName=p.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_DependencyGraph_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_DependencyGraph_SRJournal BEFORE DELETE ON DependencyGraph FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 21, 3, OLD._DependencyGraphID, OLD.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE s.Id=2 AND OLD.DependencyType & 0xC != 0 AND p._PackageID=OLD.DependentPackage AND pi.PackageFullName=p.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_DynamicAppUriHandler_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_DynamicAppUriHandler_SRJournal AFTER INSERT ON DynamicAppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 11, 1, NEW._DynamicAppUriHandlerID, dauhg.User, dauhg.PackageFamily, now(), s.LastValue FROM Sequence AS s CROSS JOIN DynamicAppUriHandlerGroup AS dauhg WHERE s.Id=2 AND dauhg._DynamicAppUriHandlerGroupID=NEW.DynamicAppUriHandlerGroup;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_DynamicAppUriHandler_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_DynamicAppUriHandler_SRJournal AFTER UPDATE ON DynamicAppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 11, 2, NEW._DynamicAppUriHandlerID, dauhg.User, dauhg.PackageFamily, now(), s.LastValue FROM Sequence AS s CROSS JOIN DynamicAppUriHandlerGroup AS dauhg WHERE s.Id=2 AND dauhg._DynamicAppUriHandlerGroupID=NEW.DynamicAppUriHandlerGroup;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_DynamicAppUriHandler_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_DynamicAppUriHandler_SRJournal BEFORE DELETE ON DynamicAppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 11, 3, OLD._DynamicAppUriHandlerID, dauhg.User, dauhg.PackageFamily, now(), s.LastValue FROM Sequence AS s CROSS JOIN DynamicAppUriHandlerGroup AS dauhg WHERE s.Id=2 AND dauhg._DynamicAppUriHandlerGroupID=OLD.DynamicAppUriHandlerGroup;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_DynamicAppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_DynamicAppUriHandlerGroup_SRJournal AFTER INSERT ON DynamicAppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 10, 1, NEW._DynamicAppUriHandlerGroupID, NEW.User, NEW.PackageFamily, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_DynamicAppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_DynamicAppUriHandlerGroup_SRJournal AFTER UPDATE ON DynamicAppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 10, 2, NEW._DynamicAppUriHandlerGroupID, NEW.User, NEW.PackageFamily, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_DynamicAppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_DynamicAppUriHandlerGroup_SRJournal BEFORE DELETE ON DynamicAppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 10, 3, OLD._DynamicAppUriHandlerGroupID, OLD.User, OLD.PackageFamily, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;DELETE FROM DynamicAppUriHandler WHERE DynamicAppUriHandlerGroup=OLD._DynamicAppUriHandlerGroupID;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_FileTypeAssociation_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_FileTypeAssociation_SRJournal AFTER INSERT ON FileTypeAssociation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 19, 1, NEW._FileTypeAssociationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_FileTypeAssociation_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_FileTypeAssociation_SRJournal AFTER UPDATE ON FileTypeAssociation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 19, 2, NEW._FileTypeAssociationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_FileTypeAssociation_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_FileTypeAssociation_SRJournal BEFORE DELETE ON FileTypeAssociation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 19, 3, OLD._FileTypeAssociationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_HostRuntime_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_HostRuntime_SRJournal AFTER INSERT ON HostRuntime FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 18, 1, NEW._HostRuntimeID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN PackageExtension AS pe WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=pe.Package AND pe._PackageExtensionID=NEW.PackageExtension;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_HostRuntime_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_HostRuntime_SRJournal AFTER UPDATE ON HostRuntime FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 18, 2, NEW._HostRuntimeID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN PackageExtension AS pe WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=pe.Package AND pe._PackageExtensionID=NEW.PackageExtension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_HostRuntime_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_HostRuntime_SRJournal BEFORE DELETE ON HostRuntime FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 18, 3, OLD._HostRuntimeID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN PackageExtension AS pe WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=pe.Package AND pe._PackageExtensionID=OLD.PackageExtension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Package;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Package_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_Package_SRJournal AFTER INSERT ON Package FOR EACH ROW BEGIN INSERT OR IGNORE INTO PackageIdentity (PackageFamily, PackageFullName) VALUES(NEW.PackageFamily, NEW.PackageFullName);UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 1, 1, NEW._PackageID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi WHERE is_srjournal_enabled()AND s.Id=2 AND pi.PackageFullName=NEW.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_Package_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_Package_SRJournal AFTER UPDATE ON Package FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 1, 2, NEW._PackageID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi WHERE s.Id=2 AND pi.PackageFullName=NEW.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_Package_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_Package_SRJournal BEFORE DELETE ON Package FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 1, 3, OLD._PackageID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi WHERE s.Id=2 AND pi.PackageFullName=OLD.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageExtension_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageExtension_SRJournal AFTER INSERT ON PackageExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 6, 1, NEW._PackageExtensionID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_PackageExtension_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_PackageExtension_SRJournal AFTER UPDATE ON PackageExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 6, 2, NEW._PackageExtensionID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageExtension_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageExtension_SRJournal BEFORE DELETE ON PackageExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 6, 3, OLD._PackageExtensionID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=OLD.Package;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageExternalLocation_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageExternalLocation_SRJournal AFTER INSERT ON PackageExternalLocation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 17, 1, NEW._PackageExternalLocationID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_PackageExternalLocation_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_PackageExternalLocation_SRJournal AFTER UPDATE ON PackageExternalLocation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 17, 2, NEW._PackageExternalLocationID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageExternalLocation_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageExternalLocation_SRJournal BEFORE DELETE ON PackageExternalLocation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 17, 3, OLD._PackageExternalLocationID, OLD.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=OLD.Package;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageFamily_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageFamily_SRJournal AFTER INSERT ON PackageFamily FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageFamily, WhenOccurred, SequenceId)SELECT 5, 1, NEW._PackageFamilyID, NEW._PackageFamilyID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_PackageFamily_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_PackageFamily_SRJournal AFTER UPDATE ON PackageFamily FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageFamily, WhenOccurred, SequenceId)SELECT 5, 2, NEW._PackageFamilyID, NEW._PackageFamilyID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageFamily_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageFamily_SRJournal BEFORE DELETE ON PackageFamily FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageFamily, WhenOccurred, SequenceId)SELECT 5, 3, OLD._PackageFamilyID, OLD._PackageFamilyID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageMachineStatus;CREATE TRIGGER TRG_AFTERINSERT_PackageMachineStatus AFTER INSERT ON PackageMachineStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 12, 1, NEW._PackageMachineStatusID, NEW.PackageIdentity, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_PackageMachineStatus_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_PackageMachineStatus_SRJournal AFTER UPDATE ON PackageMachineStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 12, 2, NEW._PackageMachineStatusID, NEW.PackageIdentity, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageMachineStatus_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageMachineStatus_SRJournal BEFORE DELETE ON PackageMachineStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 12, 3, OLD._PackageMachineStatusID, OLD.PackageIdentity, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageUser_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageUser_SRJournal AFTER INSERT ON PackageUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 2, 1, NEW._PackageUserID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE s.Id=2 AND p._PackageID=NEW.Package AND pi.PackageFullName=p.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_PackageUser_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_PackageUser_SRJournal AFTER UPDATE ON PackageUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT workid(), 2, 2, NEW._PackageUserID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE s.Id=2 AND p._PackageID=NEW.Package AND pi.PackageFullName=p.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageUser_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageUser_SRJournal BEFORE DELETE ON PackageUser FOR EACH ROW BEGIN DELETE FROM ApplicationUser WHERE PackageUser=OLD._PackageUserID;UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, Package, WhenOccurred, SequenceId)SELECT workid(), 2, 3, OLD._PackageUserID, OLD.User, pi._PackageIdentityID, OLD.Package, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p ON p._PackageID=OLD.Package CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE is_srjournal_enabled()AND s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageUserStatus_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageUserStatus_SRJournal AFTER INSERT ON PackageUserStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageIdentity, User, WhenOccurred, SequenceId)SELECT 13, 1, NEW._PackageUserStatusID, NEW.PackageIdentity, NEW.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_PackageUserStatus_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_PackageUserStatus_SRJournal AFTER UPDATE ON PackageUserStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageIdentity, User, WhenOccurred, SequenceId)SELECT 13, 2, NEW._PackageUserStatusID, NEW.PackageIdentity, NEW.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageUserStatus_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageUserStatus_SRJournal BEFORE DELETE ON PackageUserStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, PackageIdentity, User, WhenOccurred, SequenceId)SELECT 13, 3, OLD._PackageUserStatusID, OLD.PackageIdentity, OLD.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Protocol_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_Protocol_SRJournal AFTER INSERT ON Protocol FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 20, 1, NEW._ProtocolID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_Protocol_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_Protocol_SRJournal AFTER UPDATE ON Protocol FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 20, 2, NEW._ProtocolID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_Protocol_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_Protocol_SRJournal BEFORE DELETE ON Protocol FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT workid(), 20, 3, OLD._ProtocolID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_User_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_User_SRJournal AFTER INSERT ON User FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 4, 1, NEW._UserID, NEW._UserID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERUPDATE_User_SRJournal;CREATE TRIGGER TRG_AFTERUPDATE_User_SRJournal AFTER UPDATE ON User FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 4, 2, NEW._UserID, NEW._UserID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_User_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_User_SRJournal BEFORE DELETE ON User FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 4, 3, OLD._UserID, OLD._UserID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;
dT[Rw1
DuplicateTokenEx
dUser
DWhX8
DYf#wC
DynamicAppUriHandler
DynamicAppUriHandler\Data
DynamicAppUriHandler\Data\
DynamicAppUriHandler\Index
DynamicAppUriHandler\Index\DynamicAppUriHandlerGroup
DynamicAppUriHandler\Index\HostName
DynamicAppUriHandler\Index\HostNameAndDynamicAppUriHandlerGroupAndPath
DynamicAppUriHandler\Index\ProgID
DynamicAppUriHandler\Index\ProgIDAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerGroup
DynamicAppUriHandlerGroup\Data
DynamicAppUriHandlerGroup\Data\
DynamicAppUriHandlerGroup\Index
DynamicAppUriHandlerGroup\Index\UserAndPackageFamilyAndName
DynamicAppUriHandlerGroupStatics::ActivateInstance
DynamicAppUriHandlerGroupStatics::Add
DynamicAppUriHandlerGroupStatics::ctor
DynamicAppUriHandlerGroupStatics::Delete
DynamicAppUriHandlerGroupStatics::DeleteByUserAndPackageFamilyAndName
DynamicAppUriHandlerGroupStatics::dtor
DynamicAppUriHandlerGroupStatics::Exists
DynamicAppUriHandlerGroupStatics::ExistsByUser
DynamicAppUriHandlerGroupStatics::ExistsByUserAndPackageFamily
DynamicAppUriHandlerGroupStatics::ExistsByUserAndPackageFamilyAndName
DynamicAppUriHandlerGroupStatics::Find
DynamicAppUriHandlerGroupStatics::FindByUser
DynamicAppUriHandlerGroupStatics::FindByUserAndPackageFamily
DynamicAppUriHandlerGroupStatics::ReplaceByUserAndPackageFamilyNameAndName
DynamicAppUriHandlerGroupStatics::TryGet
DynamicAppUriHandlerGroupStatics::TryGetByUserAndPackageFamilyAndName
DynamicAppUriHandlerGroupStatics::TryGetByUserAndPackageFamilyNameAndName
DynamicAppUriHandlerGroupStatics::Update
DynamicAppUriHandlerStatics::ActivateInstance
DynamicAppUriHandlerStatics::Add
DynamicAppUriHandlerStatics::ctor
DynamicAppUriHandlerStatics::Delete
DynamicAppUriHandlerStatics::DeleteByProgIDAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::dtor
DynamicAppUriHandlerStatics::Exists
DynamicAppUriHandlerStatics::ExistsByDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::ExistsByHostName
DynamicAppUriHandlerStatics::ExistsByHostNameAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::ExistsByProgID
DynamicAppUriHandlerStatics::ExistsByProgIDAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::Find
DynamicAppUriHandlerStatics::FindByDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::FindByHostName
DynamicAppUriHandlerStatics::FindByHostNameAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::FindByProgID
DynamicAppUriHandlerStatics::TryGet
DynamicAppUriHandlerStatics::TryGetByHostNameAndDynamicAppUriHandlerGroupAndPath
DynamicAppUriHandlerStatics::TryGetByProgIDAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::Update
DynamicDependencies
E SV3
E SVW
E!2T:
e#MNm
E$SV3
E\CV3
E\SVW
E^@RJ
E`SV3
E0f0p0z0
e4$AH
E4SV3
E4SVW
E8SV3
eAUserStatics::GetByUserSecurityIdentifier
ecO-<
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
Elapsed
ElapsedTime
ElapsedTimeMSec
empty distance tree with lengths
EncodePointer
EndOfLifePackage
EndOfLifePackageStatics::ActivateInstance
EndOfLifePackageStatics::ctor
EndOfLifePackageStatics::dtor
EndOfLifePackageStatics::Exists
EndOfLifePackageStatics::ExistsByPackageFamily
EndOfLifePackageStatics::Find
EndOfLifePackageStatics::TryGet
EndOfLifePackageStatics::TryGetByPackageFamily
endswith
EndsWith(*string*,suffix) error: Invalid type (%d)
EndsWith(string,*suffix*) error: Invalid type (%d)
EnterCriticalSection
Enterprise
EnterpriseStatics::ActivateInstance
EnterpriseStatics::ctor
EnterpriseStatics::dtor
EnterpriseStatics::Exists
EnterpriseStatics::ExistsByEnterpriseId
EnterpriseStatics::Find
EnterpriseStatics::Get
EnterpriseStatics::GetByEnterpriseId
EnterpriseStatics::TryGet
EnterpriseStatics::TryGetByEnterpriseId
EnterpriseUninstallBlockList
Entity
Entrypoint
en-US
EqualSid
Error
ErrorCode
ErrorCount
Et+/^
ETCVW
ETSVW
EventActivityIdControl
EventData
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
Exception
EXCLUSIVE
EXCVW
Executable
ExecutableName
execution_flags
ExecutionFlags
ExistsByUserAndPackageFullName
ExistsByUserSidAndPackageFullNameAndDeploymentState %ls
ExpandedSQL
ExpandedSQL=%hs
EXSVW
Extension
ExtensionAndName
ext-ms-onecore-appmodel-staterepository-cache-l1-1-0.dll
ext-ms-onecore-appmodel-staterepository-cache-l1-1-1.dll
ext-ms-onecore-appmodel-staterepository-cache-l1-1-3.dll
ext-ms-onecore-appmodel-staterepository-cache-l1-1-4.dll
ext-ms-onecore-appmodel-staterepository-internal-l1-1-3.dll
ext-ms-win-mrmcorer-resmanager-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usermgr-l1-2-0
EXTRA
eySPX
F(9^$u
F(PRW
f:P/@{
f;F*siW
f;wl[
f]hR7
f+G\fH
FailFast
FailFastBusySnapshot.StatementInProgress: #%u Index=%u Database=%p Statement=%p SQL=%s
FailFastBusySnapshot: Statements Total=%u Busy=%u Database=%p FirstBusySQL=%hs
Failure
failureCount
FailureCount
failureCount
failureId
failureType
FallbackError
Families
fg:SM
F'HKX
Field
Fields
file error
FileDescription
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
Filename:%s, SQL:%s, TxCallerId:%hs %ls
FileStatics::ActivateInstance
FileStatics::ctor
FileStatics::dtor
FileStatics::Exists
FileStatics::ExistsByDigest
FileStatics::ExistsByPackage
FileStatics::ExistsByPackageAndRelativeFilePath
FileStatics::Find
FileStatics::FindByDigest
FileStatics::FindByPackage
FileStatics::Get
FileStatics::GetByPackageAndRelativeFilePath
FileStatics::TryGet
FileStatics::TryGetByPackageAndRelativeFilePath
FileType
FileTypeAndExtension
FileTypeAssociation
FileTypeAssociation\Data
FileTypeAssociation\Data\
FileTypeAssociation\Index
FileTypeAssociation\Index\Extension
FileTypeAssociation\Index\FileType
FileTypeAssociation\Index\FileTypeAndExtension
FileTypeAssociation\Index\ProgID
FileTypeAssociationStatics::ActivateInstance
FileTypeAssociationStatics::ctor
FileTypeAssociationStatics::dtor
FileTypeAssociationStatics::Exists
FileTypeAssociationStatics::ExistsByContentType
FileTypeAssociationStatics::ExistsByContentTypeAndExtension
FileTypeAssociationStatics::ExistsByExtension
FileTypeAssociationStatics::ExistsByExtensionAndIndex
FileTypeAssociationStatics::ExistsByFileType
FileTypeAssociationStatics::ExistsByFileTypeAndExtension
FileTypeAssociationStatics::ExistsByProgID
FileTypeAssociationStatics::ExistsByProgIDAndExtension
FileTypeAssociationStatics::ExistsByUserAndContentType
FileTypeAssociationStatics::ExistsByUserAndFileType
FileTypeAssociationStatics::ExistsByUserOrDefaultAccountAndContentType
FileTypeAssociationStatics::ExistsByUserOrDefaultAccountAndContentTypeAndPackageFamilyName
FileTypeAssociationStatics::ExistsByUserOrDefaultAccountAndFileType
FileTypeAssociationStatics::ExistsByUserOrDefaultAccountAndFileTypeAndPackageFamilyName
FileTypeAssociationStatics::Find
FileTypeAssociationStatics::FindByContentType
FileTypeAssociationStatics::FindByContentTypeAndExtension
FileTypeAssociationStatics::FindByExtension
FileTypeAssociationStatics::FindByFileType
FileTypeAssociationStatics::FindByFileTypeAndExtension
FileTypeAssociationStatics::FindByProgID
FileTypeAssociationStatics::FindByProgIDAndExtension
FileTypeAssociationStatics::FindByUser
FileTypeAssociationStatics::FindByUserAndContentType
FileTypeAssociationStatics::FindByUserAndFileType
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndContentType
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndContentTypeAndPackageFamilyName
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndFileType
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndFileTypeAndPackageFamilyName
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndProgId
FileTypeAssociationStatics::Get
FileTypeAssociationStatics::GetByExtensionAndIndex
FileTypeAssociationStatics::TryGet
FileTypeAssociationStatics::TryGetByExtensionAndIndex
FileVersion
FirstBusySQL
FirstReportedUptime
FirstReportedWhen
FixAllCascadingInDeploymentPartition
FixAllCascadingInMachinePartition
FixCount
Flags
Flags2
Fle_n
FNApplicationStatics::FindByPackageFullName
FormatMessageW
Found
FoundSchemaVersion
FreeLibrary
FreeTransientObjectSecurityDescriptor
FSELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND a.ApplicationUserModelId=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
function
fVk|e
FZo3!
g)v7A
G,;A@
g,ZQakg&>
G@#w,
G]zY0
G<#WL
G<)_h)_d)_T
G<;w0
G0;A@
G0;A@t-
G0[0i0u0|0
GCChangelogs
GCChangelogsInterval
GCTimeToLiveExpired
GCTimeToLiveExpiredInterval
Gdf+Gh
GetAddress
GetApplicationUserModelIdFromToken
GetChanges() called but !db.IsOpen()
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetEffectivePackageStatusForUser
GetFileAttributesW
GetFileInformationByHandleEx
GetIdForPackageDependencyContext
GetLastError
GetLastInsertRowID() called but !db.IsOpen()
GetLengthSid
GetLocalTime
GetModuleFileNameA
GetModuleHandleExA
GetModuleHandleExW
GetModuleHandleW
GetPackageFamilyNameFromToken
GetPackageFullNameFromToken
GetPersistedRegistryLocationW
GetProcAddress
GetProcessHeap
GetProcessId
GetResolvedPackageFullName
GetSystemTime
GetSystemTimeAsFileTime
GetTempPath2W
GetTempPathW
GetTokenInformation
gINaM
Gl;OxwY
Global\StateRepository.PrimaryTileUserNotificationChannel.
Global\StateRepository.SecondaryTileUserNotificationChannel.
GlobalMemoryStatusEx
gmuIT
GXtm;Wxsh
hash_base32
hash_base32() doesn't support double (%d)
HashDigestLength
Hasher.GetDigestAsBase32(text) failed
Hasher.Start() failed
Hasher.Update(integer) failed
Hasher.Update(text) failed
HeapAlloc
HeapFree
hGoJ 
hH~C(n09
HKCR\
HKCU\
hKiDc
HKLM\
HostId
HostIdAndPackageExtension
HostName
HostNameAndDynamicAppUriHandlerGroupAndPath
HostNameAndExtensionAndPath
HostRuntime
HostRuntime\Data
HostRuntime\Data\
HostRuntime\Index
HostRuntime\Index\HostIdAndPackageExtension
HostRuntime\Index\PackageExtension
HostRuntimeStatics::ActivateInstance
HostRuntimeStatics::ctor
HostRuntimeStatics::dtor
HostRuntimeStatics::Exists
HostRuntimeStatics::ExistsByHostId
HostRuntimeStatics::ExistsByPackageExtension
HostRuntimeStatics::ExistsByPackageExtensionAndHostId
HostRuntimeStatics::Find
HostRuntimeStatics::FindByHostId
HostRuntimeStatics::FindByPackageExtension
HostRuntimeStatics::FindByUserOrDefaultAccountAndHostId
HostRuntimeStatics::GetByUserAndHostIdAndPackageFullName
HostRuntimeStatics::TryGet
HostRuntimeStatics::TryGetByPackageExtensionAndHostId
hresult
HResult
hresult
hv?2fp
hw^wj[sY
I?L{wag
I{4}c
I00PE
I0G1-0+
I2 xL
Id=%ls
IMv"R`5
incompatible version
incomplete distance tree
incomplete dynamic bit lengths tree
incomplete literal/length tree
incorrect data check
incorrect header check
Index
Information
InitializeCriticalSectionEx
InitializeSListHead
InitializeSRWLock
InitOnceBeginInitialize
InitOnceComplete
InitOnceExecuteOnce
INSERT INTO AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO ApplicationUser (_Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT 1, 0, pu.User, ai._ApplicationIdentityID, a._ApplicationID, pu.Package, pu._PackageUserID FROM PackageUser AS pu INNER JOIN Application AS a ON a.Package=pu.Package INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE pu._WorkId=0;
INSERT INTO ConnectedSet (_Revision, Name, Flags, Status, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO ConnectedSetPackageFamily (_Revision, ConnectedSet, PackageFamily, _Dictionary) VALUES(?,?,?,?);
INSERT INTO CustomInstallWork (_Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO DynamicAppUriHandler (_Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO DynamicAppUriHandlerGroup (_Revision, User, PackageFamily, Name, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s._Dictionary FROM Source.AppInstaller AS s;UPDATE main.PackageAppInstaller SET AppInstaller=(SELECT anew._AppInstallerID FROM main.PackageAppInstaller AS pnew INNER JOIN Source.PackageAppInstaller AS pold ON pnew._PackageAppInstallerID=pold._PackageAppInstallerID INNER JOIN Source.AppInstaller AS aold ON aold._AppInstallerID=pold.AppInstaller LEFT JOIN main.AppInstaller AS anew ON anew.Uri=aold.Uri WHERE main.PackageAppInstaller.AppInstaller=pold.AppInstaller);INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s.CheckUpdateInterval, s.Flags, s._Dictionary FROM Source.AppInstaller AS s;UPDATE main.PackageAppInstaller SET AppInstaller=(SELECT anew._AppInstallerID FROM main.PackageAppInstaller AS pnew INNER JOIN Source.PackageAppInstaller AS pold ON pnew._PackageAppInstallerID=pold._PackageAppInstallerID INNER JOIN Source.AppInstaller AS aold ON aold._AppInstallerID=pold.AppInstaller LEFT JOIN main.AppInstaller AS anew ON anew.Uri=aold.Uri WHERE main.PackageAppInstaller.AppInstaller=pold.AppInstaller);INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s._ContentGroupID, s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s._ContentGroupID, s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s._ContentGroupID, s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s._Dictionary FROM Source.AppInstaller AS s;UPDATE main.PackageAppInstaller SET AppInstaller=(SELECT anew._AppInstallerID FROM main.PackageAppInstaller AS pnew INNER JOIN Source.PackageAppInstaller AS pold ON pnew._PackageAppInstallerID=pold._PackageAppInstallerID INNER JOIN Source.AppInstaller AS aold ON aold._AppInstallerID=pold.AppInstaller LEFT JOIN main.AppInstaller AS anew ON anew.Uri=aold.Uri WHERE main.PackageAppInstaller.AppInstaller=pold.AppInstaller);INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, s.Xml, s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s._Dictionary FROM Source.AppInstaller AS s;UPDATE main.PackageAppInstaller SET AppInstaller=(SELECT anew._AppInstallerID FROM main.PackageAppInstaller AS pnew INNER JOIN Source.PackageAppInstaller AS pold ON pnew._PackageAppInstallerID=pold._PackageAppInstallerID INNER JOIN Source.AppInstaller AS aold ON aold._AppInstallerID=pold.AppInstaller LEFT JOIN main.AppInstaller AS anew ON anew.Uri=aold.Uri WHERE main.PackageAppInstaller.AppInstaller=pold.AppInstaller);INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, s.Xml, s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s.CheckUpdateInterval, s.Flags, s._Dictionary FROM Source.AppInstaller AS s;INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s.Flags, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, s.Xml, s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, PackageFamily, Uri, Version, LastChecked, CheckUpdateInterval, Flags, PauseUntil, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.PackageFamily, s.Uri, s.Version, s.LastChecked, s.CheckUpdateInterval, s.Flags, s.PauseUntil, s._Dictionary FROM Source.AppInstaller AS s;INSERT INTO main.AppInstallerUri (_AppInstallerUriID, _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary)SELECT s._AppInstallerUriID, s._Revision, s.AppInstaller, s.UriType, s."Index", s.Uri, s._Dictionary FROM Source.AppInstallerUri AS s;INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;INSERT INTO main.AutoUpdatePackage (_AutoUpdatePackageID, _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary)SELECT s._AutoUpdatePackageID, s._Revision, s.PackageFamily, s.Architecture, s.Version, s.PackageType, s.Flags, s.Uri, s.AppInstaller, s._Dictionary FROM Source.AutoUpdatePackage AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s.Flags, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, s.Xml, s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s.CheckUpdateInterval, s.Flags, s._Dictionary FROM Source.AppInstaller AS s;INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s.Flags, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, s.Xml, s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, PauseUntil, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s.CheckUpdateInterval, s.Flags, s.PauseUntil, s._Dictionary FROM Source.AppInstaller AS s;INSERT INTO main.AppInstallerUri (_AppInstallerUriID, _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary)SELECT s._AppInstallerUriID, s._Revision, s.AppInstaller, s.UriType, s."Index", s.Uri, s._Dictionary FROM Source.AppInstallerUri AS s;INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;INSERT INTO main.AutoUpdatePackage (_AutoUpdatePackageID, _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary)SELECT s._AutoUpdatePackageID, s._Revision, s.PackageFamily, s.Architecture, s.Version, s.PackageType, s.Flags, s.Uri, s.AppInstaller, s._Dictionary FROM Source.AutoUpdatePackage AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, PackageOrigin, Enterprise, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE (s.IsDevelopmentMode) WHEN 0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetPlatform, s.Capabilities, s.SupportedUsers, s.Origin, s.Enterprise, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary )SELECT s._TargetPlatformID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetPlatform AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.Package_User AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PolicyID, s._Revision, s._WorkId, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE WHEN s.IsDevelopmentMode=0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE WHEN s.IsDevelopmentMode=0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE WHEN s.IsDevelopmentMode=0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE WHEN s.IsDevelopmentMode=0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x80) WHERE Entrypoint IS NOT NULL AND (Flags & 0x04) == 0;UPDATE main.ApplicationExtension SET Flags=(Flags | 0x100) WHERE Entrypoint IS NOT NULL AND (Flags & 0x30) == 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x80) WHERE Entrypoint IS NOT NULL AND (Flags & 0x04) == 0;UPDATE main.ApplicationExtension SET Flags=(Flags | 0x100) WHERE Entrypoint IS NOT NULL AND (Flags & 0x30) == 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s.CurrentDirectoryPath, s._Dictionary FROM Source.Application AS s;INSERT INTO main.ApplicationUser (_ApplicationUserID, _Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT s._ApplicationUserID, s._Revision, s._WorkId, s.User, s.ApplicationIdentity, s.Application, s.Package, s.PackageUser FROM Source.ApplicationUser AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s.CurrentDirectoryPath, s.Id, s.ResourceGroup, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s.CurrentDirectoryPath, s.Id, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Path, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.Path, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.SharedPackageContainer (_SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary)SELECT s._SharedPackageContainerID, s._Revision, s._WorkId, s.Id, s.Name, s.User, s.Status, s._Dictionary FROM Source.SharedPackageContainer AS s;INSERT INTO main.SharedPackageContainerPackageFamily (_SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary)SELECT s._SharedPackageContainerPackageFamilyID, s._Revision, s._WorkId, s.SharedPackageContainer, s.PackageFamilyName, s."Index", s._Dictionary FROM Source.SharedPackageContainerPackageFamily AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s.CurrentDirectoryPath, s._Dictionary FROM Source.Application AS s;INSERT INTO main.ApplicationUser (_ApplicationUserID, _Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT s._ApplicationUserID, s._Revision, s._WorkId, s.User, s.ApplicationIdentity, s.Application, s.Package, s.PackageUser FROM Source.ApplicationUser AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s.CurrentDirectoryPath, s.Id, s.ResourceGroup, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s.CurrentDirectoryPath, s.Id, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Path, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.Path, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s.CurrentDirectoryPath, s._Dictionary FROM Source.Application AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s.CurrentDirectoryPath, s.Id, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s.CurrentDirectoryPath, s.Id, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s.CurrentDirectoryPath, s._Dictionary FROM Source.Application AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s.CurrentDirectoryPath, s.Id, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s.CurrentDirectoryPath, s.Id, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Path, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.Path, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s.ProjectionId, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s.CurrentDirectoryPath, s._Dictionary FROM Source.Application AS s;INSERT INTO main.ApplicationUser (_ApplicationUserID, _Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT s._ApplicationUserID, s._Revision, s._WorkId, s.User, s.ApplicationIdentity, s.Application, s.Package, s.PackageUser FROM Source.ApplicationUser AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s.CurrentDirectoryPath, s.Id, s.ResourceGroup, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s.CurrentDirectoryPath, s.Id, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Path, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.Path, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT INTO main.PackageDependency (_PackageDependencyID, _Revision, PackageDependencyId, User, PackageFamilyName, PackageFamily, MinVersion, Architectures, LifetimeKind, LifetimeArtifact, Flags, _Dictionary)SELECT s._PackageDependencyID, s._Revision, s.PackageDependencyId, s.User, s.PackageFamilyName, s.PackageFamily, s.MinVersion, s.Architectures, s.LifetimeKind, s.LifetimeArtifact, s.Flags, s._Dictionary FROM Source.PackageDependency AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.SharedPackageContainer (_SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary)SELECT s._SharedPackageContainerID, s._Revision, s._WorkId, s.Id, s.Name, s.User, s.Status, s._Dictionary FROM Source.SharedPackageContainer AS s;INSERT INTO main.SharedPackageContainerPackageFamily (_SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary)SELECT s._SharedPackageContainerPackageFamilyID, s._Revision, s._WorkId, s.SharedPackageContainer, s.PackageFamilyName, s."Index", s._Dictionary FROM Source.SharedPackageContainerPackageFamily AS s;INSERT INTO main.SRHistory (_Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary)SELECT s._Revision, s._WorkId, s."Action", s.Flags, s.PackageIdentity, s.User, s.ActivityId, s.HResult, s.WhenOccurred, s.SequenceId, s._Dictionary FROM Source.SRHistory AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s.ProjectionId, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s.CurrentDirectoryPath, s._Dictionary FROM Source.Application AS s;INSERT INTO main.ApplicationUser (_ApplicationUserID, _Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT s._ApplicationUserID, s._Revision, s._WorkId, s.User, s.ApplicationIdentity, s.Application, s.Package, s.PackageUser FROM Source.ApplicationUser AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s.CurrentDirectoryPath, s.Id, s.ResourceGroup, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s.CurrentDirectoryPath, s.Id, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Path, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.Path, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.SharedPackageContainer (_SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary)SELECT s._SharedPackageContainerID, s._Revision, s._WorkId, s.Id, s.Name, s.User, s.Status, s._Dictionary FROM Source.SharedPackageContainer AS s;INSERT INTO main.SharedPackageContainerPackageFamily (_SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary)SELECT s._SharedPackageContainerPackageFamilyID, s._Revision, s._WorkId, s.SharedPackageContainer, s.PackageFamilyName, s."Index", s._Dictionary FROM Source.SharedPackageContainerPackageFamily AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s.ProjectionId, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s.CurrentDirectoryPath, s._Dictionary FROM Source.Application AS s;INSERT INTO main.ApplicationUser (_ApplicationUserID, _Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT s._ApplicationUserID, s._Revision, s._WorkId, s.User, s.ApplicationIdentity, s.Application, s.Package, s.PackageUser FROM Source.ApplicationUser AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s.CurrentDirectoryPath, s.Id, s.ResourceGroup, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s.CurrentDirectoryPath, s.Id, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Path, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.Path, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.SharedPackageContainer (_SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary)SELECT s._SharedPackageContainerID, s._Revision, s._WorkId, s.Id, s.Name, s.User, s.Status, s._Dictionary FROM Source.SharedPackageContainer AS s;INSERT INTO main.SharedPackageContainerPackageFamily (_SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary)SELECT s._SharedPackageContainerPackageFamilyID, s._Revision, s._WorkId, s.SharedPackageContainer, s.PackageFamilyName, s."Index", s._Dictionary FROM Source.SharedPackageContainerPackageFamily AS s;INSERT INTO main.SRHistory (_Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary)SELECT s._Revision, s._WorkId, s."Action", s.Flags, s.PackageIdentity, s.User, s.ActivityId, s.HResult, s.WhenOccurred, s.SequenceId, s._Dictionary FROM Source.SRHistory AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x80) WHERE Entrypoint IS NOT NULL AND (Flags & 0x04) == 0;UPDATE main.ApplicationExtension SET Flags=(Flags | 0x100) WHERE Entrypoint IS NOT NULL AND (Flags & 0x30) == 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary)SELECT s._Revision, s.User, s.ApplicationIdentity, saea.Alias, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s INNER JOIN Source.ApplicationIdentity AS sai ON sai._ApplicationIdentityID=s.ApplicationIdentity INNER JOIN Source.Application AS sa ON sa.ApplicationUserModelId=sai.ApplicationUserModelId INNER JOIN Source.PackageUser AS spu ON spu.Package=sa.Package AND spu.User=s.User INNER JOIN Source.ApplicationExtension AS sae ON sae.Application=sa._ApplicationId INNER JOIN Source.AppExecutionAlias AS saea ON saea.Extension=sae._ApplicationExtensionID;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, (1 << (s.DependencyType - 1)), s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO PackageDependency (_Revision, PackageDependencyId, User, PackageFamilyName, PackageFamily, MinVersion, Architectures, LifetimeKind, LifetimeArtifact, Flags, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO PackageFamilyPolicy (_Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO PackageFamilyUserResource (_Revision, PackageFamilyUser, ResourceId, _Dictionary) VALUES(?,?,?,?);
INSERT INTO PackageIdentity (_Revision, PackageFamily, PackageFullName, _Dictionary) VALUES(?,?,?,?);
INSERT INTO PackagePolicy (_Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO PackageUser(_Revision, _WorkId, Package, User, InstallTime, IsExplicitlyInstalled, DeploymentState, AppDataVolume)SELECT 1, 0, _PackageID, (SELECT _UserID FROM User WHERE UserSid=X'010100000000000512000000'), now(), 1, 1, 0 FROM Package WHERE _PackageID NOT IN (SELECT Package FROM PackageUser) AND PackageOrigin=2;
INSERT INTO PackageUser(_Revision, _WorkId, Package, User, InstallTime, IsExplicitlyInstalled, DeploymentState, AppDataVolume)SELECT 1, 0, _PackageID, (SELECT _UserID FROM User WHERE UserSid=X'010100000000000512000000'), now(), 1, 6, 0 FROM Package WHERE _PackageID NOT IN (SELECT Package FROM PackageUser) AND PackageOrigin<>2;
INSERT INTO PackageUserStatus (_Revision, PackageIdentity, User, Status, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO PrimaryTileUser (_Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO SecondaryTile (_Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO SecondaryTileUser (_Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?);
INSERT INTO Sequence (Id, LastValue) VALUES(?,?);
INSERT INTO SRHistory (_Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO User (_Revision, UserSid, _Dictionary) VALUES(?,?,?);
INSERT INTO XboxPackage (_Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT OR IGNORE INTO User(_Revision, UserSid, _Dictionary)VALUES(1, X'010100000000000512000000', NULL);
InstalledLocation
InstallTime
insufficient memory
InternalName
invalid bit length repeat
invalid block type
invalid distance code
Invalid LifetimeArtifact.RegistryPath=%ls
invalid literal/length code
invalid stored block lengths
invalid window size
Io=aW\
IoPriority
is_srjournal_enabled
is_triggers_enabled
IsDebuggerPresent
Isi]7
IsInAutoCommitMode() called but !db.IsOpen()
IsProcessorFeaturePresent
Issue
IsValidSid
IsWellKnownSid
iYB8+
j!SSV
j#j$3
j&j'3
J)'5^
j::O/
j\YQP
J>f;O
-J6(-Y3
Journal.id=%I64d ObjectType=%d Action=%d ObjectId=%I64d
journal_mode
journal_size_limit
jUb5i6
'jwvs
jyv;c
K)^D~W2M
K|"62S$
K2mI=\@
kernelbase.dll
KEYWp
Ky?u?2#
L!{lD
L$ QP
L$ QPVj
L$ Sh
L$ Sh 
L$ ShH
L$ Shx
L$ VW
L$ VWj
L$$;t$
L$$SV
L$$SVW
L$$t1
L$(SV
L$(VW
L$,^3
L$,PRV
L$,SV
L$,SVW3
L$@QP
L$@uV
L$|_^[3
L$<PR
L$0PR
L$0uS
L$4^3
L$4PR
L$4SV
L$8+D$<
L$D_^[3
L$DPRV
L$hF;
L$HG;
L$hPR
L$HSB
L$L_^[3
L$lPR
L$t^3
L$T_^[3
L$tPR
L$tt!S
l),O7GW;
L0[0g0
L9]$u
LastChangeId
LastKnownStatus
lE.L]>1
LeaveCriticalSection
LegalCopyright
LifetimeArtifact
LifetimeArtifact expired: %ls
LifetimeKind
lineNumber
LineNumber
lineNumber
Lmfon
LNI3R
LoadLibraryExW
Local AppData
Local\SM0:%lu:%lu:%hs
LocalAlloc
LocalFree
locking_mode
Log(*error*,message) error: Invalid type for error (%d)
Log(error,*message*) error: Invalid type for message (%d)
LogHr
LogNt
LogStagedFeatureUsage
LookasideHitPeak
LookasideMissFullPeak
LookasideMissSizePeak
LookasideUsed
LookasideUsedPeak
LookupAccountSidW
lRX#y
LsaLookupClose
LsaLookupFreeMemory
LsaLookupGetDomainInfo
LsaLookupOpenLocalPolicy
Lwe:-
m<&8cx
M>Ygc
M0K0I
Machine
MachineDatabase
MachineDatabase_Pages
MachineDatabase_PagesCheckpointed
MachineDatabaseAutoCheckpoint
MachineDatabaseCacheSize
MachineDatabaseCheckpointThreshold
MachineDatabaseFileChunkSize
MachineDatabaseJournalSizeLimit
MachineDatabaseOptions
MachineDatabasePageSize
MachineDatabaseSize_After
MachineDatabaseSize_Before
MachineDatabaseStatisticsLastUpdated
MachineDisposition
MachineJournalSize_After
MachineJournalSize_Before
MachineSize_After
MachineSize_Before
MainBundle
MaintenanceInterval
MaintenanceLastPerformed
MaintenanceMaxClockDelta
MaintenancePerformed
MallocCount
MallocCountPeak
MallocSizePeak
MbctK
memcmp
memcpy
memmove
memmove_s
MEMORY
MemoryPriority
MemoryUsed
MemoryUsedPeak
memset
message
Message
message
Message
message
Method
Mi8qTylC
Microsoft
Microsoft Corporation
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1.0,
Microsoft Corporation1-0+
Microsoft Corporation1200
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft Windows0
Microsoft.Windows.StateRepository.Client
Microsoft.Windows.StateRepository.Core
Microsoft.Windows.StateRepository.Service
MicrosoftTelemetryAssertTriggeredUM
Microsoft-Windows-StateRepository
Microsoft-Windows-StateRepository/Debug
Microsoft-Windows-StateRepository/Diagnostic
Microsoft-Windows-StateRepository/Operational
Microsoft-Windows-StateRepository/Restricted
Migrate
MigratorErrors
MigratorPatch
MigratorPatchStatics::ActivateInstance
MigratorPatchStatics::ctor
MigratorPatchStatics::dtor
MigratorPatchStatics::Exists
MigratorPatchStatics::ExistsByPatchId
MigratorPatchStatics::Find
MigratorPatchStatics::FindByPatchId
MigratorPatchStatics::Get
MigratorPatchStatics::TryGet
minATL$__a
minATL$__m
minATL$__r
minATL$__z
MinVersion
module
MoveFileExW
Mq6}F
MrtApplication
MrtApplicationStatics::ActivateInstance
MrtApplicationStatics::ctor
MrtApplicationStatics::dtor
MrtApplicationStatics::Exists
MrtApplicationStatics::ExistsByApplication
MrtApplicationStatics::Find
MrtApplicationStatics::Get
MrtApplicationStatics::GetByApplication
MrtApplicationStatics::TryGet
MrtApplicationStatics::TryGetByApplication
MrtDefaultTile
MrtDefaultTileStatics::ActivateInstance
MrtDefaultTileStatics::ctor
MrtDefaultTileStatics::dtor
MrtDefaultTileStatics::Exists
MrtDefaultTileStatics::ExistsByDefaultTile
MrtDefaultTileStatics::Find
MrtDefaultTileStatics::Get
MrtDefaultTileStatics::GetByDefaultTile
MrtDefaultTileStatics::TryGet
MrtDefaultTileStatics::TryGetByDefaultTile
MrtPackage
MrtPackageStatics::ActivateInstance
MrtPackageStatics::ctor
MrtPackageStatics::dtor
MrtPackageStatics::Exists
MrtPackageStatics::ExistsByPackage
MrtPackageStatics::Find
MrtPackageStatics::Get
MrtPackageStatics::GetByPackage
MrtPackageStatics::TryGet
MrtPackageStatics::TryGetByPackage
MrtSharedPri
MrtSharedPriStatics::ActivateInstance
MrtSharedPriStatics::ctor
MrtSharedPriStatics::dtor
MrtSharedPriStatics::Exists
MrtSharedPriStatics::ExistsByFilename
MrtSharedPriStatics::ExistsByPackage
MrtSharedPriStatics::Find
MrtSharedPriStatics::FindByPackage
MrtSharedPriStatics::Get
MrtSharedPriStatics::GetByFilename
MrtSharedPriStatics::TryGet
MrtSharedPriStatics::TryGetByFilename
MrtUserPri
MrtUserPriStatics::ActivateInstance
MrtUserPriStatics::ctor
MrtUserPriStatics::dtor
MrtUserPriStatics::Exists
MrtUserPriStatics::ExistsByMrtSharedPri
MrtUserPriStatics::ExistsByPackage
MrtUserPriStatics::ExistsByPackageAndUser
MrtUserPriStatics::ExistsByUser
MrtUserPriStatics::Find
MrtUserPriStatics::FindByMrtSharedPri
MrtUserPriStatics::FindByPackage
MrtUserPriStatics::FindByUser
MrtUserPriStatics::Get
MrtUserPriStatics::GetByPackageAndUser
MrtUserPriStatics::TryGet
MrtUserPriStatics::TryGetByPackageAndUser
ms:CriticalData
ms:Measures
ms:ReservedKeyword44
ms:Telemetry
Msg:[%ws] 
MultiByteToWideChar
MutableLink
MutableLocation
n&Tgc
n(\lYC:
N0L0J
N4a4v4
NameAndExtension
NamedDependency
NamedDependencyStatics::ActivateInstance
NamedDependencyStatics::ctor
NamedDependencyStatics::dtor
NamedDependencyStatics::Exists
NamedDependencyStatics::ExistsByPackage
NamedDependencyStatics::ExistsByPackageAndDependencyType
NamedDependencyStatics::ExistsByPackageAndDependencyTypeAndIndex
NamedDependencyStatics::Find
NamedDependencyStatics::FindByPackage
NamedDependencyStatics::FindByPackageAndDependencyType
NamedDependencyStatics::TryGet
NamedDependencyStatics::TryGetByPackageAndDependencyTypeAndIndex
ncalrpc
NdrServerCall2
need dictionary
NewSchemaVersion
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
NORMAL
NotifyServiceStatusChangeW
npqb!
NtAccessCheck
ntdll.dll
NtQueryInformationFile
NtQueryInformationProcess
NtQueryInformationThread
NtQueryInformationToken
NtQueryWnfStateData
NtSetInformationThread
NtUpdateWnfStateData
NumberOfPagesCheckpointed
nVN/X
O!~qCQ
O:BAG:BAD:(A;;0x1;;;SY)(A;;0x1;;;BA)(A;;0x1;;;LS)
O:BAG:BAD:(A;;0x111FFFFF;;;SY)(A;;0x111FFFFF;;;BA)(XA;;0x111FFFFF;;;AU;(!(WIN://ISMULTISESSIONSKU)))(XA;;0x111FFFFF;;;S-1-15-3-1024-1572800732-1164253991-2733652370-1720403341-3570188209-547973490-1048710288-340345592;(!(WIN://ISMULTISESSIONSKU)))
o]0_6%m
O08D1
O0M0K
O0Y0k0
objectId
ObjectLength
objectType
onecore\base\appmodel\common\appxuninstallblocklist.cpp
onecore\base\appmodel\common\base32encoding.cpp
onecore\base\appmodel\common\bytebuffer.cpp
onecore\base\appmodel\common\cryptoprovider.cpp
onecore\base\appmodel\common\pathhelpers.cpp
onecore\base\appmodel\common\registrykey.cpp
onecore\base\appmodel\common\sidhelper.cpp
onecore\base\appmodel\common\stateseparation.cpp
onecore\base\appmodel\common\stringbuilder.cpp
onecore\base\appmodel\common\userprofile.cpp
onecore\base\appmodel\common\widestring.cpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Context.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-Activation.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-AppExtension.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-Application.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-ApplicationExtension.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-ApplicationUser.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-AppUriHandler.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-AppUriHandlerGroup.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-DependencyGraph.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-DynamicAppUriHandler.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-DynamicAppUriHandlerGroup.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-FileTypeAssociation.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-HostRuntime.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-Package.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageExtension.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageExternalLocation.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageFamily.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageMachineStatus.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageUser.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageUserStatus.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-Protocol.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-User.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Key.hpp
onecore\base\appmodel\StateRepository\cache\inc\SRCache-Manager.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Manager.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-MultiKey.hpp
onecore\base\appmodel\StateRepository\common\inc\Security.hpp
onecore\base\appmodel\StateRepository\Common\Inc\Security.hpp
onecore\base\appmodel\StateRepository\common\inc\ServiceControl.hpp
onecore\base\appmodel\StateRepository\common\inc\SRwil.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\blob.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\cachemanagement.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\changetracking.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\database.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Database.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\databasecache.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\DatabaseCache.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\databasecachesingleton.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\datatype-hasher.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\datatype-progid.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionarywinrtreader.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionarywriter.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entities-partitions.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-activation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionalias.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionalias-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionaliasuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextensionhost.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextensionhost-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstaller.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstalleruri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-application.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationbackgroundtask.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationbackgroundtask-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationcontenturirule.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationcontenturirule-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-application-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationidentity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationproperty.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationproperty-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appservice.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appservice-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandler-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlergroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlerlauncherinfo.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlerlauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxmanifest.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-autoupdatepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundle.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundlepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundlepackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundleresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheactivation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheappextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheappextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplication.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplicationextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplicationextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplicationuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheappurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheappurihandler-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheappurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachedependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachedependencygraph-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachedynamicappurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachedynamicappurihandler-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachedynamicappurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachefiletypeassociation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachehostruntime.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageexternallocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackagemachinestatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageuserstatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheprotocol.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-connectedset.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-connectedsetpackagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroupfile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstallwork.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-defaulttile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependencygraph-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-deploymenthistory.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-deploymenthistory-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandler-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandlergroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-endoflifepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-enterprise.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-file.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociationlauncherinfo.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociationlauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-hostruntime.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-hostruntime-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-migratorpatch.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtapplication.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtdefaulttile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtsharedpri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtuserpri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-nameddependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundle.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundlepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundleresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-package.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageappinstaller.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-package-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagedependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagedependency-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageexternallocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageexternallocation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamily-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilypolicy.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuserresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageidentity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageidentity-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagelocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagelocation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagemachinestatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagemachinestatus-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagepolicy.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagepolicy-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageproperty.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageproperty-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesourceuri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesuperceded.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuserstatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuserstatus-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuserdatachange.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileview.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocol.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocol-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocollauncherinfo.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocollauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackagedeleted.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackageexclude.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-publishercachefolder.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-resource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytile-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuserdatachange.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileview.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileview-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sequence.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sequence-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sharedpackagecontainer.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sharedpackagecontainerpackagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srhistory.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srhistory-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournal.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournalarchive.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournalarchive-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournal-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-targetdevicefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-tileview.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-tileview-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-user.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-user-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-workinprogress.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-workinprogress-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-wowdependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-xboxpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-xboxpackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\globals.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\importdatabase.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\integrity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\logging.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\LogToSRHistory.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\longrunningtransaction.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\macros.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\macrosevaluators.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\maintenance.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\MultiUser.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\repair.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\repository.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\resourcepriority.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\ResourcePriority.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statement.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Statement.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statementcache.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\StatementCache.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statementexecution.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\text.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\texta.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Utf16String.hpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Utf8String.hpp
onecore\base\appmodel\staterepository\winrt\client\lib\accesscontrol.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\AutoCoSid.hpp
onecore\base\appmodel\staterepository\winrt\client\lib\dal-user.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\localize.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\notificationchannel.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\NotificationChannel.hpp
onecore\base\appmodel\staterepository\winrt\client\lib\notificationchannels.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\notificationchannelsshutdown.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\packagedependency.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\PackageDependency.hpp
onecore\base\appmodel\staterepository\winrt\client\lib\packagedependencylist.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\packagedependencymanager.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\rpc-packagedependency.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\servicerpc.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\snapshot.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.activation.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.activationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionalias.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionaliasfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionaliasfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionaliasuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionaliasuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextension.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionhost.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionhostfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionhostfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appinstaller.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appinstallerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appinstalleruri.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appinstallerurifactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.application.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationbackgroundtask.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationbackgroundtaskfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationbackgroundtaskfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationcontenturirule.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationcontenturirulefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationcontenturirulefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.application-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationextension.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationextension-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationextensionfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationextensionfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationidentity.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationidentityfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationproperty.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationpropertyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationpropertyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appservice.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appservicefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appservicefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandler.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlerfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlergroup.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlergroupfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlergroupfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlerlauncherinfo.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlerlauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appxmanifest.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appxmanifestfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.autoupdatepackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.autoupdatepackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundle.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundlefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundlepackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundlepackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundlepackagefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.connectedset.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.connectedsetfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.connectedsetpackagefamily.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.connectedsetpackagefamilyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroup.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroupfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroupfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroupfile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroupfilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallwork.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallworkfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallworkfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.defaulttile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.defaulttilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dependencygraph.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dependencygraphfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dependencygraphfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.deploymenthistory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.deploymenthistoryfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandler.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlerfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlergroup.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlergroupfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlergroupfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.endoflifepackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.endoflifepackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.enterprise.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.enterprisefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.file.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociation.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociationfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociationlauncherinfo.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociationlauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.hostruntime.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.hostruntimefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.hostruntimefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.management.repositorymanager.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.migratorpatch.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.migratorpatchfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtapplication.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtapplicationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtdefaulttile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtdefaulttilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtpackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtpackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtsharedpri.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtsharedprifactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtuserpri.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtuserprifactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.nameddependency.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.nameddependencyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundle.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundlefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundlepackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundlepackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.package.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageappinstaller.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageappinstallerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.package-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageextension.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageextension-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageextensionfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageextensionfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageexternallocation.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageexternallocationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageexternallocationfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamily.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilypolicy.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilypolicy-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilypolicyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilypolicyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserresource.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserresourcefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserresourcefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageidentity.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageidentityfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagelocation.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagelocationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagelocationfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagemachinestatus.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagemachinestatusfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagemachinestatusfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepolicy.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepolicy-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepolicyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepolicyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageproperty.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepropertyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepropertyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagesourceuri.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagesourceurifactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagesuperceded.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagesupercededfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserstatus.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserstatusfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserstatusfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytile-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserchangelogfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserchangelogfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuser-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserdatachange.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileusernotificationchannel.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileusernotificationchannelfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileview.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileviewfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocol.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocolfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocolfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocollauncherinfo.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocollauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackagedeleted.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackagedeletedfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackageexclude.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackageexcludefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.publishercachefolder.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.publishercachefolderfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytile-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserchangelogfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserchangelogfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuser-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserdatachange.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileusernotificationchannel.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileusernotificationchannelfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileview.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileview-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileviewfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileviewfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sequence.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sequencefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sequencefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sharedpackagecontainer.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sharedpackagecontainerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sharedpackagecontainerpackagefamily.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sharedpackagecontainerpackagefamilyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.srhistory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.srhistoryfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.targetdevicefamily.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.targetdevicefamilyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.targetdevicefamilyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileview.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileview-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileviewfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileviewfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileviewqueryfilter.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileviewqueryfilter-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.user.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.user-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.userfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.userfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.xboxpackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.xboxpackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.xboxpackagefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\rpc\staterepositoryrpc.cpp
onecore\base\appmodel\staterepository\winrt\client\srv\servicemain.cpp
onecore\base\appmodel\staterepository\winrt\client\srv\upgrade.cpp
onecore\base\appmodel\StateRepository\WinRT\common\inc\RPC-Caller.hpp
onecore\base\appmodel\StateRepository\WinRT\common\inc\WinRT-DAL.hpp
onecore\base\appmodel\staterepository\winrt\common\src\winrt.cpp
onecore\internal\base\inc\appmodel\common\RegistryKey.hpp
onecore\internal\sdk\inc\wil/resource.h
onecore\internal\sdk\inc\wil/Staging.h
onecore\internal\sdk\inc\wil\opensource/wil/resource.h
onecore\internal\sdk\inc\wil\opensource/wil/token_helpers.h
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\opensource\wil\result.h
onecore\private\base\inc\AppModel\Common\FileInUse.hpp
onecore\private\base\inc\appmodel\staterepository\dal/Database.hpp
onecore\private\base\inc\appmodel\staterepository\dal/Repository.hpp
onecore\private\base\inc\appmodel\staterepository\dal/ResourcePriority.hpp
opD7 
OpenProcess
OpenProcess() failed on %u of %u for %hs
OpenProcessToken
OpenSCManagerW
OpenSemaphoreW
OpenServiceW
OpenSetting: Subkey=%ls
OpenThreadToken
OptionalBundle
OptionalBundlePackage
OptionalBundlePackageStatics::ActivateInstance
OptionalBundlePackageStatics::ctor
OptionalBundlePackageStatics::dtor
OptionalBundlePackageStatics::Exists
OptionalBundlePackageStatics::ExistsByOptionalBundle
OptionalBundlePackageStatics::ExistsByOptionalBundleAndVersion
OptionalBundlePackageStatics::ExistsByOptionalBundleAndVersionAndArchitecture
OptionalBundlePackageStatics::ExistsByOptionalBundleAndVersionAndArchitectureAndResourceId
OptionalBundlePackageStatics::Find
OptionalBundlePackageStatics::FindByOptionalBundle
OptionalBundlePackageStatics::FindByOptionalBundleAndVersion
OptionalBundlePackageStatics::FindByOptionalBundleAndVersionAndArchitecture
OptionalBundlePackageStatics::Get
OptionalBundlePackageStatics::GetByOptionalBundleAndVersionAndArchitectureAndResourceId
OptionalBundlePackageStatics::TryGet
OptionalBundlePackageStatics::TryGetByOptionalBundleAndVersionAndArchitectureAndResourceId
OptionalBundleResource
OptionalBundleStatics::ActivateInstance
OptionalBundleStatics::ctor
OptionalBundleStatics::dtor
OptionalBundleStatics::Exists
OptionalBundleStatics::ExistsByMainBundle
OptionalBundleStatics::ExistsByMainBundleAndName
OptionalBundleStatics::ExistsByMainBundleAndNameAndPublisher
OptionalBundleStatics::ExistsByName
OptionalBundleStatics::ExistsByNameAndPublisher
OptionalBundleStatics::Find
OptionalBundleStatics::FindByMainBundle
OptionalBundleStatics::FindByMainBundleAndName
OptionalBundleStatics::FindByName
OptionalBundleStatics::FindByNameAndPublisher
OptionalBundleStatics::Get
OptionalBundleStatics::GetByMainBundleAndNameAndPublisher
OptionalBundleStatics::TryGet
OptionalBundleStatics::TryGetByMainBundleAndNameAndPublisher
Options
OriginalFilename
originatingContextId
originatingContextMessage
originatingContextName
oS=ZX
OSMaxVersionTested
OutputDebugStringW
oversubscribed distance tree
oversubscribed dynamic bit lengths tree
oversubscribed literal/length tree
P:lmy
P9w0t
P9w0u
Package
Package rows w/no PackageUser references
package.currentDirectoryPath
package.effectiveExternalPath
package.effectivePath
package.installedPath
package.machineExternalPath
package.mutablePath
Package.PackageType=Bundle and Package.SourceBundle=BundlePackage but no other Package rows from Bundle
package.userExternalPath
Package\Data
Package\Data\
Package\Index
Package\Index\PackageFamily
Package\Index\PackageFullName
PackageAndCategory
PackageAndPackageRelativeApplicationId
PackageAppInstaller
PackageAppInstallerStatics::ActivateInstance
PackageAppInstallerStatics::ctor
PackageAppInstallerStatics::dtor
PackageAppInstallerStatics::Exists
PackageAppInstallerStatics::ExistsByAppInstaller
PackageAppInstallerStatics::ExistsByPackage
PackageAppInstallerStatics::ExistsByPackageAndAppInstaller
PackageAppInstallerStatics::Find
PackageAppInstallerStatics::FindByAppInstaller
PackageAppInstallerStatics::FindByPackage
PackageAppInstallerStatics::Get
PackageAppInstallerStatics::GetByPackageAndAppInstaller
PackageAppInstallerStatics::TryGet
PackageAppInstallerStatics::TryGetByPackageAndAppInstaller
PackageDependency
PackageDependency.Architectures
PackageDependency.Flags
PackageDependency.id=%ls
PackageDependency.LifetimeArtifact
PackageDependency.LifetimeKind
PackageDependency.MinVersion
PackageDependency.PackageFamilyName
PackageDependency.PrimaryKey
PackageDependency.User
PackageDependencyId
PackageExtension
PackageExtension\Data
PackageExtension\Data\
PackageExtension\Index
PackageExtension\Index\Category
PackageExtension\Index\Package
PackageExtension\Index\PackageAndCategory
PackageExtensionStatics::ActivateInstance
PackageExtensionStatics::ctor
PackageExtensionStatics::dtor
PackageExtensionStatics::Exists
PackageExtensionStatics::ExistsByCategory
PackageExtensionStatics::ExistsByPackage
PackageExtensionStatics::ExistsByPackageAndCategory
PackageExtensionStatics::ExistsByPackageAndIndex
PackageExtensionStatics::ExistsByUserAndCategory
PackageExtensionStatics::Find
PackageExtensionStatics::FindByCategory
PackageExtensionStatics::FindByPackage
PackageExtensionStatics::FindByPackageAndCategory
PackageExtensionStatics::FindByUserAndCategory
PackageExtensionStatics::Get
PackageExtensionStatics::GetByPackageAndIndex
PackageExtensionStatics::TryGet
PackageExtensionStatics::TryGetByPackageAndIndex
PackageExternalLocation
PackageExternalLocation\Data
PackageExternalLocation\Data\
PackageExternalLocation\Index
PackageExternalLocation\Index\UserAndPackage
PackageExternalLocationStatics::ActivateInstance
PackageExternalLocationStatics::ctor
PackageExternalLocationStatics::dtor
PackageExternalLocationStatics::Exists
PackageExternalLocationStatics::ExistsByPackage
PackageExternalLocationStatics::ExistsByUser
PackageExternalLocationStatics::ExistsByUserAndPackage
PackageExternalLocationStatics::ExistsEffectiveByUserAndPackage
PackageExternalLocationStatics::ExistsEffectiveByUserAndPackageFullName
PackageExternalLocationStatics::Find
PackageExternalLocationStatics::FindByPackage
PackageExternalLocationStatics::FindByUser
PackageExternalLocationStatics::TryGet
PackageExternalLocationStatics::TryGetByUserAndPackage
PackageExternalLocationStatics::TryGetEffectiveByUserAndPackage
PackageExternalLocationStatics::TryGetEffectiveByUserAndPackageFullName
PackageFamily
packageFamily
PackageFamily\Data
PackageFamily\Data\
PackageFamily\Index
PackageFamily\Index\PackageFamilyName
PackageFamilyName
PackageFamilyNameFromFullName
PackageFamilyNameFromId
PackageFamilyPolicy
PackageFamilyPolicyStatics::ActivateInstance
PackageFamilyPolicyStatics::Add
PackageFamilyPolicyStatics::ClearWorkByWorkId
PackageFamilyPolicyStatics::ctor
PackageFamilyPolicyStatics::Delete
PackageFamilyPolicyStatics::DeleteByUserAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::DeleteByWorkId
PackageFamilyPolicyStatics::dtor
PackageFamilyPolicyStatics::Exists
PackageFamilyPolicyStatics::ExistsByName
PackageFamilyPolicyStatics::ExistsByNameAndIndex
PackageFamilyPolicyStatics::ExistsByNameAndIndexAndValueNumber
PackageFamilyPolicyStatics::ExistsByNameAndIndexAndValueString
PackageFamilyPolicyStatics::ExistsByNameAndValueNumber
PackageFamilyPolicyStatics::ExistsByNameAndValueString
PackageFamilyPolicyStatics::ExistsByPackageFamily
PackageFamilyPolicyStatics::ExistsByPackageFamilyAndName
PackageFamilyPolicyStatics::ExistsByPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::ExistsByUser
PackageFamilyPolicyStatics::ExistsByUserAndName
PackageFamilyPolicyStatics::ExistsByUserAndNameAndIndex
PackageFamilyPolicyStatics::ExistsByUserAndNameAndIndexAndValueNumber
PackageFamilyPolicyStatics::ExistsByUserAndNameAndIndexAndValueString
PackageFamilyPolicyStatics::ExistsByUserAndNameAndValueNumber
PackageFamilyPolicyStatics::ExistsByUserAndNameAndValueString
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamily
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamilyAndName
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamilyAndNameAndValueNumber
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamilyAndNameAndValueString
PackageFamilyPolicyStatics::Find
PackageFamilyPolicyStatics::FindByName
PackageFamilyPolicyStatics::FindByNameAndIndex
PackageFamilyPolicyStatics::FindByNameAndIndexAndValueNumber
PackageFamilyPolicyStatics::FindByNameAndIndexAndValueString
PackageFamilyPolicyStatics::FindByNameAndValueNumber
PackageFamilyPolicyStatics::FindByNameAndValueString
PackageFamilyPolicyStatics::FindByPackageFamily
PackageFamilyPolicyStatics::FindByPackageFamilyAndName
PackageFamilyPolicyStatics::FindByPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::FindByUser
PackageFamilyPolicyStatics::FindByUserAndName
PackageFamilyPolicyStatics::FindByUserAndNameAndIndex
PackageFamilyPolicyStatics::FindByUserAndNameAndIndexAndValueNumber
PackageFamilyPolicyStatics::FindByUserAndNameAndIndexAndValueString
PackageFamilyPolicyStatics::FindByUserAndNameAndValueNumber
PackageFamilyPolicyStatics::FindByUserAndNameAndValueString
PackageFamilyPolicyStatics::FindByUserAndPackageFamily
PackageFamilyPolicyStatics::FindByUserAndPackageFamilyAndName
PackageFamilyPolicyStatics::FindByUserAndPackageFamilyAndNameAndValueNumber
PackageFamilyPolicyStatics::FindByUserAndPackageFamilyAndNameAndValueString
PackageFamilyPolicyStatics::Get
PackageFamilyPolicyStatics::GetByUserAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::TryGet
PackageFamilyPolicyStatics::TryGetByUserAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::TryGetByUserIsEveryoneAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::Update
PackageFamilyPolicyStatics::UpdateWorkId
PackageFamilyStatics::ActivateInstance
PackageFamilyStatics::ctor
PackageFamilyStatics::dtor
PackageFamilyStatics::Exists
PackageFamilyStatics::ExistsByName
PackageFamilyStatics::ExistsByNameAndPublisherId
PackageFamilyStatics::ExistsByPackageFamilyName
PackageFamilyStatics::ExistsByPackageSID
PackageFamilyStatics::ExistsByPublisherId
PackageFamilyStatics::ExistsByUserAndNameAndPublisherId
PackageFamilyStatics::ExistsByUserAndPackageFamilyName
PackageFamilyStatics::Find
PackageFamilyStatics::FindByName
PackageFamilyStatics::FindByPackageSID
PackageFamilyStatics::FindByPublisherId
PackageFamilyStatics::FindByUser
PackageFamilyStatics::FindByUserAndPublisherId
PackageFamilyStatics::Get
PackageFamilyStatics::GetByNameAndPublisherId
PackageFamilyStatics::GetByPackageFamilyName
PackageFamilyStatics::GetByUserAndNameAndPublisherId
PackageFamilyStatics::GetByUserAndPackageFamilyName
PackageFamilyStatics::GetCurrent
PackageFamilyStatics::TryGet
PackageFamilyStatics::TryGetByNameAndPublisherId
PackageFamilyStatics::TryGetByPackageFamilyName
PackageFamilyStatics::TryGetByUserAndNameAndPublisherId
PackageFamilyStatics::TryGetByUserAndPackageFamilyName
PackageFamilyUser
PackageFamilyUserResource
PackageFamilyUserResourceStatics::ActivateInstance
PackageFamilyUserResourceStatics::Add
PackageFamilyUserResourceStatics::ctor
PackageFamilyUserResourceStatics::Delete
PackageFamilyUserResourceStatics::dtor
PackageFamilyUserResourceStatics::Exists
PackageFamilyUserResourceStatics::ExistsByPackageFamilyUser
PackageFamilyUserResourceStatics::ExistsByPackageFamilyUserAndResourceId
PackageFamilyUserResourceStatics::Find
PackageFamilyUserResourceStatics::FindByPackageFamilyUser
PackageFamilyUserResourceStatics::TryGet
PackageFamilyUserResourceStatics::TryGetByPackageFamilyUserAndResourceId
PackageFamilyUserResourceStatics::Update
PackageFamilyUserStatics::ActivateInstance
PackageFamilyUserStatics::ctor
PackageFamilyUserStatics::dtor
PackageFamilyUserStatics::Exists
PackageFamilyUserStatics::ExistsByPackageFamily
PackageFamilyUserStatics::ExistsByPackageFamilyName
PackageFamilyUserStatics::ExistsByUser
PackageFamilyUserStatics::ExistsByUserAndPackageFamily
PackageFamilyUserStatics::ExistsByUserAndPackageFamilyName
PackageFamilyUserStatics::Find
PackageFamilyUserStatics::FindByPackageFamily
PackageFamilyUserStatics::FindByPackageFamilyName
PackageFamilyUserStatics::FindByUser
PackageFamilyUserStatics::GetByUserAndPackageFamilyName
PackageFamilyUserStatics::TryGet
PackageFamilyUserStatics::TryGetByUserAndPackageFamily
PackageFamilyUserStatics::TryGetByUserAndPackageFamilyName
PackageFullName
packageIdentity
PackageIdentity
PackageIdentityStatics::ActivateInstance
PackageIdentityStatics::ctor
PackageIdentityStatics::dtor
PackageIdentityStatics::Exists
PackageIdentityStatics::ExistsByPackageFamily
PackageIdentityStatics::ExistsByPackageFullName
PackageIdentityStatics::Find
PackageIdentityStatics::FindByPackageFamily
PackageIdentityStatics::Get
PackageIdentityStatics::GetByPackageFullName
PackageIdentityStatics::TryGet
PackageIdentityStatics::TryGetByPackageFullName
PackageIdFromFullName
PackageLocation
PackageLocationStatics::ActivateInstance
PackageLocationStatics::ctor
PackageLocationStatics::dtor
PackageLocationStatics::Exists
PackageLocationStatics::ExistsByInstalledLocation
PackageLocationStatics::ExistsByPackage
PackageLocationStatics::ExistsByVolume
PackageLocationStatics::Find
PackageLocationStatics::FindByInstalledLocation
PackageLocationStatics::FindByVolume
PackageLocationStatics::Get
PackageLocationStatics::GetByPackage
PackageLocationStatics::GetByUserAndApplicationUserModelId
PackageLocationStatics::GetVolumeByPackageFullName
PackageLocationStatics::TryGet
PackageLocationStatics::TryGetByPackage
PackageMachineStatus
PackageMachineStatus::DeleteByPackageFullName
PackageMachineStatus\Data
PackageMachineStatus\Data\
PackageMachineStatus\Index
PackageMachineStatus\Index\PackageFullName
PackageMachineStatus\Index\PackageIdentity
PackageMachineStatusStatics::ActivateInstance
PackageMachineStatusStatics::ctor
PackageMachineStatusStatics::dtor
PackageMachineStatusStatics::Exists
PackageMachineStatusStatics::ExistsByPackageIdentity
PackageMachineStatusStatics::Find
PackageMachineStatusStatics::TryGet
PackageMachineStatusStatics::TryGetByPackageIdentity
PackageOrigin
PackagePolicy
PackagePolicyStatics::ActivateInstance
PackagePolicyStatics::Add
PackagePolicyStatics::ClearWorkByWorkId
PackagePolicyStatics::ctor
PackagePolicyStatics::Delete
PackagePolicyStatics::DeleteByUserAndPackageAndNameAndIndex
PackagePolicyStatics::DeleteByWorkId
PackagePolicyStatics::dtor
PackagePolicyStatics::Exists
PackagePolicyStatics::ExistsByName
PackagePolicyStatics::ExistsByNameAndIndex
PackagePolicyStatics::ExistsByNameAndIndexAndValueNumber
PackagePolicyStatics::ExistsByNameAndIndexAndValueString
PackagePolicyStatics::ExistsByNameAndValueNumber
PackagePolicyStatics::ExistsByNameAndValueString
PackagePolicyStatics::ExistsByPackage
PackagePolicyStatics::ExistsByPackageAndName
PackagePolicyStatics::ExistsByPackageAndNameAndIndex
PackagePolicyStatics::ExistsByUser
PackagePolicyStatics::ExistsByUserAndName
PackagePolicyStatics::ExistsByUserAndNameAndIndex
PackagePolicyStatics::ExistsByUserAndNameAndIndexAndValueNumber
PackagePolicyStatics::ExistsByUserAndNameAndIndexAndValueString
PackagePolicyStatics::ExistsByUserAndNameAndValueNumber
PackagePolicyStatics::ExistsByUserAndNameAndValueString
PackagePolicyStatics::ExistsByUserAndPackage
PackagePolicyStatics::ExistsByUserAndPackageAndName
PackagePolicyStatics::ExistsByUserAndPackageAndNameAndIndex
PackagePolicyStatics::ExistsByUserAndPackageAndNameAndValueNumber
PackagePolicyStatics::ExistsByUserAndPackageAndNameAndValueString
PackagePolicyStatics::Find
PackagePolicyStatics::FindByName
PackagePolicyStatics::FindByNameAndIndex
PackagePolicyStatics::FindByNameAndIndexAndValueNumber
PackagePolicyStatics::FindByNameAndIndexAndValueString
PackagePolicyStatics::FindByNameAndValueNumber
PackagePolicyStatics::FindByNameAndValueString
PackagePolicyStatics::FindByPackage
PackagePolicyStatics::FindByPackageAndName
PackagePolicyStatics::FindByPackageAndNameAndIndex
PackagePolicyStatics::FindByUser
PackagePolicyStatics::FindByUserAndName
PackagePolicyStatics::FindByUserAndNameAndIndex
PackagePolicyStatics::FindByUserAndNameAndIndexAndValueNumber
PackagePolicyStatics::FindByUserAndNameAndIndexAndValueString
PackagePolicyStatics::FindByUserAndNameAndValueNumber
PackagePolicyStatics::FindByUserAndNameAndValueString
PackagePolicyStatics::FindByUserAndPackage
PackagePolicyStatics::FindByUserAndPackageAndName
PackagePolicyStatics::FindByUserAndPackageAndNameAndValueNumber
PackagePolicyStatics::FindByUserAndPackageAndNameAndValueString
PackagePolicyStatics::Get
PackagePolicyStatics::GetByUserAndPackageAndNameAndIndex
PackagePolicyStatics::TryGet
PackagePolicyStatics::TryGetByUserAndPackageAndNameAndIndex
PackagePolicyStatics::TryGetByUserIsEveryoneAndPackageAndNameAndIndex
PackagePolicyStatics::Update
PackagePolicyStatics::UpdateWorkId
PackagePolicyStatics::Upsert
PackageProperty
PackagePropertyStatics::ActivateInstance
PackagePropertyStatics::ctor
PackagePropertyStatics::dtor
PackagePropertyStatics::Exists
PackagePropertyStatics::ExistsByName
PackagePropertyStatics::ExistsByPackage
PackagePropertyStatics::ExistsByPackageAndIndex
PackagePropertyStatics::ExistsByPackageAndName
PackagePropertyStatics::ExistsByUserAndName
PackagePropertyStatics::Find
PackagePropertyStatics::FindByName
PackagePropertyStatics::FindByPackage
PackagePropertyStatics::FindByPackageAndName
PackagePropertyStatics::FindByUserAndName
PackagePropertyStatics::Get
PackagePropertyStatics::GetByPackageAndIndex
PackagePropertyStatics::TryGet
PackagePropertyStatics::TryGetByPackageAndIndex
PackageRelativeApplicationId
PackageRepositoryRoot
Packages
PackageSID
PackageSourceUri
PackageSourceUriStatics::ActivateInstance
PackageSourceUriStatics::ctor
PackageSourceUriStatics::dtor
PackageSourceUriStatics::Exists
PackageSourceUriStatics::ExistsByPackage
PackageSourceUriStatics::ExistsByPackageAndKind
PackageSourceUriStatics::Find
PackageSourceUriStatics::FindByPackage
PackageSourceUriStatics::FindByPackageAndKind
PackageSourceUriStatics::Get
PackageSourceUriStatics::TryGet
PackageStatics::ActivateInstance
PackageStatics::ctor
PackageStatics::dtor
PackageStatics::Exists
PackageStatics::ExistsByEditionId
PackageStatics::ExistsByNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::ExistsByPackageFamily
PackageStatics::ExistsByPackageFamilyAndPackageType
PackageStatics::ExistsByPackageFamilyAndPackageTypeAndResourceId
PackageStatics::ExistsByPackageFamilyAndPackageTypeAndResourceIdAndVersion
PackageStatics::ExistsByPackageFamilyAndResourceId
PackageStatics::ExistsByPackageFamilyAndResourceIdAndArchitecture
PackageStatics::ExistsByPackageFamilyAndResourceIdAndArchitectureAndVersion
PackageStatics::ExistsByPackageFamilyName
PackageStatics::ExistsByPackageFamilyNameAndPackageType
PackageStatics::ExistsByPackageFullName
PackageStatics::ExistsBySourceBundle
PackageStatics::ExistsBySourceBundleAndPackageType
PackageStatics::ExistsByUserAndApplicationUserModelId
PackageStatics::ExistsByUserAndNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::ExistsByUserAndPackageFamily
PackageStatics::ExistsByUserAndPackageFamilyAndPackageType
PackageStatics::ExistsByUserAndPackageFamilyName
PackageStatics::ExistsByUserAndPackageFamilyNameAndPackageType
PackageStatics::ExistsByUserAndPackageFullName
PackageStatics::ExistsByUserAndPublisherId
PackageStatics::ExistsByUserOrDefaultAccountAndApplicationUserModelId
PackageStatics::ExistsByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
PackageStatics::ExistsByUserOrDefaultAccountAndPackageFullName
PackageStatics::Find
PackageStatics::FindBundleAndMainOrOptionalNotPartOfBundleByUserAndNotOtherUser_SortedByPackageType
PackageStatics::FindByEditionId
PackageStatics::FindByPackageFamily
PackageStatics::FindByPackageFamilyAndPackageType
PackageStatics::FindByPackageFamilyAndPackageTypeAndResourceId
PackageStatics::FindByPackageFamilyAndPackageTypeAndResourceIdAndVersion
PackageStatics::FindByPackageFamilyAndResourceId
PackageStatics::FindByPackageFamilyAndResourceIdAndArchitecture
PackageStatics::FindByPackageFamilyName
PackageStatics::FindByPackageFamilyNameAndPackageType
PackageStatics::FindByPackageOrigin
PackageStatics::FindBySourceBundle
PackageStatics::FindBySourceBundleAndPackageType
PackageStatics::FindByUser
PackageStatics::FindByUserAndPackageFamily
PackageStatics::FindByUserAndPackageFamilyAndPackageType
PackageStatics::FindByUserAndPackageFamilyName
PackageStatics::FindByUserAndPackageFamilyNameAndPackageType
PackageStatics::FindByUserAndPackageTypeAndNotOtherUser
PackageStatics::FindByUserAndPublisherId
PackageStatics::FindByUserOrDefaultAccount
PackageStatics::FindByUserOrDefaultAccountAnd::PackageID
PackageStatics::FindByUserOrDefaultAccountAndApplicationUserModelId
PackageStatics::FindByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
PackageStatics::FindByUserOrDefaultAccountAndPackageFullName
PackageStatics::FindMainOrOptionalByUserAndNotByFamilyAndOtherUser
PackageStatics::FindPackageFullNamesByUserSidAndPackageTypeAndTargetDeviceFamily
PackageStatics::Get
PackageStatics::GetByInstalledLocation
PackageStatics::GetByNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::GetByPackageFamilyAndResourceIdAndArchitectureAndVersion
PackageStatics::GetByPackageFullName
PackageStatics::GetByUserAnd::PackageId
PackageStatics::GetByUserAndNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::GetByUserAndPackageFullName
PackageStatics::GetCurrent
PackageStatics::GetEffectiveIsUninstallableByPackageFullName
PackageStatics::GetEffectiveSupportedUsersByApplicationUserModelId
PackageStatics::GetEffectiveSupportedUsersByPackageFullName
PackageStatics::GetIsSilverlight81AndEffectiveSupportedUsersAndVolumeByUserAndPackageFullName
PackageStatics::GetIsSilverlight81AndEffectiveSupportedUsersByUserAndPackageFullName
PackageStatics::GetMainPackageDependencyByUserAndSupplierPackage
PackageStatics::GetPackageOriginByUserAndPackageFullName
PackageStatics::GetStagedPackageOriginByPackageFullName
PackageStatics::TryGet
PackageStatics::TryGetByInstalledLocation
PackageStatics::TryGetByNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::TryGetByPackageFamilyAndResourceIdAndArchitectureAndVersion
PackageStatics::TryGetByPackageFullName
PackageStatics::TryGetByUserAndNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::TryGetByUserAndPackageFullName
PackageStatics::TryGetByUserOrDefaultAccountAndPackageFullName
PackageStatics::TryGetEffectiveLocationByUserAndApplicationUserModelId
PackageStatics::TryGetEffectiveLocationByUserAndPackage
PackageStatics::TryGetEffectiveLocationByUserAndPackageFullName
PackageStatics::UpdateIsMachineRegisteredByPackageFullName
PackageStatics::UpdateIsSingletonRegistered
PackageStatus
PackageStatusImported
PackageSuperceded
PackageSupercededStatics::ActivateInstance
PackageSupercededStatics::ctor
PackageSupercededStatics::dtor
PackageSupercededStatics::Exists
PackageSupercededStatics::ExistsByPackageIdentity
PackageSupercededStatics::ExistsByUser
PackageSupercededStatics::ExistsByUserAndPackageIdentity
PackageSupercededStatics::Find
PackageSupercededStatics::FindByPackageIdentity
PackageSupercededStatics::FindByUser
PackageSupercededStatics::TryGet
PackageSupercededStatics::TryGetByUserAndPackageIdentity
PackageType
PackageUser
PackageUser rows for Bundle but no other Package(s) sourced from the bundle
PackageUser rows for Inbox packages cannot be DeploymentState=Paused
PackageUser.User has Package(s) with Package.Type!=Bundle but not Package.Type=Bundle
PackageUser\Data
PackageUser\Data\
PackageUser\Index
PackageUser\Index\User
PackageUser\Index\UserAndPackage
PackageUserAndApplication
PackageUserStatics::ActivateInstance
PackageUserStatics::ctor
PackageUserStatics::dtor
PackageUserStatics::Exists
PackageUserStatics::ExistsByAppDataVolume
PackageUserStatics::ExistsByPackage
PackageUserStatics::ExistsByPackageFamilyNameAndPackageType
PackageUserStatics::ExistsByPackageFullName
PackageUserStatics::ExistsByPackageFullNameAndDeploymentState
PackageUserStatics::ExistsByUser
PackageUserStatics::ExistsByUserAndDeploymentState
PackageUserStatics::ExistsByUserAndDeploymentStateAndIsExplicitlyInstalled
PackageUserStatics::ExistsByUserAndPackage
PackageUserStatics::ExistsByUserAndPackageFamilyNameAndPackageType
PackageUserStatics::ExistsByUserAndPackageFullName
PackageUserStatics::Find
PackageUserStatics::FindByAppDataVolume
PackageUserStatics::FindByPackage
PackageUserStatics::FindByPackageFamilyNameAndPackageType
PackageUserStatics::FindByPackageFullName
PackageUserStatics::FindByUser
PackageUserStatics::FindByUserAndDeploymentState
PackageUserStatics::FindByUserAndDeploymentStateAndIsExplicitlyInstalled
PackageUserStatics::FindByUserAndPackageFamilyNameAndPackageType
PackageUserStatics::Get
PackageUserStatics::GetByUserAndPackage
PackageUserStatics::GetByUserAndPackageFullName
PackageUserStatics::GetMainPackageFullNameByUserAndPackageFamilyName
PackageUserStatics::TryGet
PackageUserStatics::TryGetByUserAndPackage
PackageUserStatics::TryGetByUserAndPackageFullName
PackageUserStatus
PackageUserStatus::AddOrUpdateStatusByUserSecurityIdentifierAndPackageFullName
PackageUserStatus::DeleteByUserSecurityIdentifierAndPackageFullName
PackageUserStatus\Data
PackageUserStatus\Data\
PackageUserStatus\Index
PackageUserStatus\Index\UserAndPackageFullName
PackageUserStatus\Index\UserAndPackageIdentity
PackageUserStatusStatics::ActivateInstance
PackageUserStatusStatics::ctor
PackageUserStatusStatics::dtor
PackageUserStatusStatics::Exists
PackageUserStatusStatics::ExistsByUser
PackageUserStatusStatics::ExistsByUserAndPackageIdentity
PackageUserStatusStatics::Find
PackageUserStatusStatics::FindByUser
PackageUserStatusStatics::TryGet
PackageUserStatusStatics::TryGetByUserAndPackageIdentity
PackageUserStatusTransactionCompleted
PackageUserStatusWaitingForExistingTransaction
page_size
PageCacheOverflow
PageCacheOverflowPeak
PageCachePeak
PageCacheUsed
PageCacheUsedPeak
Parameters
PartA_PrivTags
Partition
Partition %d not supported by GC()
PathCchCombine
PDq~e
PERSIST
Persisted
PersistedCount
'ph;K82k
Phase
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
Pj%h8
Pj)h _
Pj*hh]
Pj,h(w
Pj,h`r
Pj,h8
Pj.h b
Pj.hPz
Pj/h q
Pj:hHu
Pj:hp~
Pj:hpg
Pj:hXy
Pj[h 
Pj[h '
Pj[h@x
Pj[hH|
Pj[hx
Pj\h(
Pj\h@Z
Pj\h`
Pj\h0
Pj\h8
Pj\h8p
Pj\hp
Pj\hP
Pj\hX
Pj\hx
Pj]h0
Pj]h8
Pj]hh5
Pj]hp
Pj]hx
Pj^h(
Pj^h`0
Pj^h0
Pj^hP
Pj^hx
Pj_h 
Pj_h`
Pj_h8
Pj_hx
Pj_hxO
Pj`h <
Pj`h`m
Pj`h`o
Pj`h8
Pj`hp
Pj`hPg
Pj=hX
Pj0h j
Pj0hHv
Pj0hpe
Pj0hxo
Pj1hPt
Pj1hx
Pj2h {
Pj2h0i
Pj2h8~
Pj2hP
Pj2hXh
Pj2hxl
Pj3h d
Pj4hHs
Pj6hP
Pjah0
Pjah8
Pjahh
PjahH
PjbhH
Pjbhh_
PjbhPI
PjbhPT
Pjch0
Pjch8
PjchH
PjChpf
PjchX
Pjdh@
Pjdh`L
Pjdh8
PjdhP;
Pjdhx
Pjdhxt
Pjeh0
Pjehp
Pjfh 
Pjfh(
PjfhP
Pjgh`
Pjhh 
Pjhh`
PjhhHu
PjhhP
Pj-hXp
PjlhX_
Pjnh8`
PjQhx
PjSh 
PjSh`
PjShP
PjShX
PjThXA
PjUh $
PjUh(d
PjUh0,
PjVhh
PjVhp"
PjVhX
PjWhh
PjWhP
PjWhx
PjWhX
PjXh@
PjXh0
PjXhp
PjXhX
PjYh(6
PjYh8r
PjYhh#
PjYhh&
PjYhP
PjYhpc
PjYhX
PjYhx+
PjZh #
PjZh 1
PjZh`
PjZhp
PjZhP
PjZhx
Pl:P~1
Policy.Aggressive.ConnectionMaxAge
Policy.Aggressive.ConnectionMaxCount
Policy.Aggressive.ConnectionMinCount
Policy.Aggressive.GCInterval
Policy.Aggressive.StatementMaxAge
Policy.Aggressive.StatementMaxCount
Policy.Aggressive.StatementMinCount
Policy.Normal.ConnectionMaxAge
Policy.Normal.ConnectionMaxCount
Policy.Normal.ConnectionMinCount
Policy.Normal.GCInterval
Policy.Normal.StatementMaxAge
Policy.Normal.StatementMaxCount
Policy.Normal.StatementMinCount
PostCheckAllCascadingInMachinePartition
PostFixAllCascadingInMachinePartition
PPF4k
PPPh@
PPPh`
PPPh0
PPPhP
PPPQj
PPPVj
PQgp|
PQQQQQQQQQQ
PQQVj
PQQVj 
PQSVW
PRAGMA %s;
PRAGMA %s=%I64d;
PRAGMA %s=%I64u;
PRAGMA %s=%s;
PRAGMA encoding = "UTF-8";
PRAGMA optimize(%d);
PRAGMA optimize;
PreviousDeploymentVersion
PreviousMachineVersion
previousVersion
PrimaryTile
PrimaryTileStatics::ActivateInstance
PrimaryTileStatics::ctor
PrimaryTileStatics::dtor
PrimaryTileStatics::Exists
PrimaryTileStatics::ExistsByApplication
PrimaryTileStatics::ExistsByApplicationAndTileId
PrimaryTileStatics::ExistsByPackage
PrimaryTileStatics::Find
PrimaryTileStatics::FindByPackage
PrimaryTileStatics::Get
PrimaryTileStatics::GetByApplication
PrimaryTileStatics::GetByApplicationAndTileId
PrimaryTileStatics::TryGet
PrimaryTileStatics::TryGetByApplication
PrimaryTileStatics::TryGetByApplicationAndTileId
PrimaryTileUser
PrimaryTileUserChangelog
PrimaryTileUserChangelogStatics::ActivateInstance
PrimaryTileUserChangelogStatics::ctor
PrimaryTileUserChangelogStatics::DeleteBy::Created
PrimaryTileUserChangelogStatics::DeleteBy::Deleted
PrimaryTileUserChangelogStatics::DeleteByTileUniqueId
PrimaryTileUserChangelogStatics::DeleteByUserAndTileUniqueId
PrimaryTileUserChangelogStatics::dtor
PrimaryTileUserChangelogStatics::Exists
PrimaryTileUserChangelogStatics::ExistsBy_Created
PrimaryTileUserChangelogStatics::ExistsBy_Deleted
PrimaryTileUserChangelogStatics::ExistsByTileUniqueId
PrimaryTileUserChangelogStatics::ExistsByUser
PrimaryTileUserChangelogStatics::ExistsByUserAndTileUniqueId
PrimaryTileUserChangelogStatics::ExistsByWhenOccurred
PrimaryTileUserChangelogStatics::Find
PrimaryTileUserChangelogStatics::FindByUser
PrimaryTileUserChangelogStatics::FindByWhenOccurred
PrimaryTileUserChangelogStatics::Get
PrimaryTileUserChangelogStatics::GetBy_Created
PrimaryTileUserChangelogStatics::GetBy_Deleted
PrimaryTileUserChangelogStatics::GetByTileUniqueId
PrimaryTileUserChangelogStatics::GetByUserAndTileUniqueId
PrimaryTileUserChangelogStatics::TryGet
PrimaryTileUserChangelogStatics::TryGetBy_Created
PrimaryTileUserChangelogStatics::TryGetBy_Deleted
PrimaryTileUserChangelogStatics::TryGetByTileUniqueId
PrimaryTileUserChangelogStatics::TryGetByUserAndTileUniqueId
PrimaryTileUserDataChange::ctor
PrimaryTileUserDataChange::dtor
PrimaryTileUserNotificationChannel::ctor
PrimaryTileUserNotificationChannel::DeregisterForNotifications
PrimaryTileUserNotificationChannel::dtor
PrimaryTileUserNotificationChannel::RaiseNotification
PrimaryTileUserNotificationChannel::RegisterForNotifications
PrimaryTileUserNotificationChannelStatics::ActivateInstance
PrimaryTileUserNotificationChannelStatics::CreateForUser
PrimaryTileUserNotificationChannelStatics::CreateForUserSecurityIdentifier
PrimaryTileUserNotificationChannelStatics::CreateForUserSid
PrimaryTileUserNotificationChannelStatics::ctor
PrimaryTileUserNotificationChannelStatics::dtor
PrimaryTileUserStatics::ActivateInstance
PrimaryTileUserStatics::Add
PrimaryTileUserStatics::ClearWorkByWorkId
PrimaryTileUserStatics::ctor
PrimaryTileUserStatics::Delete
PrimaryTileUserStatics::DeleteByUserAndApplicationIdentity
PrimaryTileUserStatics::DeleteByUserAndTileUniqueId
PrimaryTileUserStatics::DeleteByWorkId
PrimaryTileUserStatics::dtor
PrimaryTileUserStatics::Exists
PrimaryTileUserStatics::ExistsBy_Created
PrimaryTileUserStatics::ExistsBy_Modified
PrimaryTileUserStatics::ExistsByApplicationIdentity
PrimaryTileUserStatics::ExistsByTileUniqueId
PrimaryTileUserStatics::ExistsByUser
PrimaryTileUserStatics::ExistsByUserAndApplicationIdentity
PrimaryTileUserStatics::Find
PrimaryTileUserStatics::FindBy_Created
PrimaryTileUserStatics::FindBy_Modified
PrimaryTileUserStatics::FindByApplicationIdentity
PrimaryTileUserStatics::FindByUser
PrimaryTileUserStatics::FindDataChangeByGTChangeId
PrimaryTileUserStatics::FindDataChangeByGTWhenOccurred
PrimaryTileUserStatics::FindDataChangeByUserAndGTChangeId
PrimaryTileUserStatics::FindDataChangeByUserAndGTWhenOccurred
PrimaryTileUserStatics::Get
PrimaryTileUserStatics::GetByTileUniqueId
PrimaryTileUserStatics::GetByUserAndApplicationIdentity
PrimaryTileUserStatics::GetDataChangeByChangeId
PrimaryTileUserStatics::TryGet
PrimaryTileUserStatics::TryGetByTileUniqueId
PrimaryTileUserStatics::TryGetByUserAndApplicationIdentity
PrimaryTileUserStatics::TryGetDataChangeByChangeId
PrimaryTileUserStatics::Update
PrimaryTileUserStatics::UpdateWorkId
PrimaryTileViewStatics::ActivateInstance
PrimaryTileViewStatics::ctor
PrimaryTileViewStatics::dtor
PrimaryTileViewStatics::Exists
PrimaryTileViewStatics::ExistsByApplication
PrimaryTileViewStatics::ExistsByApplicationAndTileId
PrimaryTileViewStatics::ExistsByPackage
PrimaryTileViewStatics::ExistsByTileUniqueId
PrimaryTileViewStatics::ExistsByUser
PrimaryTileViewStatics::ExistsByUserAndApplication
PrimaryTileViewStatics::ExistsByUserAndApplicationUserModelId
PrimaryTileViewStatics::Find
PrimaryTileViewStatics::FindByApplication
PrimaryTileViewStatics::FindByPackage
PrimaryTileViewStatics::FindByUser
PrimaryTileViewStatics::Get
PrimaryTileViewStatics::GetByApplicationAndTileId
PrimaryTileViewStatics::GetByTileUniqueId
PrimaryTileViewStatics::GetByUserAndApplication
PrimaryTileViewStatics::GetByUserAndApplicationUserModelId
PrimaryTileViewStatics::TryGet
PrimaryTileViewStatics::TryGetByApplicationAndTileId
PrimaryTileViewStatics::TryGetByTileUniqueId
PrimaryTileViewStatics::TryGetByUserAndApplication
PrimaryTileViewStatics::TryGetByUserAndApplicationUserModelId
Priorities
ProcessCount
ProcessId
ProcessIdToSessionId
ProcessIndex
ProcessingSQL
ProductName
ProductVersion
Profile
ProfileImagePath
ProgID
ProgIDAndDynamicAppUriHandlerGroup
ProgIDAndExtension
Protocol
Protocol\Data
Protocol\Data\
Protocol\Index
Protocol\Index\Extension
Protocol\Index\Name
Protocol\Index\NameAndExtension
Protocol\Index\ProgID
ProtocolStatics::ActivateInstance
ProtocolStatics::ctor
ProtocolStatics::dtor
ProtocolStatics::Exists
ProtocolStatics::ExistsByExtension
ProtocolStatics::ExistsByExtensionAndIndex
ProtocolStatics::ExistsByProgID
ProtocolStatics::ExistsByProgIDAndExtension
ProtocolStatics::ExistsByProtocolName
ProtocolStatics::ExistsByProtocolNameAndExtension
ProtocolStatics::ExistsByProtocolNameAndReturnResults
ProtocolStatics::ExistsByUserAndProtocolName
ProtocolStatics::ExistsByUserOrDefaultAccountAndProtocolName
ProtocolStatics::ExistsByUserOrDefaultAccountAndProtocolNameAndPackageFamilyName
ProtocolStatics::Find
ProtocolStatics::FindByExtension
ProtocolStatics::FindByProgID
ProtocolStatics::FindByProgIDAndExtension
ProtocolStatics::FindByProtocolName
ProtocolStatics::FindByProtocolNameAndExtension
ProtocolStatics::FindByProtocolNameAndReturnResults
ProtocolStatics::FindLauncherInfoByUserOrDefaultAccountAndProgId
ProtocolStatics::FindLauncherInfoByUserOrDefaultAccountAndProtocolName
ProtocolStatics::FindLauncherInfoByUserOrDefaultAccountAndProtocolNameAndPackageFamilyName
ProtocolStatics::Get
ProtocolStatics::GetByExtensionAndIndex
ProtocolStatics::TryGet
ProtocolStatics::TryGetByExtensionAndIndex
ProvisionedPackage
ProvisionedPackageDeleted
ProvisionedPackageDeletedStatics::ActivateInstance
ProvisionedPackageDeletedStatics::ctor
ProvisionedPackageDeletedStatics::dtor
ProvisionedPackageDeletedStatics::Exists
ProvisionedPackageDeletedStatics::ExistsByPackageIdentity
ProvisionedPackageDeletedStatics::ExistsByPath
ProvisionedPackageDeletedStatics::Find
ProvisionedPackageDeletedStatics::TryGet
ProvisionedPackageDeletedStatics::TryGetByPackageIdentity
ProvisionedPackageDeletedStatics::TryGetByPath
ProvisionedPackageExclude
ProvisionedPackageExcludeStatics::ActivateInstance
ProvisionedPackageExcludeStatics::ctor
ProvisionedPackageExcludeStatics::dtor
ProvisionedPackageExcludeStatics::Exists
ProvisionedPackageExcludeStatics::ExistsByPackageFamily
ProvisionedPackageExcludeStatics::Find
ProvisionedPackageExcludeStatics::TryGet
ProvisionedPackageExcludeStatics::TryGetByPackageFamily
ProvisionedPackageStatics::ActivateInstance
ProvisionedPackageStatics::ctor
ProvisionedPackageStatics::dtor
ProvisionedPackageStatics::Exists
ProvisionedPackageStatics::ExistsByPackageIdentity
ProvisionedPackageStatics::ExistsByPath
ProvisionedPackageStatics::Find
ProvisionedPackageStatics::TryGet
ProvisionedPackageStatics::TryGetByPackageIdentity
ProvisionedPackageStatics::TryGetByPath
PRVAX
PSh i
PSh@g
PSj$Z
PSj7Z
PSjBZ
PSjGZ
PSjWZ
PublicFolder
Publisher
PublisherCacheFolder
PublisherCacheFolderStatics::ActivateInstance
PublisherCacheFolderStatics::ctor
PublisherCacheFolderStatics::dtor
PublisherCacheFolderStatics::Exists
PublisherCacheFolderStatics::ExistsByFolderName
PublisherCacheFolderStatics::ExistsByPackageExtension
PublisherCacheFolderStatics::ExistsByPackageExtensionAndFolderName
PublisherCacheFolderStatics::ExistsByPackageExtensionAndIndex
PublisherCacheFolderStatics::Find
PublisherCacheFolderStatics::FindByFolderName
PublisherCacheFolderStatics::FindByPackageExtension
PublisherCacheFolderStatics::Get
PublisherCacheFolderStatics::GetByPackageExtensionAndFolderName
PublisherCacheFolderStatics::GetByPackageExtensionAndIndex
PublisherCacheFolderStatics::TryGet
PublisherCacheFolderStatics::TryGetByPackageExtensionAndFolderName
PublisherCacheFolderStatics::TryGetByPackageExtensionAndIndex
PVj!Z
PVj(Z
PVj)Z
PVj,Z
PVj]Z
PVj_Z
PVj|Z
PVj+Z
PVj3Z
PVjCZ
PVjDZ
PVjEZ
PVjFZ
PVjgZ
PVjjZ
PVjKZ
PVjLZ
PVjMZ
PVjNZ
PVjOZ
PVjPZ
PVjQZ
PVjrZ
PVjRZ
PVjSZ
PVjtZ
PVjVZ
PVjXZ
PVjxZ
PVjYZ
PVjyZ
PVj'Z
PVj-Z
PVQWRSh,T
PVQWRSh`T
PVSj Z
PWh`V
PWhH|
PWj8j Z
PWjuZ
PWShT
PWSVRQ
PWUln
q\Q17
q\u_M
-Q2?(
QL"hA
QQQQQQPQQQQ
QQSV3
QQSVh
QQSVW
QQSVW3
QQSVWh
QQVQQ
QQVW3
QQVWQ3
QRPh$
QRPhD
QRPhd
QRPhD
QRPhd
QSh@@
QSh8W
QShPx
QSkmx
QSVWh
QSVWj
QSVWQ
QueryFullProcessImageNameW
QueryPerformanceCounter
QueryServiceStatusEx
QueryUnbiasedInterruptTime
QVRh@
QVRh@J
QVRh`
QVRh`R
QVRh0
QVRh8
QVRhH
QVRhH"
QVRhH~
QVRhP
QVRhx
QVWQh\
QVWQh`
R!s4Z
R)NT~%
r_pn<
r2f;E
RaiseException
RaiseFailFastException
RDG{P
ReadSetting: Name=%ls
Redmond1
RegCloseKey
RegCreateKeyExW
RegDeleteTreeW
RegDeleteValueW
RegEnumKeyExW
RegisterServiceCtrlHandlerExW
RegOpenKey failed %d
RegOpenKeyExW
RegQueryInfoKeyW
RegQueryValueExW
RegSetValueExW
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
Remove
RepairGhostMinimumAgeForDeletion
Repository._Checkpoint
Repository.SetOptions.SetCacheSize
RepositoryManager
RepositoryManager::ApplySnapshot
RepositoryManager::Cache_CheckIntegrity
RepositoryManager::Cache_Initialize
RepositoryManager::Cache_Update
RepositoryManager::CheckIntegrity
RepositoryManager::Checkpoint
RepositoryManager::ClearChangelogs
RepositoryManager::ClearDatabaseCache
RepositoryManager::CreateSnapshot
RepositoryManager::DeleteSnapshot
RepositoryManager::DoMaintenance
RepositoryManager::GCChangelogs
RepositoryManager::GetDatabaseSize
RepositoryManager::ImportSnapshot
RepositoryManager::IsAutoCheck
RepositoryManager::IsCheckpointDue
RepositoryManager::IsMaintenance
RepositoryManager::Optimize
RepositoryManager::OptimizeForPartition
RepositoryManager::Repair
RepositoryManager::ResetAutoCheck
RepositoryManager::Rpc_Disable
RepositoryManager::Rpc_Enable
RepositoryManager::SEtAutoCheck
RepositoryManager::SetCheckpointIsDue
RepositoryManager::SetIsMaintenanceDue
RepositoryManager::UpdateAllMultiPartTransactionCascading
RepositoryManager::UpdateStatistics
RepositoryManager::UpdateStatisticsForPartition
Required configuration data not found: %ws
Resolved
ResolvedCount
ResolveDelayLoadedAPI
Resource
ResourceGroup
ResourceManagerQueueGetString
ReturnHr
ReturnNt
Revision
RichY&r
rL#.,=
RoActivateInstance
RoGetActivationFactory
RoInitialize
ROLLBACK /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
RoOriginateError
RoOriginateErrorW
RoRegisterActivationFactories
RoRevokeActivationFactories
RoTransformError
RoUninitialize
RpcBindingVectorFree
RpcEpRegisterW
RpcEpUnregister
RpcImpersonateClient
RpcImpersonateClient failed
RpcRevertToSelfEx
RPCRT4.dll
RpcServerInqBindings
RpcServerRegisterIf3
RpcServerUnregisterIf
RpcServerUseProtseqW
RPh(}
RqM7Z
RSDSm
RTKFs
RtlAcquireSRWLockExclusive
RtlAcquireSRWLockShared
RtlAllocateHeap
RtlCaptureStackBackTrace
RtlCompareUnicodeString
RtlConvertSidToUnicodeString
RtlCopySid
RtlDeleteCriticalSection
RtlDeleteElementGenericTableAvl
RtlDetermineDosPathNameType_U
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlDowncaseUnicodeString
RtlEnumerateGenericTableWithoutSplayingAvl
RtlEqualSid
RtlExpandEnvironmentStrings
RtlFreeHeap
RtlFreeUnicodeString
RtlGetDeviceFamilyInfoEnum
RtlInitializeGenericTableAvl
RtlInitUnicodeString
RtlInsertElementGenericTableAvl
RtlIsMultiUsersInSessionSku
RtlLengthSid
RtlLookupElementGenericTableAvl
RtlNotifyFeatureUsage
RtlNtStatusToDosErrorNoTeb
RtlQueryFeatureConfiguration
RtlRegisterFeatureConfigurationChangeNotification
RtlReleaseSRWLockExclusive
RtlReleaseSRWLockShared
RtlUnregisterFeatureConfigurationChangeNotification
RtlValidSid
Rundown
RuntimeType
RWPSQh`
s(VRh
SchemaUsed
SchemaVersion
Scope
ScratchOverflow
ScratchOverflowPeak
ScratchSizePeak
ScratchUsed
ScratchUsedPeak
SecondaryTile
SecondaryTileStatics::ActivateInstance
SecondaryTileStatics::Add
SecondaryTileStatics::ClearWorkByWorkId
SecondaryTileStatics::ctor
SecondaryTileStatics::Delete
SecondaryTileStatics::DeleteByWorkId
SecondaryTileStatics::dtor
SecondaryTileStatics::Exists
SecondaryTileStatics::Find
SecondaryTileStatics::Get
SecondaryTileStatics::TryGet
SecondaryTileStatics::Update
SecondaryTileStatics::UpdateWorkId
SecondaryTileUser
SecondaryTileUser.SecondaryTile->SecondaryTile.rowid
SecondaryTileUserChangelog
SecondaryTileUserChangelogStatics::ActivateInstance
SecondaryTileUserChangelogStatics::ctor
SecondaryTileUserChangelogStatics::DeleteBy::Created
SecondaryTileUserChangelogStatics::DeleteBy::Deleted
SecondaryTileUserChangelogStatics::DeleteByTileUniqueId
SecondaryTileUserChangelogStatics::DeleteByUserAndTileUniqueId
SecondaryTileUserChangelogStatics::dtor
SecondaryTileUserChangelogStatics::Exists
SecondaryTileUserChangelogStatics::ExistsBy_Created
SecondaryTileUserChangelogStatics::ExistsBy_Deleted
SecondaryTileUserChangelogStatics::ExistsByTileUniqueId
SecondaryTileUserChangelogStatics::ExistsByUser
SecondaryTileUserChangelogStatics::ExistsByUserAndTileUniqueId
SecondaryTileUserChangelogStatics::ExistsByWhenOccurred
SecondaryTileUserChangelogStatics::Find
SecondaryTileUserChangelogStatics::FindByUser
SecondaryTileUserChangelogStatics::FindByWhenOccurred
SecondaryTileUserChangelogStatics::Get
SecondaryTileUserChangelogStatics::GetBy_Created
SecondaryTileUserChangelogStatics::GetBy_Deleted
SecondaryTileUserChangelogStatics::GetByTileUniqueId
SecondaryTileUserChangelogStatics::GetByUserAndTileUniqueId
SecondaryTileUserChangelogStatics::TryGet
SecondaryTileUserChangelogStatics::TryGetBy_Created
SecondaryTileUserChangelogStatics::TryGetBy_Deleted
SecondaryTileUserChangelogStatics::TryGetByTileUniqueId
SecondaryTileUserChangelogStatics::TryGetByUserAndTileUniqueId
SecondaryTileUserDataChange::ctor
SecondaryTileUserDataChange::dtor
SecondaryTileUserNotificationChannel::ctor
SecondaryTileUserNotificationChannel::DeregisterForNotifications
SecondaryTileUserNotificationChannel::dtor
SecondaryTileUserNotificationChannel::RaiseNotification
SecondaryTileUserNotificationChannel::RegisterForNotifications
SecondaryTileUserNotificationChannelStatics::ActivateInstance
SecondaryTileUserNotificationChannelStatics::CreateForUser
SecondaryTileUserNotificationChannelStatics::CreateForUserSecurityIdentifier
SecondaryTileUserNotificationChannelStatics::CreateForUserSid
SecondaryTileUserNotificationChannelStatics::ctor
SecondaryTileUserNotificationChannelStatics::dtor
SecondaryTileUserStatics::ActivateInstance
SecondaryTileUserStatics::Add
SecondaryTileUserStatics::ClearWorkByWorkId
SecondaryTileUserStatics::ctor
SecondaryTileUserStatics::Delete
SecondaryTileUserStatics::DeleteByUserAndSecondaryTile
SecondaryTileUserStatics::DeleteByUserAndTileUniqueId
SecondaryTileUserStatics::DeleteByWorkId
SecondaryTileUserStatics::dtor
SecondaryTileUserStatics::Exists
SecondaryTileUserStatics::ExistsBy_Created
SecondaryTileUserStatics::ExistsBy_Modified
SecondaryTileUserStatics::ExistsByTileUniqueId
SecondaryTileUserStatics::ExistsByUser
SecondaryTileUserStatics::ExistsByUserAndApplicationIdentity
SecondaryTileUserStatics::ExistsByUserAndSecondaryTile
SecondaryTileUserStatics::Find
SecondaryTileUserStatics::FindBy_Created
SecondaryTileUserStatics::FindBy_Modified
SecondaryTileUserStatics::FindByUser
SecondaryTileUserStatics::FindByUserAndApplicationIdentity
SecondaryTileUserStatics::FindDataChangeByGTChangeId
SecondaryTileUserStatics::FindDataChangeByGTWhenOccurred
SecondaryTileUserStatics::FindDataChangeByUserAndGTChangeId
SecondaryTileUserStatics::FindDataChangeByUserAndGTWhenOccurred
SecondaryTileUserStatics::Get
SecondaryTileUserStatics::GetByTileUniqueId
SecondaryTileUserStatics::GetByUserAndSecondaryTile
SecondaryTileUserStatics::GetDataChangeByChangeId
SecondaryTileUserStatics::TryGet
SecondaryTileUserStatics::TryGetByTileUniqueId
SecondaryTileUserStatics::TryGetByUserAndSecondaryTile
SecondaryTileUserStatics::TryGetDataChangeByChangeId
SecondaryTileUserStatics::Update
SecondaryTileUserStatics::UpdateWorkId
SecondaryTileView
SecondaryTileViewStatics::ActivateInstance
SecondaryTileViewStatics::Add
SecondaryTileViewStatics::ctor
SecondaryTileViewStatics::Delete
SecondaryTileViewStatics::DeleteByTileUniqueId
SecondaryTileViewStatics::DeleteByUserAndApplicationAndTileId
SecondaryTileViewStatics::dtor
SecondaryTileViewStatics::Exists
SecondaryTileViewStatics::ExistsByTileUniqueId
SecondaryTileViewStatics::ExistsByUser
SecondaryTileViewStatics::ExistsByUserAndApplication
SecondaryTileViewStatics::ExistsByUserAndApplicationAndTileId
SecondaryTileViewStatics::ExistsByUserAndPackage
SecondaryTileViewStatics::Find
SecondaryTileViewStatics::FindByUser
SecondaryTileViewStatics::FindByUserAndApplication
SecondaryTileViewStatics::FindByUserAndPackage
SecondaryTileViewStatics::Get
SecondaryTileViewStatics::GetByTileUniqueId
SecondaryTileViewStatics::GetByUserAndApplicationAndTileId
SecondaryTileViewStatics::TryGet
SecondaryTileViewStatics::TryGetByTileUniqueId
SecondaryTileViewStatics::TryGetByUserAndApplicationAndTileId
SecondaryTileViewStatics::Update
SELECT "as"._AppServiceID, "as"._Revision, "as"._WorkId, "as".Name, "as".Extension, "as"."Index", "as"._Dictionary FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE "as".Name=?2 AND pu.User=?1 AND "as"._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT "as"._AppServiceID, "as"._Revision, "as"._WorkId, "as".Name, "as".Extension, "as"."Index", "as"._Dictionary FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE "as".Name=?2 AND pu.User=?1 AND ("as"._WorkId=0 OR "as"._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT _ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation WHERE ActivationKey IS ?;
SELECT _ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE _WorkId=0;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND _WorkId=0;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND _WorkId=0;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Extension=? AND _WorkId=0;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=? AND Alias=?;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=?;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary FROM AppExecutionAliasUser WHERE ApplicationIdentity=?;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary FROM AppExecutionAliasUser WHERE User=?;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary FROM AppExecutionAliasUser;
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE _WorkId=0;
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE Extension=? AND _WorkId=0;
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE Extension=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE Extension=? AND Name=? AND _WorkId=0;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE _WorkId=0;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Extension=? AND _WorkId=0;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Extension=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Extension=? AND Name=? AND _WorkId=0;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Name=? AND _WorkId=0;
SELECT _AppInstallerID, _Revision, PackageFamily, Uri, Version, LastChecked, CheckUpdateInterval, Flags, PauseUntil, _Dictionary FROM AppInstaller WHERE Uri=?;
SELECT _AppInstallerID, _Revision, PackageFamily, Uri, Version, LastChecked, CheckUpdateInterval, Flags, PauseUntil, _Dictionary FROM AppInstaller;
SELECT _AppInstallerUriID, _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0 AND "Index"=?;
SELECT _AppInstallerUriID, _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0 AND Uri=?;
SELECT _AppInstallerUriID, _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0;
SELECT _AppInstallerUriID, _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary FROM AppInstallerUri WHERE AppInstaller=?;
SELECT _AppInstallerUriID, _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary FROM AppInstallerUri;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE _WorkId=0;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND "Index"=? AND _WorkId=0;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY "Index";
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0 ORDER BY "Index";
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND "Index"=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND Category=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Category=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE ApplicationUserModelId=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE EditionId IS ? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND _WorkId=0;
SELECT _ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary FROM ApplicationIdentity WHERE ApplicationUserModelId=?;
SELECT _ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary FROM ApplicationIdentity;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND "Index"=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND Name=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Name=? AND _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Extension=? AND "Index"=? AND _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Extension=? AND _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Name=? AND _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Name=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Name=? AND Extension=? AND _WorkId=0;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE _WorkId=0;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Extension=? AND _WorkId=0;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Name=? AND _WorkId=0;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Name=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Name=? AND Extension=? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE Extension=? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE HostName=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE HostName=? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE HostName=? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE HostName=? AND Extension=? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE ProgID IS ? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE ProgID IS ? AND Extension=? AND _WorkId=0;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE _WorkId=0;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE Package=? AND _WorkId=0;
SELECT _AutoUpdatePackageID, _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary FROM AutoUpdatePackage WHERE AppInstaller=? AND PackageFamily=? AND Version=? AND Architecture=?;
SELECT _AutoUpdatePackageID, _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary FROM AutoUpdatePackage WHERE AppInstaller=? AND PackageFamily=? AND Version=?;
SELECT _AutoUpdatePackageID, _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary FROM AutoUpdatePackage WHERE AppInstaller=? AND PackageFamily=?;
SELECT _AutoUpdatePackageID, _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary FROM AutoUpdatePackage WHERE AppInstaller=?;
SELECT _AutoUpdatePackageID, _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary FROM AutoUpdatePackage;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE (_WorkId=0 OR _WorkId=?);
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Extension=? AND "Index"=? AND _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Extension=? AND _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Type=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Type=? AND _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Type=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Type=? AND Extension=? AND _WorkId=0;
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE (_WorkId=0 OR _WorkId=?);
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _WorkId=0;
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE Package=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND Bundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND Bundle=? AND _WorkId=0;
SELECT _CacheActivationID, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup FROM CacheActivation;
SELECT _CacheAppExtensionID, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM CacheAppExtension;
SELECT _CacheApplicationExtensionID, Application, "Index", Flags, Category, Activation, HostId, Parameters, CurrentDirectoryPath, _Dictionary FROM CacheApplicationExtension;
SELECT _CacheApplicationID, Package, "Index", Flags, PackageRelativeApplicationId, ApplicationUserModelId, Activation, HostId, Parameters, CurrentDirectoryPath, Executable, Entrypoint, StartPage FROM CacheApplication;
SELECT _CacheApplicationUserID, User, ApplicationIdentity, Application, PackageUser, ApplicationUserModelId FROM CacheApplicationUser;
SELECT _CacheAppUriHandlerGroupID, Name, Extension FROM CacheAppUriHandlerGroup;
SELECT _CacheAppUriHandlerID, HostName, Path, Extension, ProgID, AppUriHandlerGroup FROM CacheAppUriHandler;
SELECT _CacheDependencyGraphID, User, DependentPackage, SupplierPackage, "Index", DependencyType FROM CacheDependencyGraph WHERE DependencyType & ?1 !=0;
SELECT _CacheDependencyGraphID, User, DependentPackage, SupplierPackage, "Index", DependencyType FROM CacheDependencyGraph;
SELECT _CacheDynamicAppUriHandlerGroupID, User, PackageFamily, Name FROM CacheDynamicAppUriHandlerGroup;
SELECT _CacheDynamicAppUriHandlerID, DynamicAppUriHandlerGroup, HostName, Path, ProgID FROM CacheDynamicAppUriHandler;
SELECT _CacheFileTypeAssociationID, Extension, FileType, ProgID FROM CacheFileTypeAssociation;
SELECT _CacheHostRuntimeID, PackageExtension, HostId FROM CacheHostRuntime;
SELECT _CachePackageExtensionID, Package, "Index", Flags, Category, Activation, HostId, Parameters, CurrentDirectoryPath FROM CachePackageExtension;
SELECT _CachePackageExternalLocationID, User, Package, Path FROM CachePackageExternalLocation;
SELECT _CachePackageFamilyID, PackageFamilyName, PackageSID, Publisher FROM CachePackageFamily;
SELECT _CachePackageID, PackageFullName, PackageFamily, PackageType, Flags, Flags2, PackageOrigin, Volume, OSMaxVersionTested, InstalledLocation, MutableLink, MutableLocation, TargetDeviceFamilyName FROM CachePackage;
SELECT _CachePackageMachineStatusID, PackageIdentity, PackageFullName, Status FROM CachePackageMachineStatus;
SELECT _CachePackageUserID, Package, User, InstallTime FROM CachePackageUser;
SELECT _CachePackageUserStatusID, User, PackageIdentity, PackageFullName, Status FROM CachePackageUserStatus;
SELECT _CacheProtocolID, Extension, Name, ProgID FROM CacheProtocol;
SELECT _CacheUserID, UserSid FROM CacheUser;
SELECT _ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary FROM ConnectedSet WHERE Name=?;
SELECT _ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary FROM ConnectedSet;
SELECT _ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary FROM ConnectedSetPackageFamily WHERE ConnectedSet=? AND PackageFamily=?;
SELECT _ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary FROM ConnectedSetPackageFamily WHERE ConnectedSet=?;
SELECT _ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary FROM ConnectedSetPackageFamily;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE _WorkId=0;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE ContentGroup=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE ContentGroup=? AND _WorkId=0;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE ContentGroup=? AND File=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE ContentGroup=? AND File=? AND _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY "Index";
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND _WorkId=0 ORDER BY "Index";
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND _WorkId=0;
SELECT _DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE _WorkId=0;
SELECT _DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE Application=? AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=?1) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 ORDER BY "Index";
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=?5) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=?5))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 ORDER BY "Index";
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0;
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE (_WorkId=0 OR _WorkId=?);
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE _WorkId=0;
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE PackageIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE PackageIdentity=? AND _WorkId=0;
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE User=? AND _WorkId=0;
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE WhenOccurred=? AND _WorkId=0;
SELECT _DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=? AND Name=?;
SELECT _DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=?;
SELECT _DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup WHERE User=?;
SELECT _DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE DynamicAppUriHandlerGroup=?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE HostName=? AND DynamicAppUriHandlerGroup=?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE HostName=?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE ProgID IS ? AND DynamicAppUriHandlerGroup=?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE ProgID IS ?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary FROM DynamicAppUriHandler;
SELECT _EndOfLifePackage, _Revision, PackageFamily, _Dictionary FROM EndOfLifePackage WHERE PackageFamily=?;
SELECT _EndOfLifePackage, _Revision, PackageFamily, _Dictionary FROM EndOfLifePackage;
SELECT _EnterpriseID, _Revision, EnterpriseId, _Dictionary FROM Enterprise WHERE EnterpriseId=?;
SELECT _EnterpriseID, _Revision, EnterpriseId, _Dictionary FROM Enterprise;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE (_WorkId=0 OR _WorkId=?);
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Digest=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Digest=? AND _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND RelativeFilePath=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND RelativeFilePath=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ContentType IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ContentType IS ? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ContentType IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ContentType IS ? AND Extension=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE Extension=? AND "Index"=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE Extension=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE FileType=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE FileType=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE FileType=? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE FileType=? AND Extension=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ProgID IS ? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ProgID IS ? AND Extension=? AND _WorkId=0;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE (_WorkId=0 OR _WorkId=?);
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE _WorkId=0;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE HostId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE HostId=? AND _WorkId=0;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE PackageExtension=? AND _WorkId=0;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE PackageExtension=? AND HostId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE PackageExtension=? AND HostId=? AND _WorkId=0;
SELECT _MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE _WorkId=0;
SELECT _MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE PatchId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE PatchId=? AND _WorkId=0;
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE _WorkId=0;
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE Application=? AND _WorkId=0;
SELECT _MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE _WorkId=0;
SELECT _MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE DefaultTile=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE DefaultTile=? AND _WorkId=0;
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE _WorkId=0;
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE Package=? AND _WorkId=0;
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE _WorkId=0;
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE Filename=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE Filename=? AND _WorkId=0;
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE Package=? AND _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE MrtSharedPri=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE MrtSharedPri=? AND _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE Package=? AND _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE Package=? AND User=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE Package=? AND User=? AND _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE User=? AND _WorkId=0;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE (_WorkId=0 OR _WorkId=?);
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE _WorkId=0;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND _WorkId=0;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND DependencyType=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND DependencyType=? AND "Index"=? AND _WorkId=0;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND DependencyType=? AND (_WorkId=0 OR _WorkId=?);
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND DependencyType=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND Publisher=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE _WorkId=0;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE AppInstaller=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE AppInstaller=? AND _WorkId=0;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE Package=? AND _WorkId=0;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE Package=? AND AppInstaller=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE Package=? AND AppInstaller=? AND _WorkId=0;
SELECT _PackageDependencyID, _Revision, PackageDependencyId, User, PackageFamilyName, PackageFamily, MinVersion, Architectures, LifetimeKind, LifetimeArtifact, Flags, _Dictionary FROM PackageDependency WHERE PackageDependencyId=?;
SELECT _PackageDependencyID, _Revision, PackageDependencyId, User, PackageFamilyName, PackageFamily, MinVersion, Architectures, LifetimeKind, LifetimeArtifact, Flags, _Dictionary FROM PackageDependency;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Category=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND Category=? AND _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY User DESC, _WorkId DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND _WorkId=0 ORDER BY User DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE Package=? AND _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE Name=? AND PublisherId=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE Name=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PackageFamilyName=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PackageSID=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PublisherId=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser WHERE PackageFamily=?;
SELECT _PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser WHERE User=? AND PackageFamily=?;
SELECT _PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser WHERE User=?;
SELECT _PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser;
SELECT _PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource WHERE PackageFamilyUser=? AND ResourceId=?;
SELECT _PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource WHERE PackageFamilyUser=?;
SELECT _PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE EditionId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageOrigin=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageOrigin=?1 AND (_WorkId=0 OR _WorkId=?2);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND _WorkId=0;
SELECT _PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE PackageFamily=?;
SELECT _PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE PackageFullName=?;
SELECT _PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE _WorkId=0;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE InstalledLocation=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE InstalledLocation=? AND _WorkId=0;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE Package=? AND _WorkId=0;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE Volume=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE Volume=? AND _WorkId=0;
SELECT _PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary FROM PackageMachineStatus WHERE PackageIdentity=?;
SELECT _PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary FROM PackageMachineStatus;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Name=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE _WorkId=0;
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND _WorkId=0;
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND Kind=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND Kind=? AND _WorkId=0;
SELECT _PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded WHERE PackageIdentity=?;
SELECT _PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded WHERE User=? AND PackageIdentity=?;
SELECT _PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded WHERE User=?;
SELECT _PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE AppDataVolume=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE AppDataVolume=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE Package=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary FROM PackageUserStatus WHERE User=? AND PackageIdentity=?;
SELECT _PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary FROM PackageUserStatus WHERE User=?;
SELECT _PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary FROM PackageUserStatus;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND TileId=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Package=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Application=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Application=? AND TileId=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Package=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND Application=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _Created=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE User=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE WhenOccurred=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _Created=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _Created=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _Modified=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _Modified=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE ApplicationIdentity=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND TileUniqueId=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE Extension=? AND "Index"=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE Extension=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProgID IS ? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProgID IS ? AND Extension=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND Extension=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND ReturnResults=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND ReturnResults=? AND _WorkId=0;
SELECT _ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary FROM ProvisionedPackageExclude WHERE PackageFamily=?;
SELECT _ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary FROM ProvisionedPackageExclude;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackage WHERE PackageIdentity=?;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackage WHERE Path=?;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackage;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackageDeleted WHERE PackageIdentity=?;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackageDeleted WHERE Path=?;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackageDeleted;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE FolderName IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE FolderName IS ? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND "Index"=? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND FolderName IS ? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND FolderName IS ? AND _WorkId=0;
SELECT _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE _SRHistoryID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE _SRHistoryID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _PrimaryTileUserChangelogID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _PrimaryTileUserChangelogID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _SecondaryTileUserChangelogID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _SecondaryTileUserChangelogID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _DependencyGraphID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _DependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE _AppExecutionAliasID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE _AppExecutionAliasID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE _ApplicationContentUriRuleID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE _ApplicationContentUriRuleID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE _MrtApplicationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE _MrtApplicationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE _PrimaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE _PrimaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE _SecondaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE _TileViewID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE _TileViewID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE _DefaultTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE _DefaultTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE _BundlePackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE _BundlePackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE _ContentGroupFileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE _ContentGroupFileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE _MrtDefaultTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE _MrtDefaultTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE _NamedDependncyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE _NamedDependncyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE _AppExtensionHostID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE _AppExtensionHostID=? AND _WorkId=0;
SELECT _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE _FileTypeAssociationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE _FileTypeAssociationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM SecondaryTile WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM SecondaryTile WHERE _SecondaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE _HostRuntimeID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE _HostRuntimeID=? AND _WorkId=0;
SELECT _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE _AppUriHandlerID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE _AppUriHandlerID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND _WorkId=0;
SELECT _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE _OptionalBundleID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE _OptionalBundleID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE _AppServiceID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE _AppServiceID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE _AppExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE _AppExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _ApplicationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE _PackageExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE _PackageExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _PackagePropertyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _PackagePropertyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE _ContentGroupID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE _ContentGroupID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE _PackageAppInstallerID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE _PackageAppInstallerID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE _MrtPackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE _MrtPackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE _XboxPackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE _XboxPackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE _MrtSharedPriID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE _MrtSharedPriID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE _FileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE _FileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE _AppxManifestID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE _AppxManifestID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _BundleID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _BundleID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE _PackageSourceUriID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE _PackageSourceUriID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE _MrtUserPriID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE _MrtUserPriID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE _PackageLocationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE _PackageLocationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE _PublisherCacheFolderID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE _PublisherCacheFolderID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE _DeploymentHistoryID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE _DeploymentHistoryID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE _MigratorPatchID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE _MigratorPatchID=? AND _WorkId=0;
SELECT _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE _ProtocolID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE _ProtocolID=? AND _WorkId=0;
SELECT _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE _SharedPackageContainerPackageFamilyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE _SharedPackageContainerPackageFamilyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE _BackgroundTaskID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE _BackgroundTaskID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE _PackagePolicyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE _PackagePolicyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE _PackageExternalLocationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE _PackageExternalLocationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND _WorkId=0;
SELECT _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation WHERE _ActivationID=?;
SELECT _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary FROM AppInstallerUri WHERE _AppInstallerUriID=?;
SELECT _Revision, ApplicationUserModelId, _Dictionary FROM ApplicationIdentity WHERE _ApplicationIdentityID=?;
SELECT _Revision, ConnectedSet, PackageFamily, _Dictionary FROM ConnectedSetPackageFamily WHERE _ConnectedSetPackageFamilyID=?;
SELECT _Revision, DynamicAppUriHandlerGroup, HostName, Path, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE _DynamicAppUriHandlerID=?;
SELECT _Revision, EnterpriseId, _Dictionary FROM Enterprise WHERE _EnterpriseID=?;
SELECT _Revision, Name, Flags, Status, _Dictionary FROM ConnectedSet WHERE _ConnectedSetID=?;
SELECT _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE _PackageFamilyID=?;
SELECT _Revision, PackageFamily, _Dictionary FROM EndOfLifePackage WHERE _EndOfLifePackage=?;
SELECT _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary FROM AutoUpdatePackage WHERE _AutoUpdatePackageID=?;
SELECT _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE _PackageIdentityID=?;
SELECT _Revision, PackageFamily, Uri, Version, LastChecked, CheckUpdateInterval, Flags, PauseUntil, _Dictionary FROM AppInstaller WHERE _AppInstallerID=?;
SELECT _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser WHERE _PackageFamilyUserID=?;
SELECT _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource WHERE _PackageFamilyUserResourceID=?;
SELECT _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackage WHERE _ProvisionedPackageID=?;
SELECT _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackageDeleted WHERE _ProvisionedPackageID=?;
SELECT _Revision, PackageIdentity, Status, _Dictionary FROM PackageMachineStatus WHERE _PackageMachineStatusID=?;
SELECT _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded WHERE _PackageSupercededID=?;
SELECT _Revision, PackageIdentity, User, Status, _Dictionary FROM PackageUserStatus WHERE _PackageUserStatusID=?;
SELECT _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary FROM AppExecutionAliasUser WHERE _AppExecutionAliasUserID=?;
SELECT _Revision, User, PackageFamily, _Dictionary FROM ProvisionedPackageExclude WHERE _ProvisionedPackageExcludeID=?;
SELECT _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup WHERE _DynamicAppUriHandlerGroupID=?;
SELECT _Revision, UserSid, _Dictionary FROM User WHERE _UserID=?;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE TileUniqueId=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Application=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Package=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM SecondaryTile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM SecondaryTile WHERE _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _Created=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE User=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE WhenOccurred=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _Created=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _Created=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _Modified=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _Modified=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE TileUniqueId=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND TileUniqueId=? AND _WorkId=0;
SELECT _SequenceID, Id, LastValue FROM Sequence WHERE Id=?;
SELECT _SequenceID, Id, LastValue FROM Sequence;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE _WorkId=0;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE Id=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE Id=? AND _WorkId=0;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE User=? AND _WorkId=0;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE User=? AND Name=? AND _WorkId=0;
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE _WorkId=0;
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND _WorkId=0;
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND PackageFamilyName=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND PackageFamilyName=? AND _WorkId=0;
SELECT _SRHistoryID, _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SRHistoryID, _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE _WorkId=0;
SELECT _SRHistoryID, _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE PackageIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SRHistoryID, _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE PackageIdentity=? AND _WorkId=0;
SELECT _SRHistoryID, _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SRHistoryID, _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE User=? AND _WorkId=0;
SELECT _SRHistoryID, _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SRHistoryID, _Revision, _WorkId, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary FROM SRHistory WHERE WhenOccurred=? AND _WorkId=0;
SELECT _SRJournalID, _Revision, _WorkId, ObjectType, "Action", ObjectId, Flags, User, PackageFamily, PackageIdentity, ApplicationIdentity, Application, Package, PackageUser, WhenOccurred, SequenceId, _Dictionary FROM SRJournal WHERE (_WorkId=0 OR _WorkId=?) ORDER BY SequenceId;
SELECT _SRJournalID, _Revision, _WorkId, ObjectType, "Action", ObjectId, Flags, User, PackageFamily, PackageIdentity, ApplicationIdentity, Application, Package, PackageUser, WhenOccurred, SequenceId, _Dictionary FROM SRJournal WHERE _WorkId=0 ORDER BY SequenceId;
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE (_WorkId=0 OR _WorkId=?);
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _WorkId=0;
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE Package=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Application=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Application=? AND TileId=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Package=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE TileUniqueId=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND Application=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND Package=? AND _WorkId=0;
SELECT _UserID FROM User WHERE UserSid=?;
SELECT _UserID, _Revision, UserSid, _Dictionary FROM User WHERE UserSid=?;
SELECT _UserID, _Revision, UserSid, _Dictionary FROM User;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE ChangeId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE ChangeId=? AND _WorkId=0;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE ChangeId>? AND (_WorkId=0 OR _WorkId=?) ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE ChangeId>? AND _WorkId=0 ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE User=? AND ChangeId>? AND (_WorkId=0 OR _WorkId=?) ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE User=? AND ChangeId>? AND _WorkId=0 ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE User=? AND WhenOccurred>? AND (_WorkId=0 OR _WorkId=?) ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE User=? AND WhenOccurred>? AND _WorkId=0 ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE WhenOccurred>? AND (_WorkId=0 OR _WorkId=?) ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE WhenOccurred>? AND _WorkId=0 ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE ChangeId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE ChangeId=? AND _WorkId=0;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE ChangeId>? AND (_WorkId=0 OR _WorkId=?) ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE ChangeId>? AND _WorkId=0 ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE User=? AND ChangeId>? AND (_WorkId=0 OR _WorkId=?) ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE User=? AND ChangeId>? AND _WorkId=0 ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE User=? AND WhenOccurred>? AND (_WorkId=0 OR _WorkId=?) ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE User=? AND WhenOccurred>? AND _WorkId=0 ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE WhenOccurred>? AND (_WorkId=0 OR _WorkId=?) ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE WhenOccurred>? AND _WorkId=0 ORDER BY WhenOccurred;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE ContentId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE ContentId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE DeviceId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE DeviceId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EditionId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EditionId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EscrowedKeyBlobId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EscrowedKeyBlobId IS ? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE Package=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE ProductId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE ProductId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE TitleId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE TitleId IS ? AND _WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND a.AppListEntry==?3 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND a.AppListEntry==?3 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=? AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) ;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=? AND a._WorkId=0 AND p._WorkId=0 ;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN ApplicationExtension AS ae ON ae.Application=a._ApplicationID WHERE ae.Category='windows.appExecutionAlias' AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN ApplicationExtension AS ae ON ae.Application=a._ApplicationID WHERE ae.Category='windows.appExecutionAlias' AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 AND ae._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a._ApplicationID=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a._ApplicationID=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.AppListEntry=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.AppListEntry=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE a.ApplicationUserModelId=?2 AND p.PackageFullName=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE a.ApplicationUserModelId=?2 AND p.PackageFullName=?1 AND a._WorkId=0 AND p._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=? AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=? AND a._WorkId=0 AND p._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0;
SELECT a.ApplicationType FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY a._WorkId DESC;
SELECT a.ApplicationType FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0;
SELECT abt._BackgroundTaskID, abt._Revision, abt._WorkId, abt.Type, abt.Extension, abt."Index", abt._Dictionary FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE abt.Type=?2 AND pu.User=?1 AND (abt._WorkId=0 OR abt._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT abt._BackgroundTaskID, abt._Revision, abt._WorkId, abt.Type, abt.Extension, abt."Index", abt._Dictionary FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE abt.Type=?2 AND pu.User=?1 AND abt._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup FROM CacheActivation WHERE _CacheActivationID=?;
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Package AS p ON p._PackageID=a.Package WHERE (pu.User=?1 OR (pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4))) AND p.PackageFullName=?2 AND ae.Name=?3 AND ae._WorkId=0 AND ae2._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 AND p._WorkId=0
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Package AS p ON p._PackageID=a.Package WHERE (pu.User=?1 OR (pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4)))F AND p.PackageFullName=?2 AND ae.Name=?3 AND (ae._WorkId=0 OR ae._WorkId=?5) AND (ae2._WorkId=0 OR ae2._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (pu._WorkId=0 OR pu._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5)
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE (pu.User=?1 OR (pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3))) AND ae.Name=?2 AND ae._WorkId=0 AND ae2._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE (pu.User=?1 OR (pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3))) AND AND ae.Name=?2 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (ae2._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND a.ApplicationUserModelId=?3 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND p.PackageFullName=?3 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND p.PackageFullName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.fileTypeAssociation' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND fta.FileType=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pu._WorkId=0 OR pu._WorkId=?6) AND (fta._WorkId=0 OR fta._WorkId=?6);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.fileTypeAssociation' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND fta.FileType=?3 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 AND fta._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.protocol' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pr.ProtocolName=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pu._WorkId=0 OR pu._WorkId=?6) AND (pr._WorkId=0 OR pr._WorkId=?6);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.protocol' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pr.ProtocolName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 AND pr._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE ae.Category=?2 AND pu.User=?1 AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE ae.Category=?2 AND pu.User=?1 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID LEFT JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId LEFT JOIN AppExecutionAliasUser AS aeau ON aeau.ApplicationIdentity=ai._ApplicationIdentityID AND aeau.Alias=aea.Alias WHERE aea.Alias=?2 AND pu.User=?1 AND IFNULL(aeau.Status, 0)<>2 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY IFNULL(aeau.Status, 0), pu.InstallTime;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID LEFT JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId LEFT JOIN AppExecutionAliasUser AS aeau ON aeau.ApplicationIdentity=ai._ApplicationIdentityID AND aeau.Alias=aea.Alias WHERE aea.Alias=?2 AND pu.User=?1 AND IFNULL(aeau.Status, 0)<>2 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 ORDER BY IFNULL(aeau.Status, 0), pu.InstallTime;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ap._ApplicationPropertyID, ap._Revision, ap._WorkId, ap.Application, ap."Index", ap.Name, ap._Dictionary FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND (ap._WorkId=0 OR ap._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT ap._ApplicationPropertyID, ap._Revision, ap._WorkId, ap.Application, ap."Index", ap.Name, ap._Dictionary FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND ap._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT Application, "Index", Flags, Category, Activation, HostId, Parameters, CurrentDirectoryPath, _Dictionary FROM CacheApplicationExtension WHERE _CacheApplicationExtensionID=?;
SELECT ApplicationUserModelId FROM TileView AS tv WHERE tv.TileUniqueId=? AND (tv._WorkId=0 AND tv._WorkId=?);
SELECT ApplicationUserModelId FROM TileView AS tv WHERE tv.TileUniqueId=? AND tv._WorkId=0;
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Path, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?3) AND pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Path, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?3) AND pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Path, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.ProgId=?2 AND pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Path, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.ProgId=?2 AND pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Path, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Path, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT auhg._AppUriHandlerGroupID, auhg._Revision, auhg._WorkId, auhg.Name, auhg.Extension, auhg._Dictionary FROM AppUriHandlerGroup AS auhg INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND auhg.Name=?3 AND (auhg._WorkId=0 OR auhg._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT auhg._AppUriHandlerGroupID, auhg._Revision, auhg._WorkId, auhg.Name, auhg.Extension, auhg._Dictionary FROM AppUriHandlerGroup AS auhg INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND auhg.Name=?3 AND auhg._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT COUNT(*) FROM PackageDependency;
SELECT COUNT(*), GROUP_CONCAT(_BundleID) FROM (SELECT b._BundleId FROM Source.Bundle AS b WHERE b.Package NOT IN(SELECT p._PackageID FROM Source.Package AS p)UNION SELECT b._BundleID FROM Source.Bundle AS b INNER JOIN Source.Package AS p ON p._PackageID=b.Package WHERE p.SourceBundle<>b._BundleID);
SELECT COUNT(*), GROUP_CONCAT(pu.rowid) FROM PackageUser AS pu INNER JOIN Package AS p on p._PackageID=pu.Package WHERE p.PackageOrigin=2 AND pu.DeploymentState=6;
SELECT COUNT(*), GROUP_CONCAT(pus.rowid) FROM PackageUserStatus as pus WHERE pus.PackageIdentity NOT IN ( SELECT _PackageIdentityID FROM PackageIdentity AS pi INNER JOIN Package AS p ON pi.PackageFullName=p.PackageFullName);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAlias WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAliasUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAliasUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExtension WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExtensionHost WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppInstaller WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppInstallerUri WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Application WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Application WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationBackgroundTask WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationContentUriRule WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationExtension WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationProperty WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppService WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandler WHERE (AppUriHandlerGroup>0) AND (AppUriHandlerGroup NOT IN (SELECT _AppUriHandlerGroupID FROM AppUriHandlerGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandler WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandlerGroup WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxExtension WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxManifest WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AutoUpdatePackage WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AutoUpdatePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Bundle WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM BundlePackage WHERE (Bundle>0) AND (Bundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM BundleResource WHERE (BundlePackage>0) AND (BundlePackage NOT IN (SELECT _BundlePackageID FROM BundlePackage));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ConnectedSetPackageFamily WHERE (ConnectedSet>0) AND (ConnectedSet NOT IN (SELECT _ConnectedSetID FROM ConnectedSet));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ConnectedSetPackageFamily WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroup WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroupFile WHERE (ContentGroup>0) AND (ContentGroup NOT IN (SELECT _ContentGroupID FROM ContentGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroupFile WHERE (File>0) AND (File NOT IN (SELECT _FileID FROM File));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallWork WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallWork WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DefaultTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Dependency WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DeploymentHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DeploymentHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandler WHERE (DynamicAppUriHandlerGroup>0) AND (DynamicAppUriHandlerGroup NOT IN (SELECT _DynamicAppUriHandlerGroupID FROM DynamicAppUriHandlerGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandlerGroup WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandlerGroup WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM EndOfLifePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM File WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM FileTypeAssociation WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM HostRuntime WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtApplication WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtDefaultTile WHERE (DefaultTile>0) AND (DefaultTile NOT IN (SELECT _DefaultTileID FROM DefaultTile));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtSharedPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (MrtSharedPri>0) AND (MrtSharedPri NOT IN (SELECT _MrtSharedPriID FROM MrtSharedPri));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM NamedDependency WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundle WHERE (MainBundle>0) AND (MainBundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundlePackage WHERE (OptionalBundle>0) AND (OptionalBundle NOT IN (SELECT _OptionalBundleID FROM OptionalBundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundleResource WHERE (OptionalBundlePackage>0) AND (OptionalBundlePackage NOT IN (SELECT _OptionalBundlePackageID FROM OptionalBundlePackage));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (Enterprise>0) AND (Enterprise NOT IN (SELECT _EnterpriseID FROM Enterprise));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (SourceBundle>0) AND (SourceBundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (TargetDeviceFamily>0) AND (TargetDeviceFamily NOT IN (SELECT _TargetDeviceFamilyID FROM TargetDeviceFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE _PackageID IN (SELECT p_PackageID FROM (SELECT p_PackageID, EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Package AS p ON bp.Version=p.Version AND bp.Architecture=p.Architecture AND ((bp.ResourceId=p.ResourceId) OR (bp.ResourceId IS NULL AND p.ResourceId IS NULL)) WHERE bp.PackageType=0 AND bp.Bundle=p_SourceBundle AND p.PackageFamily=p_PackageFamily AND bp._WorkId=0 AND p._WorkId=0 LIMIT 1) AS hasPackages FROM (SELECT p._PackageID AS p_PackageID, p.PackageFamily AS p_PackageFamily, p.SourceBundle AS p_SourceBundle FROM Package AS p WHERE p.PackageType & 8 != 0 AND p.SourceBundle <> 0 AND p._WorkId=0)) WHERE hasPackages=0);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE _PackageID NOT IN (SELECT Package FROM PackageUser);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageAppInstaller WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageAppInstaller WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageDependency WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageDependency WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExternalLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExternalLocation WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyPolicy WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyPolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUser WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUserResource WHERE (PackageFamilyUser>0) AND (PackageFamilyUser NOT IN (SELECT _PackageFamilyUserID FROM PackageFamilyUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageIdentity WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageMachineStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackagePolicy WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackagePolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageProperty WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSourceUri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSuperceded WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSuperceded WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUserStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUserStatus WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTile WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Protocol WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackage WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageDeleted WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageExclude WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageExclude WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PublisherCacheFolder WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Resource WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTile WHERE SecondaryTile._SecondaryTileID NOT IN (SELECT SecondaryTile FROM SecondaryTileUser);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (SecondaryTile>0) AND (SecondaryTile NOT IN (SELECT _SecondaryTileID FROM SecondaryTile));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SharedPackageContainer WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SharedPackageContainerPackageFamily WHERE (SharedPackageContainer>0) AND (SharedPackageContainer NOT IN (SELECT _SharedPackageContainerID FROM SharedPackageContainer));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM TargetDeviceFamily WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM XboxPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT dauhg._DynamicAppUriHandlerGroupID, dauhg._Revision, dauhg.User, dauhg.PackageFamily, dauhg.Name, dauhg._Dictionary FROM DynamicAppUriHandlerGroup AS dauhg INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily WHERE dauhg.User=? AND pf.PackageFamilyName=? AND dauhg.Name=?;
SELECT DynamicAppUriHandlerGroup, HostName, Path, ProgID FROM CacheDynamicAppUriHandler WHERE _CacheDynamicAppUriHandlerID=?;
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageFullName=?2 AND pu.DeploymentState=?3 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageFullName=?2 AND pu.DeploymentState=?3 AND pu._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Activation WHERE _ActivationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Activation WHERE ActivationKey IS ? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE _AppExecutionAliasID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE _AppExecutionAliasID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Alias=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Alias=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE _AppExecutionAliasUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=? AND Alias=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE ApplicationIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE _AppExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE _AppExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Extension=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Extension=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost AS aeh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aeh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND aeh.Name=?3 AND (aeh._WorkId=0 OR aeh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4))
SELECT EXISTS(SELECT 1 FROM AppExtensionHost AS aeh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aeh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND aeh.Name=?3 AND aeh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0)
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE _AppExtensionHostID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE _AppExtensionHostID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE Extension=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE Extension=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstaller WHERE _AppInstallerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstaller WHERE Uri=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstallerUri WHERE _AppInstallerUriID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0 AND "Index"=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0 AND Uri=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstallerUri WHERE AppInstaller=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=?1 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4)  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3)  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND a._WorkId=0  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE _ApplicationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE ApplicationUserModelId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE EditionId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE abt.Type=?2 AND pu.User=?1 AND (abt._WorkId=0 OR abt._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE abt.Type=?2 AND pu.User=?1 AND abt._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE _BackgroundTaskID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE _BackgroundTaskID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Extension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Type=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Type=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Type=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Type=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE _ApplicationContentUriRuleID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE _ApplicationContentUriRuleID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE Application=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationIdentity WHERE _ApplicationIdentityID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationIdentity WHERE ApplicationUserModelId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND (ap._WorkId=0 OR ap._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND ap._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE "as".Name=?2 AND pu.User=?1 AND "as"._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE "as".Name=?2 AND pu.User=?1 AND ("as"._WorkId=0 OR "as"._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE _AppServiceID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE _AppServiceID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Extension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Name=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Name=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?3) AND pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?3) AND pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.ProgId=?2 AND pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.ProgId=?2 AND pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE _AppUriHandlerID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE _AppUriHandlerID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE HostName=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE HostName=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE HostName=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE HostName=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE ProgID IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE ProgID IS ? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Name=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Name=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE _AppxManifestID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE _AppxManifestID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AutoUpdatePackage WHERE _AutoUpdatePackageID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AutoUpdatePackage WHERE AppInstaller=? AND PackageFamily=? AND Version=? AND Architecture=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AutoUpdatePackage WHERE AppInstaller=? AND PackageFamily=? AND Version=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AutoUpdatePackage WHERE AppInstaller=? AND PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AutoUpdatePackage WHERE AppInstaller=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Bundle WHERE _BundleID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Bundle WHERE _BundleID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Bundle WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Bundle WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE _BundlePackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE _BundlePackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE PackageType=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE PackageType=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE PackageType=? AND Bundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE PackageType=? AND Bundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheActivation WHERE _CacheActivationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheAppExtension WHERE _CacheAppExtensionID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheApplication WHERE _CacheApplicationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheApplicationExtension WHERE _CacheApplicationExtensionID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheApplicationUser WHERE _CacheApplicationUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheAppUriHandler WHERE _CacheAppUriHandlerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheAppUriHandlerGroup WHERE _CacheAppUriHandlerGroupID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheDependencyGraph WHERE _CacheDependencyGraphID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheDynamicAppUriHandler WHERE _CacheDynamicAppUriHandlerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheDynamicAppUriHandlerGroup WHERE _CacheDynamicAppUriHandlerGroupID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheFileTypeAssociation WHERE _CacheFileTypeAssociationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheHostRuntime WHERE _CacheHostRuntimeID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackage WHERE _CachePackageID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageExtension WHERE _CachePackageExtensionID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageExternalLocation WHERE _CachePackageExternalLocationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageFamily WHERE _CachePackageFamilyID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageMachineStatus WHERE _CachePackageMachineStatusID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageUser WHERE _CachePackageUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageUserStatus WHERE _CachePackageUserStatusID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheProtocol WHERE _CacheProtocolID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheUser WHERE _CacheUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSet WHERE _ConnectedSetID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSet WHERE Name=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSetPackageFamily WHERE _ConnectedSetPackageFamilyID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSetPackageFamily WHERE ConnectedSet=? AND PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSetPackageFamily WHERE ConnectedSet=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE _ContentGroupID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE _ContentGroupID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE _ContentGroupFileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE _ContentGroupFileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE ContentGroup=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE ContentGroup=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE ContentGroup=? AND File=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE ContentGroup=? AND File=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE _DefaultTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE _DefaultTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=?5) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=?5))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE _DependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE _DependencyGraphID=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE _DeploymentHistoryID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE _DeploymentHistoryID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE PackageIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE PackageIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE WhenOccurred=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE _DynamicAppUriHandlerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE DynamicAppUriHandlerGroup=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE HostName=? AND DynamicAppUriHandlerGroup=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE HostName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE ProgID IS ? AND DynamicAppUriHandlerGroup=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE ProgID IS ? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandlerGroup WHERE _DynamicAppUriHandlerGroupID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=? AND Name=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandlerGroup WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM EndOfLifePackage WHERE _EndOfLifePackage=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM EndOfLifePackage WHERE PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Enterprise WHERE _EnterpriseID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Enterprise WHERE EnterpriseId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE _FileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE _FileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Digest=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Digest=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Package=? AND RelativeFilePath=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Package=? AND RelativeFilePath=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.ContentType=?2 AND u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.ContentType=?2 AND u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.FileType=?2 AND u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.FileType=?2 AND u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE _FileTypeAssociationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE _FileTypeAssociationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ContentType IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ContentType IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ContentType IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ContentType IS ? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE Extension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE FileType=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE FileType=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE FileType=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE FileType=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ProgID IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ProgID IS ? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE _HostRuntimeID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE _HostRuntimeID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE HostId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE HostId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND HostId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND HostId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MigratorPatch WHERE _MigratorPatchID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MigratorPatch WHERE _MigratorPatchID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MigratorPatch WHERE PatchId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MigratorPatch WHERE PatchId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtApplication WHERE _MrtApplicationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtApplication WHERE _MrtApplicationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtApplication WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtApplication WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtDefaultTile WHERE _MrtDefaultTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtDefaultTile WHERE _MrtDefaultTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtDefaultTile WHERE DefaultTile=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtDefaultTile WHERE DefaultTile=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtPackage WHERE _MrtPackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtPackage WHERE _MrtPackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtPackage WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE _MrtSharedPriID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE _MrtSharedPriID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE Filename=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE Filename=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE _MrtUserPriID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE _MrtUserPriID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE MrtSharedPri=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE MrtSharedPri=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE Package=? AND User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE Package=? AND User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE _NamedDependncyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE _NamedDependncyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND DependencyType=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND DependencyType=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND DependencyType=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND DependencyType=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE _OptionalBundleID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE _OptionalBundleID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND Publisher=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?7)  AND (pu._WorkId=0 OR pu._WorkId=?7) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE _PackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE EditionId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE _PackageAppInstallerID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE _PackageAppInstallerID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE AppInstaller=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE AppInstaller=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE Package=? AND AppInstaller=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE Package=? AND AppInstaller=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND (pe._WorkId=0 OR pe._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND pe._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE _PackageExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE _PackageExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE (User=0 OR User=?1) AND PackageFullName=?2 AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 R p._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE (User=0 OR User=?1) AND PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE _PackageExternalLocationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE _PackageExternalLocationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE _PackageFamilyID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE Name=? AND PublisherId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE Name=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PackageFamilyName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PackageSID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PublisherId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pf.PackageFamilyName=?1 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pfu.User=?1 AND pf.PackageFamilyName=?2 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser WHERE _PackageFamilyUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser WHERE PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser WHERE User=? AND PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUserResource WHERE _PackageFamilyUserResourceID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUserResource WHERE PackageFamilyUser=? AND ResourceId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUserResource WHERE PackageFamilyUser=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageIdentity WHERE _PackageIdentityID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageIdentity WHERE PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageIdentity WHERE PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE _PackageLocationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE _PackageLocationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE InstalledLocation=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE InstalledLocation=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Volume=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Volume=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageMachineStatus WHERE _PackageMachineStatusID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageMachineStatus WHERE PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE _PackagePolicyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE _PackagePolicyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND (pp._WorkId=0 OR pp._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND pp._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE _PackagePropertyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE _PackagePropertyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE _PackageSourceUriID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE _PackageSourceUriID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND Kind=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND Kind=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded WHERE _PackageSupercededID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded WHERE PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded WHERE User=? AND PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND pu._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND (pu._WorkId=0 OR pu._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE AppDataVolume=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE AppDataVolume=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus AS pus INNER JOIN User AS u ON u._UserID=pus.User INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentity WHERE u.UserSid=? AND pi.PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus WHERE _PackageUserStatusID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus WHERE User=? AND PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE _PrimaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _Created=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _Modified=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _Modified=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE ApplicationIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _Created=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _PrimaryTileUserChangelogID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _PrimaryTileUserChangelogID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE WhenOccurred=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE _PrimaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=pkg._PackageID WHERE p.ProtocolName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pkg._WorkId=0 OR pkg._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=pkg._PackageID WHERE p.ProtocolName=?2 AND pu.User=?1 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE _ProtocolID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE _ProtocolID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE Extension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProgID IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProgID IS ? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND ReturnResults=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND ReturnResults=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackage WHERE _ProvisionedPackageID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackage WHERE PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackage WHERE Path=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageDeleted WHERE _ProvisionedPackageID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageDeleted WHERE PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageDeleted WHERE Path=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageExclude WHERE _ProvisionedPackageExcludeID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageExclude WHERE PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE _PublisherCacheFolderID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE _PublisherCacheFolderID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE FolderName IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE FolderName IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND FolderName IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND FolderName IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTile WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTile WHERE _SecondaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _Created=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _Modified=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _Modified=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _Created=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _SecondaryTileUserChangelogID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _SecondaryTileUserChangelogID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE WhenOccurred=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE _SecondaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Sequence WHERE _SequenceID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Sequence WHERE Id=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE Id=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE Id=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE User=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainerPackageFamily WHERE _SharedPackageContainerPackageFamilyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainerPackageFamily WHERE _SharedPackageContainerPackageFamilyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND PackageFamilyName=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND PackageFamilyName=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SRHistory WHERE _SRHistoryID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SRHistory WHERE _SRHistoryID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SRHistory WHERE PackageIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SRHistory WHERE PackageIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SRHistory WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SRHistory WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SRHistory WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SRHistory WHERE WhenOccurred=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE _TileViewID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE _TileViewID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM User WHERE _UserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM User WHERE UserSid=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE _XboxPackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE _XboxPackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE ContentId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE ContentId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE DeviceId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE DeviceId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE EditionId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE EditionId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE EscrowedKeyBlobId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE EscrowedKeyBlobId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE ProductId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE ProductId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE TitleId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE TitleId IS ? AND _WorkId=0 LIMIT 1);
SELECT Extension, FileType, ProgID FROM CacheFileTypeAssociation WHERE _CacheFileTypeAssociationID=?;
SELECT Extension, Name, ProgID FROM CacheProtocol WHERE _CacheProtocolID=?;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.ContentType=?2 AND u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.ContentType=?2 AND u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.FileType=?2 AND u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.FileType=?2 AND u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2) ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ;
SELECT HostName, Path, Extension, ProgID, AppUriHandlerGroup FROM CacheAppUriHandler WHERE _CacheAppUriHandlerID=?;
SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN DependencyGraph AS dg ON dg.SupplierPackage=pe.Package WHERE dg.User=?1 AND hr.HostId=?2 AND dg.DependencyType=0x8 AND dg.DependentPackage IN (SELECT _PackageID FROM Package WHERE PackageFullName=?3 AND (_WorkId=0 OR _WorkId=?4)) AND (hr._WorkId=0 OR hr._WorkId=?4) AND (pe._WorkId=0 OR pe._WorkId=?4) AND (dg._WorkId=0 OR dg._WorkId=?4);
SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN DependencyGraph AS dg ON dg.SupplierPackage=pe.Package WHERE dg.User=?1 AND hr.HostId=?2 AND dg.DependencyType=0x8 AND dg.DependentPackage IN (SELECT _PackageID FROM Package WHERE PackageFullName=?3 AND _WorkId=0) AND hr._WorkId=0 AND pe._WorkId=0 AND dg._WorkId=0;
SELECT Id, LastValue FROM Sequence WHERE _SequenceID=?;
SELECT LastValue FROM Sequence WHERE Id=?;
SELECT MAX((SELECT IFNULL(MAX(MAX(_Created, _Modified)), 0) FROM TileView WHERE User=?1 AND _WorkId=0),(SELECT IFNULL(MAX(MAX(_Created, _Deleted)), 0) FROM PrimaryTileUserChangelog WHERE User=?1 AND _WorkId=0),(SELECT IFNULL(MAX(MAX(_Created, _Deleted)), 0) FROM SecondaryTileUserChangelog WHERE User=?1 AND _WorkId=0));
SELECT name FROM %s.SQLITE_MASTER WHERE type='table' AND name NOT LIKE 'sqlite_%%';
SELECT name FROM SQLITE_MASTER WHERE type='table' AND name NOT LIKE 'sqlite_%';
SELECT Name, Extension FROM CacheAppUriHandlerGroup WHERE _CacheAppUriHandlerGroupID=?;
SELECT Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM CacheAppExtension WHERE _CacheAppExtensionID=?;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN (SELECT p.SourceBundle AS containedPackageSourceBundle FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p.PackageType & ?1 != 0 AND p.SourceBundle != 0 AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)) ON p.SourceBundle=containedPackageSourceBundle WHERE p.PackageType & 8 != 0 AND (p._WorkId=0 OR p._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN (SELECT p.SourceBundle AS containedPackageSourceBundle FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p.PackageType & ?1 != 0 AND p.SourceBundle != 0 AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0) ON p.SourceBundle=containedPackageSourceBundle WHERE p.PackageType & 8 != 0 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & 0x21 != 0 AND p.PackageFamily NOT IN ( SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & 0x21 != 0 AND p.PackageFamily NOT IN ( SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND(p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?7)  AND (pu._WorkId=0 OR pu._WorkId=?7);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND (p._WorkId=0 OR p._WorkId=?6);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (p._WorkId=0 OR p._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.InstalledLocation=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pl._WorkId=0 OR pl._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.InstalledLocation=?1 AND p._WorkId=0 AND pl._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1  AND p.Architecture=?4 AND p.Version>=?5 AND p.packageFullName<>?6 AND (p._WorkId=0 OR p._WorkId=?7) AND (pu._WorkId=0 OR pu._WorkId=?7)
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1  AND p.Architecture=?4 AND p.Version>=?5 AND p.packageFullName<>?6 AND p._WorkId=0 AND pu._WorkId=0
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p.Version>=?4 AND (p._WorkId=0 OR p._WorkId=?5) AND (pu._WorkId=0 OR pu._WorkId=?5) ORDER BY p.Version DESC;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p.Version>=?4 AND p._WorkId=0 AND pu._WorkId=0 ORDER BY p.Version DESC;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?2 != 0 AND p._PackageID NOT IN ( SELECT p._PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?2 != 0 AND p._PackageID NOT IN ( SELECT p._PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND(p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?3 != 0 AND p.SourceBundle=?4 AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (pu._WorkId=0 OR pu._WorkId=?5)) AND (p._WorkId=0 OR p._WorkId=?5) AND (pu._WorkId=0 OR pu._WorkId=?5);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?3 != 0 AND p.SourceBundle=?4 AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p._PackageID=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p._PackageID=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._ProtocolID, p._Revision, p._WorkId, p.ProtocolName, p.ReturnResults, p.Extension, p."Index", p.ProgID, p._Dictionary FROM Protocol  AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=pkg._PackageID WHERE p.ProtocolName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pkg._WorkId=0 OR pkg._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._ProtocolID, p._Revision, p._WorkId, p.ProtocolName, p.ReturnResults, p.Extension, p."Index", p.ProgID, p._Dictionary FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=pkg._PackageID WHERE p.ProtocolName=?2 AND pu.User=?1 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 AND pu._WorkId=0;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageType=1 AND pu.User=?1 AND pf.PackageFamilyName=?2 AND (p._WorkId=0 OR p._WorkId=?3)   AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY p.Version DESC LIMIT 1;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageType=1 AND pu.User=?1 AND pf.PackageFamilyName=?2 AND p._WorkId=0  AND pu._WorkId=0 ORDER BY p.Version DESC LIMIT 1;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN TargetDeviceFamily AS tdf ON tdf._TargetDeviceFamilyID=p.TargetDeviceFamily WHERE u.UserSid=?1 AND p.PackageType & ?2 !=0 AND tdf.Name=?3 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (tdf._WorkId=0 OR tdf._WorkId=?4);
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN TargetDeviceFamily AS tdf ON tdf._TargetDeviceFamilyID=p.TargetDeviceFamily WHERE u.UserSid=?1 AND p.PackageType & ?2 !=0 AND tdf.Name=?3 AND pu._WorkId=0 AND p._WorkId=0 AND tdf._WorkId=0;
SELECT p.SupportedUsers, p.PackageFullName FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p.SupportedUsers, p.PackageFullName FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT Package, "Index", Flags, Category, Activation, HostId, Parameters, CurrentDirectoryPath FROM CachePackageExtension WHERE _CachePackageExtensionID=?;
SELECT Package, "Index", Flags, PackageRelativeApplicationId, ApplicationUserModelId, Activation, HostId, Parameters, CurrentDirectoryPath, Executable, Entrypoint, StartPage FROM CacheApplication WHERE _CacheApplicationID=?;
SELECT Package, User, InstallTime FROM CachePackageUser WHERE _CachePackageUserID=?;
SELECT PackageExtension, HostId FROM CacheHostRuntime WHERE _CacheHostRuntimeID=?;
SELECT PackageFamilyName, PackageSID, Publisher FROM CachePackageFamily WHERE _CachePackageFamilyID=?;
SELECT PackageIdentity, PackageFullName, Status FROM CachePackageMachineStatus WHERE _CachePackageMachineStatusID=?;
SELECT PackageOrigin FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT PackageOrigin FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT PackageOrigin FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
SELECT PackageOrigin FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND pl._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND pl._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND pl._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=0 AND p._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=?3 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=?3 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=0 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=?3 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=0 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=0 LIMIT 1;
SELECT pd._PackageDependencyID, pd._Revision, pd.PackageDependencyId, pd.User, pd.PackageFamilyName, pd.PackageFamily, pd.MinVersion, pd.Architectures, pd.LifetimeKind, pd.LifetimeArtifact, pd.Flags, pd._Dictionary FROM PackageDependency AS pd INNER JOIN PackageFamily AS pf ON pf.PackageFamilyName=pd.PackageFamilyName INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID WHERE (pd.User=?1 OR pd.User=0) AND pd.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pd.MinVersion<=?4 AND p._WorkId=0;
SELECT pe._PackageExtensionID, pe._Revision, pe._WorkId, pe.Package, pe."Index", pe.Category, pe.Activation, pe.HostId, pe.Executable, pe.Entrypoint, pe.RuntimeType, pe.StartPage, pe.Flags, pe.Parameters, pe.CurrentDirectoryPath, pe.Id, pe.ResourceGroup, pe._Dictionary FROM PackageExtension  AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND (pe._WorkId=0 OR pe._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pe._PackageExtensionID, pe._Revision, pe._WorkId, pe.Package, pe."Index", pe.Category, pe.Activation, pe.HostId, pe.Executable, pe.Entrypoint, pe.RuntimeType, pe.StartPage, pe.Flags, pe.Parameters, pe.CurrentDirectoryPath, pe.Id, pe.ResourceGroup, pe._Dictionary FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND pe._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE (pel.User=0 OR pel.User=?) AND pel.Package=? AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ORDER BY pel.User DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=? AND pel.Package=? AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ORDER BY pel.User DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE (pel.User=0 OR pel.User=?1) AND pel.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 ORDER BY User DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE (User=0 OR User=?1) AND PackageFullName=?2 AND (_WorkId=0 OR _WorkId=?) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 R p._WorkId=?3) ORDER BY User DESC, _WorkId DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel WHERE (pel.User=0 OR pel.User=?) AND pel.Package=? AND (pel._WorkId=0 OR pel._WorkId=?) AND (a._WorkId=0 OR a._WorkId=?) AND (pu._WorkId=0 OR pu._WorkId=?) ORDER BY pel.User DESC, pel._WorkId DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel WHERE pel.User=? AND pel.Package=? AND (pel._WorkId=0 OR pel._WorkId=?) AND (a._WorkId=0 OR a._WorkId=?) AND (pu._WorkId=0 OR pu._WorkId=?) ORDER BY pel.User DESC, pel._WorkId DESC;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pfu._PackageFamilyUserID, pfu._Revision, pfu.PackageFamily, pfu.User, pfu.WhenInstalled, pfu._Dictionary FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pf.PackageFamilyName=?1;
SELECT pfu._PackageFamilyUserID, pfu._Revision, pfu.PackageFamily, pfu.User, pfu.WhenInstalled, pfu._Dictionary FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pfu.User=?1 AND pf.PackageFamilyName=?2;
SELECT pl._PackageLocationID, pl._Revision, pl._WorkId, pl.Package, pl.Volume, pl.InstalledLocation, pl.MutableLink, pl.MutableLocation, pl.ProjectionId, pl._Dictionary FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND (pl._WorkId=0 OR pl._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) ORDER BY pl._WorkId DESC;
SELECT pl._PackageLocationID, pl._Revision, pl._WorkId, pl.Package, pl.Volume, pl.InstalledLocation, pl.MutableLink, pl.MutableLocation, pl.ProjectionId, pl._Dictionary FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND pl._WorkId=0 AND pu._WorkId=0 AND a._WorkId=0 ORDER BY pl._WorkId DESC;
SELECT pl._PackageLocationID, pl._Revision, pl._WorkId, pl.Package, pl.Volume, pl.InstalledLocation, pl.MutableLink, pl.MutableLocation, pl.ProjectionId, pl._Dictionary FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND (pl._WorkId=0 OR pl._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) ORDER BY pl._WorkId DESC;
SELECT pl._PackageLocationID, pl._Revision, pl._WorkId, pl.Package, pl.Volume, pl.InstalledLocation, pl.MutableLink, pl.MutableLocation, pl.ProjectionId, pl._Dictionary FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=0 AND pu._WorkId=0 AND a._WorkId=0 ORDER BY pl._WorkId DESC;
SELECT pl.InstalledLocation || '\' || a.Executable AS AbsoluteExecutable, a.Entrypoint, a.Flags, a.Subsystem, p.SupportedUsers, p.PackageFullName, p.Flags FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageLocation AS pl ON pl.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pl._WorkId=0 OR pl._WorkId=?3);
SELECT pl.InstalledLocation || '\' || a.Executable AS AbsoluteExecutable, a.Entrypoint, a.Flags, a.Subsystem, p.SupportedUsers, p.PackageFullName, p.Flags FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageLocation AS pl ON pl.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 AND pl._WorkId=0;
SELECT pl.Volume FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?1 AND (pl._WorkId=0 OR pl._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) ORDER BY pl._WorkId DESC;
SELECT pl.Volume FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?1 AND pl._WorkId=0 AND p._WorkId=0;
SELECT pp._PackagePropertyID, pp._Revision, pp._WorkId, pp.Package, pp."Index", pp.Name, pp._Dictionary FROM PackageProperty  AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND (pp._WorkId=0 OR pp._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pp._PackagePropertyID, pp._Revision, pp._WorkId, pp.Package, pp."Index", pp.Name, pp._Dictionary FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND pp._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND (pu._WorkId=0 OR pu._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2);
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu._WorkId=0 AND p._WorkId=0;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) ORDER BY pu._WorkId DESC;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND p._WorkId=0 AND pu._WorkId=0;
SELECT pus.Status FROM PackageUserStatus AS pus INNER JOIN User AS u ON u._UserID=pus.User INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentity WHERE u.UserSid=? AND pi.PackageFullName=?;
SELECT SupportedUsers FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
SELECT SupportedUsers FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT tv._TileViewID, tv._Revision, tv._WorkId, tv.Application, tv.Package, tv.Flags, tv.TileType, tv.TileTemplate, tv.TileId, tv.Arguments, tv.EditionId, tv._Dictionary, tv._TileUserID, tv._TileUser_Revision, tv._Created, tv._Modified, tv.User, tv.ApplicationIdentity, tv.State, tv.TileUniqueId, tv.ApplicationUserModelId FROM TileView AS tv WHERE tv.User=? AND (tv._Created>? OR tv._Modified>?)
SELECT User, ApplicationIdentity, Application, PackageUser, ApplicationUserModelId FROM CacheApplicationUser WHERE _CacheApplicationUserID=?;
SELECT User, DependentPackage, SupplierPackage, "Index", DependencyType FROM CacheDependencyGraph WHERE _CacheDependencyGraphID=?;
SELECT User, Package, Path FROM CachePackageExternalLocation WHERE _CachePackageExternalLocationID=?;
SELECT User, PackageFamily, Name FROM CacheDynamicAppUriHandlerGroup WHERE _CacheDynamicAppUriHandlerGroupID=?;
SELECT User, PackageIdentity, PackageFullName, Status FROM CachePackageUserStatus WHERE _CachePackageUserStatusID=?;
SELECT UserSid FROM CacheUser WHERE _CacheUserID=?;
SELECT xp._XboxPackageID, xp._Revision, xp._WorkId, xp.Package, xp.EditionId, xp.BuildId, xp.DeviceId, xp.BuildVersion, xp.ContentId, xp.ProductId, xp.MediaId, xp.PackageSize, xp.TitleId, xp.PrimaryServiceConfigId, xp.EraVersion, xp.EscrowedKeyBlobId, xp._Dictionary FROM XboxPackage AS xp WHERE xp.EditionId LIKE '%#' || ? AND (xp._WorkId=0 OR xp._WorkId=?)
SELECT xp._XboxPackageID, xp._Revision, xp._WorkId, xp.Package, xp.EditionId, xp.BuildId, xp.DeviceId, xp.BuildVersion, xp.ContentId, xp.ProductId, xp.MediaId, xp.PackageSize, xp.TitleId, xp.PrimaryServiceConfigId, xp.EraVersion, xp.EscrowedKeyBlobId, xp._Dictionary FROM XboxPackage AS xp WHERE xp.EditionId LIKE '%#' || ? AND xp._WorkId=0
sequenceId
SequenceStatics::ActivateInstance
SequenceStatics::ctor
SequenceStatics::dtor
SequenceStatics::Exists
SequenceStatics::ExistsById
SequenceStatics::Find
SequenceStatics::Get
SequenceStatics::GetById
SequenceStatics::GetCurrentValue
SequenceStatics::TryGet
SequenceStatics::TryGetById
ServiceDebugOnStartup
ServiceIdleTimeout
ServiceLastKnownStatus
ServiceMain
ServiceWaitHintInterval
SessionId
SetEvent
SetLastError
SetServiceStatus
SetThreadpoolTimer
SetThreadToken
SetUnhandledExceptionFilter
SHA256
SharedPackageContainer
SharedPackageContainerPackageFamily
SharedPackageContainerPackageFamilyStatics::ActivateInstance
SharedPackageContainerPackageFamilyStatics::ctor
SharedPackageContainerPackageFamilyStatics::dtor
SharedPackageContainerPackageFamilyStatics::Exists
SharedPackageContainerPackageFamilyStatics::ExistsBySharedPackageContainer
SharedPackageContainerPackageFamilyStatics::ExistsBySharedPackageContainerAndPackageFamilyName
SharedPackageContainerPackageFamilyStatics::Find
SharedPackageContainerPackageFamilyStatics::FindBySharedPackageContainer
SharedPackageContainerPackageFamilyStatics::TryGet
SharedPackageContainerPackageFamilyStatics::TryGetBySharedPackageContainerAndPackageFamilyName
SharedPackageContainerStatics::ActivateInstance
SharedPackageContainerStatics::ctor
SharedPackageContainerStatics::dtor
SharedPackageContainerStatics::Exists
SharedPackageContainerStatics::ExistsById
SharedPackageContainerStatics::ExistsByUser
SharedPackageContainerStatics::ExistsByUserAndName
SharedPackageContainerStatics::Find
SharedPackageContainerStatics::FindByUser
SharedPackageContainerStatics::TryGet
SharedPackageContainerStatics::TryGetById
SharedPackageContainerStatics::TryGetByUserAndName
SHLoadIndirectString
sI,?ST
SizeInPages
Sleep
SleepEx
SOFTWARE
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository
Software\Microsoft\Windows NT\CurrentVersion\ProfileList
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepository
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepository\Cache
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepositoryStatus
Software\Microsoft\Windows\CurrentVersion\Appx
SOFTWARE\Microsoft\Windows\CurrentVersion\Appx
Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders
Software\Policies\Microsoft\Windows\Appx
Source
SourceBundle
SourceSchemaVersion
SQLite.AutoIndexWarning
sqlite3_bind_blob
sqlite3_bind_int
sqlite3_bind_int64
sqlite3_bind_null
sqlite3_bind_text16
sqlite3_busy_timeout
sqlite3_changes
sqlite3_clear_bindings
sqlite3_close
sqlite3_column_blob
sqlite3_column_bytes
sqlite3_column_int
sqlite3_column_int64
sqlite3_column_text
sqlite3_column_text16
sqlite3_column_type
sqlite3_config
sqlite3_create_function_v2
sqlite3_db_config
sqlite3_db_filename
sqlite3_db_handle
sqlite3_db_status
sqlite3_enable_shared_cache
sqlite3_errcode
sqlite3_errmsg
sqlite3_exec
sqlite3_expanded_sql
sqlite3_extended_errcode
sqlite3_extended_result_codes
sqlite3_file_control
sqlite3_finalize
sqlite3_free
sqlite3_get_autocommit
sqlite3_initialize
sqlite3_last_insert_rowid
sqlite3_log
sqlite3_malloc
sqlite3_next_stmt
sqlite3_open_v2
sqlite3_prepare_v2
sqlite3_profile
sqlite3_reset
sqlite3_result_blob
sqlite3_result_error_code
sqlite3_result_error_nomem
sqlite3_result_error16
sqlite3_result_int
sqlite3_result_int64
sqlite3_result_text16
sqlite3_shutdown
sqlite3_snprintf
sqlite3_sql
sqlite3_status
sqlite3_step
sqlite3_stmt_busy
sqlite3_trace
sqlite3_user_data
sqlite3_value_blob
sqlite3_value_bytes
sqlite3_value_int
sqlite3_value_int64
sqlite3_value_text
sqlite3_value_text16
sqlite3_value_type
sqlite3_vfs_find
sqlite3_vfs_register
sqlite3_vfs_unregister
sqlite3_wal_autocheckpoint
sqlite3_wal_checkpoint_v2
sqlite3_wal_checkpoint_v2(): Mode:%d EffectiveMode:%d Size:%d Pages:%d
SQQPQQPh\
SQVPWRh(
SRCache_AllocStringBuffer
SRCache_DuplicateString
SRCache_ExpandMacros
SRCache_Free
SRCacheContext_AddToCache
SRCacheContext_CacheInitialize
SRCacheContext_CacheShutdown
SRCacheContext_Close
SRCacheContext_Create
SRCacheContext_CreateSubContext
SRCacheContext_Delete
SRCacheContext_DeleteIfEmpty
SRCacheContext_EnumerateData
SRCacheContext_GetField_Binary
SRCacheContext_GetField_MultiString
SRCacheContext_GetField_String
SRCacheContext_GetField_UInt32
SRCacheContext_GetField_UInt64
SRCacheContext_Open
SRCacheContext_OpenSubContext
SRCacheContext_SetField_Binary
SRCacheContext_SetField_MultiString
SRCacheContext_SetField_String
SRCacheContext_SetField_UInt32
SRCacheContext_SetField_UInt64
SRCacheManager_Close
SRCacheManager_GetProperty_UInt32
SRCacheManager_Open
SRCacheManager_SetProperty_UInt32
SRCacheManager_SetProperty_UInt64
SRDictionaryToPropertySet
SRHistory
SRHistoryStatics::ActivateInstance
SRHistoryStatics::ctor
SRHistoryStatics::dtor
SRHistoryStatics::Exists
SRHistoryStatics::ExistsByPackageIdentity
SRHistoryStatics::ExistsByUser
SRHistoryStatics::ExistsByWhenOccurred
SRHistoryStatics::Find
SRHistoryStatics::FindByPackageIdentity
SRHistoryStatics::FindByUser
SRHistoryStatics::FindByWhenOccurred
SRHistoryStatics::TryGet
SRJournal
SRJournalArchive
srjournalId
sroptions
SSh\W
SSSPQ
SSSSRQ
StartPage
startswith
StartsWith(*string*,prefix) error: Invalid type (%d)
StartsWith(string,*prefix*) error: Invalid type (%d)
StatementCache.Count
StatementCache.Hits
StatementCache.Lifespan
StatementCache.Misses
StatementCount
StatementPtr
StatementUsed
StateRepository
StateRepository.Core.dll
StateRepository.Database.Statistics
StateRepository.DatabaseCache.Statistics
StateRepository.DoMaintenance
StateRepository.FailFastBusySnapshot
StateRepository.FailFastBusySnapshot.BusyCount
StateRepository.FailFastBusySnapshot.DatabasePtr
StateRepository.FailFastBusySnapshot.FirstBusySQL
StateRepository.FailFastBusySnapshot.Statement#%u.ExpandedSQL
StateRepository.FailFastBusySnapshot.Statement#%u.Ptr
StateRepository.FailFastBusySnapshot.Statement#%u.SQL
StateRepository.FailFastBusySnapshot.StatementCount
StateRepository.FailFastBusySnapshot.StatementInProgress
StateRepository.log
StateRepository.ResourcePriority.Inadequate
StateRepository.Task.DataAccessLayer
StateRepository.Task.Migrate
StateRepository.Task.WinRTAPI
StateRepository::PackageDependency::Create
StateRepository_DataAccessLayer_DatabaseCache_Add
StateRepository_DataAccessLayer_DatabaseCache_Get
StateRepository_Initialize
STATEREPOSITORY_KEYWORD
StateRepository_Migrate
STATEREPOSITORY_PERF_KEYWORD
StateRepository_Service_UpdateStatus
StateRepository_Shutdown
StateRepositoryStatus
Status
stream end
stream error
StringFileInfo
StringFromGUID2
Subkey
SuccessCount
SupplierPackage
Sux~*
SvchostPushServiceGlobals
SVWh4R
SVWj4
SVWPh
SVWPh(
SVWPhX
SVWQ3
SVWQh
SVWQQ
SVWQQj
SY,LW
Symbol
synchronous
t h,(
T L,Q
T$ ;u
t$ h@
t$ h@}
t$ h@y
t$ Ph
t$ PSW
t$ RP
t$ SW
t$$9D$
t$$h(:
t$$h0
t$$WSh
T$(;]
T$(;E
t$(h`l
t$(h0}
t$(h8[
t$(hht
t$(QRPVSh
t$(QRPWVh
t$(Rh
t$(SS
t$,PQh
t$,PRQh
t$,QVPSRh
t$@WS
t$@WV
t$\Qh
t$|SW
t$<VW
t$<WV
t$0PQh(
t$0PQVSWh
t$0QVPSRh
t$0Rh
t$0Wj
t$4PQh
t$4PQh(
t$4QVP
t$4QVPSRh
t$4QWSh
t$4SPVQh(
t$4VPQh
t$4VW
t$4Wj
t$4WS
t$4WSRPQh(
t$8PRQh
t$8SW
t$8WS
t$dh`
t$Dh`
t$DPj
t$DRQ
T$hPQQ
t$hSW
t$LSWVQP
t$ph`
T$pRQ
t$TRQ
t(WWh
t)QhL
t,QhL
t[aW#
T0c0o0
t0RQj
t0SWj
TargetDeviceFamilyName
TargetDeviceFamilyStatics::ActivateInstance
TargetDeviceFamilyStatics::ctor
TargetDeviceFamilyStatics::dtor
TargetDeviceFamilyStatics::Exists
TargetDeviceFamilyStatics::ExistsByPackage
TargetDeviceFamilyStatics::ExistsByPackageAndIndex
TargetDeviceFamilyStatics::Find
TargetDeviceFamilyStatics::FindByPackage
TargetDeviceFamilyStatics::Get
TargetDeviceFamilyStatics::GetByPackage
TargetDeviceFamilyStatics::GetByPackageAndIndex
TargetDeviceFamilyStatics::TryGet
TargetDeviceFamilyStatics::TryGetByPackageAndIndex
TargetSize
TASK0
TEMP 
TEMP$
TEMP(
TEMP,
temp_store
TEMP`
TEMP|
TEMP<
TEMP4
TEMP8
TEMPD
TEMPH
TEMPh
TEMPl
TEMPP
TEMPp
TEMPX
TerminateProcess
tEU"W
Thales TSS ESN:3BD4-4B80-69C31%0#
threadId
ThreadId
threadId
ThreadId
threadId
ThreadId
threadId
ThreadId
threadId
TileViewStatics::ActivateInstance
TileViewStatics::ctor
TileViewStatics::dtor
TileViewStatics::Exists
TileViewStatics::ExistsByApplication
TileViewStatics::ExistsByApplicationAndTileId
TileViewStatics::ExistsByPackage
TileViewStatics::ExistsByTileUniqueId
TileViewStatics::ExistsByUser
TileViewStatics::ExistsByUserAndApplication
TileViewStatics::ExistsByUserAndApplicationUserModelId
TileViewStatics::ExistsByUserAndPackage
TileViewStatics::Find
TileViewStatics::FindByApplication
TileViewStatics::FindByPackage
TileViewStatics::FindByUser
TileViewStatics::FindByUserAndApplication
TileViewStatics::FindByUserAndApplicationUserModelId
TileViewStatics::FindByUserAndGTChangeIdAndTileViewQueryFilter
TileViewStatics::FindByUserAndPackage
TileViewStatics::Get
TileViewStatics::GetByApplicationAndTileId
TileViewStatics::GetByTileUniqueId
TileViewStatics::GetMaxChangeIdByUser
TileViewStatics::TryGet
TileViewStatics::TryGetApplicationUserModelIDByTileUniqueId
TileViewStatics::TryGetByApplicationAndTileId
TileViewStatics::TryGetByTileUniqueId
TimeoutMSec
TlP0X
tOkC|
too many length or distance symbols
Trace
TransactionCallerId
TransactionCallerID
Transient
TransientCount
Translation
TRUNCATE
Ts]OL
tS9>t
tS9w,tS
tSRVh\ R
TTBLh
u$WSQ
u%PPPhp
u&QWS
U:TwA
u?WQQ
'u@j:Xf
U0S0Q
u2QPj
u5~exj
uAa=s
UAIJ|'K
uEQWQ
uFPPPh
ugPPPhP
uIQWQ
uL9w@u]
UMgrQueryUserToken
uncompress
UnhandledExceptionFilter
Unknown
Unknown Action: Journal.id=%I64d ObjectType=%d Action=%d ObjectId=%I64d
unknown compression method
Unknown exception
Unknown LifetimeKind=%d
Unknown ObjectType: Journal.id=%I64d ObjectType=%d Action=%d ObjectId=%I64d
Unknown SQLite datatype %d
UnregisterWaitEx
uoeg9u
UPDATE %s SET _WorkId=0 WHERE _WorkId%s0 AND _WorkId<>0;
UPDATE %s SET _WorkId=0, _ShadowId=0 WHERE _WorkId%s0 AND _WorkId<>0;
UPDATE AppExecutionAliasUser SET _Revision=?, User=?, ApplicationIdentity=?, Alias=?, Status=?, _Dictionary=? WHERE _AppExecutionAliasUserID=? AND _Revision=?;
UPDATE ConnectedSet SET _Revision=?, Name=?, Flags=?, Status=?, _Dictionary=? WHERE _ConnectedSetID=? AND _Revision=?;
UPDATE ConnectedSetPackageFamily SET _Revision=?, ConnectedSet=?, PackageFamily=?, _Dictionary=? WHERE _ConnectedSetPackageFamilyID=? AND _Revision=?;
UPDATE CustomInstallWork SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, Flags=?, Status=?, File=?, Arguments=?, _Dictionary=? WHERE _CustomInstallWorkID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE CustomInstallWork SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, Flags=?, Status=?, File=?, Arguments=?, _Dictionary=? WHERE _CustomInstallWorkID=? AND _Revision=? AND _WorkId=0;
UPDATE CustomInstallWork SET _WorkId=? WHERE _CustomInstallWorkID=?;
UPDATE CustomInstallWork SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE DynamicAppUriHandler SET _Revision=?, DynamicAppUriHandlerGroup=?, HostName=?, Path=?, ProgID=?, _Dictionary=? WHERE _DynamicAppUriHandlerID=? AND _Revision=?;
UPDATE DynamicAppUriHandlerGroup SET _Revision=?, User=?, PackageFamily=?, Name=?, _Dictionary=? WHERE _DynamicAppUriHandlerGroupID=? AND _Revision=?;
UPDATE Package SET FLAGS=~4096&FLAGS WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS=~4096&FLAGS WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=~8&Flags WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=~8&Flags WHERE PackageFullName=? AND _WorkId=0;
UPDATE Package SET FLAGS=4096|FLAGS WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS=4096|FLAGS WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=8|Flags WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=8|Flags WHERE PackageFullName=? AND _WorkId=0;
UPDATE PackageFamilyPolicy SET _Revision=?, _WorkId=?, User=?, PackageFamily=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackageFamilyPolicyID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageFamilyPolicy SET _Revision=?, _WorkId=?, User=?, PackageFamily=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackageFamilyPolicyID=? AND _Revision=? AND _WorkId=0;
UPDATE PackageFamilyPolicy SET _WorkId=? WHERE _PackageFamilyPolicyID=?;
UPDATE PackageFamilyPolicy SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE PackageFamilyUserResource SET _Revision=?, PackageFamilyUser=?, ResourceId=?, _Dictionary=? WHERE _PackageFamilyUserResourceID=? AND _Revision=?;
UPDATE PackageMachineStatus SET Status=((Status & ~?3) | ?4)INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pms.PackageIdentityWHERE pi.PackageFullName=?2;
UPDATE PackagePolicy SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackagePolicyID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackagePolicy SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackagePolicyID=? AND _Revision=? AND _WorkId=0;
UPDATE PackagePolicy SET _WorkId=? WHERE _PackagePolicyID=?;
UPDATE PackagePolicy SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE PackageUser SET DeploymentState=1 WHERE DeploymentState=6 AND Package IN (     SELECT _PackageID FROM Package      WHERE PackageOrigin =2);
UPDATE PackageUserStatus SET Status=?3 WHERE PackageIdentity IN (SELECT _PackageIdentityID FROM PackageIdentity WHERE PackageFullName=?2) AND User IN (SELECT _UserID FROM User WHERE UserSid=?1);
UPDATE PrimaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _PrimaryTileUserID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PrimaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _PrimaryTileUserID=? AND _Revision=? AND _WorkId=0;
UPDATE PrimaryTileUser SET _WorkId=? WHERE _PrimaryTileUserID=?;
UPDATE PrimaryTileUser SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE SecondaryTile SET _Revision=?, _WorkId=?, Flags=?, TileTemplate=?, TileId=?, Arguments=?, EditionId=?, _Dictionary=? WHERE _SecondaryTileID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE SecondaryTile SET _Revision=?, _WorkId=?, Flags=?, TileTemplate=?, TileId=?, Arguments=?, EditionId=?, _Dictionary=? WHERE _SecondaryTileID=? AND _Revision=? AND _WorkId=0;
UPDATE SecondaryTile SET _WorkId=? WHERE _SecondaryTileID=?;
UPDATE SecondaryTile SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE SecondaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, SecondaryTile=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _SecondaryTileUserID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE SecondaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, SecondaryTile=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _SecondaryTileUserID=? AND _Revision=? AND _WorkId=0;
UPDATE SecondaryTileUser SET _WorkId=? WHERE _SecondaryTileUserID=?;
UPDATE SecondaryTileUser SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE Sequence SET LastValue=? WHERE _SequenceID=?;
UPDATE Sequence SET LastValue=? WHERE Id=?;
UPDATE XboxPackage SET _Revision=?, _WorkId=?, Package=?, EditionId=?, BuildId=?, DeviceId=?, BuildVersion=?, ContentId=?, ProductId=?, MediaId=?, PackageSize=?, TitleId=?, PrimaryServiceConfigId=?, EraVersion=?, EscrowedKeyBlobId=?, _Dictionary=? WHERE _XboxPackageID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE XboxPackage SET _Revision=?, _WorkId=?, Package=?, EditionId=?, BuildId=?, DeviceId=?, BuildVersion=?, ContentId=?, ProductId=?, MediaId=?, PackageSize=?, TitleId=?, PrimaryServiceConfigId=?, EraVersion=?, EscrowedKeyBlobId=?, _Dictionary=? WHERE _XboxPackageID=? AND _Revision=? AND _WorkId=0;
UPDATE XboxPackage SET _WorkId=? WHERE _XboxPackageID=?;
UPDATE XboxPackage SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UpdateStatistics
u-QWS
User\Data
User\Data\
User\Index
User\Index\UserSid
user_version
UserAndApplication
UserAndApplicationUserModelId
UserAndDependentPackageAndDependencyType
UserAndPackage
UserAndPackageFamilyAndName
UserAndPackageFullName
UserAndPackageIdentity
UserDatabaseStatisticsLastUpdated
UserDomain
UserName
UserSID
UserSid
UserSID
UserSid
UserSID
UserSid
UserSID
UserSid
UserSID
UserSid
UserSID
UserSid
UserStatics::ActivateInstance
UserStatics::ctor
UserStatics::dtor
UserStatics::Exists
UserStatics::ExistsByUserSecurityIdentifier
UserStatics::ExistsByUserSid
UserStatics::Find
UserStatics::Get
UserStatics::GetByUserSid
UserStatics::GetDefaultAccount
UserStatics::GetEveryone
UserStatics::TryGet
UserStatics::TryGetByUserSecurityIdentifier
UserStatics::TryGetByUserSid
UserStatics::TryGetDefaultAccount
usg35
utL=K
uuSPF
'UXcs
uyL7j
v hhX
v hPX
v$h|W
v~Bpd
V0]0{0+1L1
v0h(X
v5/+3
V9]JwG
VarFileInfo
VDj)U
vdpxy
Verbose
Verify:Expired PackageDependency.id=%ls LifetimeKind=%d LifetimeArtifact=%ls
VerifyPackageFullName
Vh@>F
VjP^V
VKf<!"
Volume
VProtocolStatics::FindByUserAndProtocolName
VQPhx
VQPRQ
VQWh(
VS_VERSION_INFO
VSIDb
VSj?Z
VSj|Z
VSjDZ
Vu3j@
vv?6Q
VVVVP
VWh4R
VWj$h
VWj|Z
VWjbZ
VWjJZ
VWjkZ
VWjSZ
VWPh|
VWQQP
VWShX
W(RPQh
w(VRh
W.I.SR.ApplicationStatics.GetApplicationTypeByUserAndApplicationUserModelId(): Application.TryGetApplicationTypeByUserAndApplicationUserModelId(%lld, %ls)
W.I.SR.IApplicationStatics.GetByUserAnd_ApplicationId(): Package.TryGetByUserAnd_ApplicationID(%lld, %lld)
W.I.SR.IPackageFamilyStatics.GetByUserAndNameAndPublisherId(): PackageFamily.TryGetByUserAndNameAndPublisherId(%lld, %ls, %ls)
W.I.SR.IPackageFamilyStatics.GetByUserAndPackageFamilyName(): PackageFamily.TryGetByUserAndPackageFamilyName(%lld, %ls)
W.I.SR.IPackageStatics.GetByInstalledLocation(): Package.TryGetByInstalledLocation(%ls)
W.I.SR.IPackageStatics.GetByUserAnd_PackageId(): Package.TryGetByUserAnd_PackageID(%lld, %lld)
W.I.SR.IPackageStatics.GetByUserAndApplicationUserModelId(): Package.TryGetByUserAndApplicationUserModelId(%lld, %ls)
W.I.SR.IPackageStatics.GetByUserOrDefaultAccountAndPackageFullName(): Package.TryGetByUserOrDefaultAccountAndPackageFullName(%lld, %ls)
W.I.SR.IPackageStatics.GetCurrent(): Package.TryGetByPackageFullName(%ls)
W.I.SR.IPackageStatics.GetEffectiveSupportedUsersByApplicationUserModelId(): Package.TryGetEffectiveSupportedUsersByUserAndApplicationUserModelId(%lld, %ls)
W.I.SR.IPackageStatics.GetEffectiveSupportedUsersByPackageFullName(): Package.TryGetEffectiveSupportedUsersByPackageFullName(%ls)
W.I.SR.IPackageStatics.GetPackageOriginByPackageFullName(): Package.TryGetPackageOriginByPackageFullName(%ls)
W.I.SR.IPackageStatics.GetPackageOriginByUserAndPackageFullName(): Package.TryGetPackageOriginByUserAndPackageFullName(%lld, %ls)
W.I.SR.IPackageStatics.TryGetEffectiveLocationByUserAndApplicationUserModelId(): Package.TryGetEffectiveLocationByUserAndApplicationUserModelId(%lld, %ls)
W.I.SR.IPackageStatics.TryGetEffectiveLocationByUserAndPackage(): Package.TryGetEffectiveLocationByUserAndPackage(%lld, %lld)
W.I.SR.IPackageStatics.TryGetEffectiveLocationByUserAndPackageFullName(): Package.TryGetEffectiveLocationByUserAndPackageFullName(%lld, %ls)
W.I.SR.IPackageUserStatics.GetByUserAndPackageFullName(): PackageUser.TryGetByUserAndPackageFullName(%lld, %ls)
W|/l..
W91u%
WaitForRequestsInUseTimeout
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
Warning
Washington1
wcschr
wcsrchr
WeErm
WerRegisterCustomMetadata
WEVT_TEMPLATE
WideCharToMultiByte
wilActivity
WilError_03
WilFailureNotifyWatchers
wilResult
WilStaging_02
win:Critical
win:Error
win:Informational
win:Verbose
win:Warning
win32-longpath
win32-noimpersonation
Windows StateRepository API Server
windows.appExtensionHost
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Activation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppExecutionAlias>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppExecutionAliasUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppExtensionHost>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppInstaller>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppInstallerUri>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Application>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationBackgroundTask>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationContentUriRule>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationIdentity>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationProperty>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppService>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppUriHandler>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppUriHandlerGroup>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppxManifest>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AutoUpdatePackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Bundle>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.BundlePackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ConnectedSet>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ConnectedSetPackageFamily>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ContentGroup>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ContentGroupFile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.CustomInstallWork>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DefaultTile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DependencyGraph>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DeploymentHistory>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DynamicAppUriHandler>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DynamicAppUriHandlerGroup>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.EndOfLifePackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Enterprise>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.File>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.FileTypeAssociation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.FileTypeAssociationLauncherInfo>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.HostRuntime>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MigratorPatch>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtApplication>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtDefaultTile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtPackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtSharedPri>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtUserPri>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.NamedDependency>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.OptionalBundle>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.OptionalBundlePackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Package>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageAppInstaller>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageExternalLocation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageFamily>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageFamilyPolicy>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageFamilyUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageFamilyUserResource>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageIdentity>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageLocation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageMachineStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackagePolicy>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageProperty>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageSourceUri>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageSuperceded>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageUserStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTileUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTileUserChangelog>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTileUserDataChange>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTileView>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Protocol>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ProtocolLauncherInfo>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ProvisionedPackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ProvisionedPackageDeleted>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ProvisionedPackageExclude>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PublisherCacheFolder>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTileUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTileUserChangelog>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTileUserDataChange>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTileView>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Sequence>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SharedPackageContainer>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SharedPackageContainerPackageFamily>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SRHistory>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.TargetDeviceFamily>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.TileView>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.User>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.XboxPackage>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Activation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppExecutionAlias>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppExecutionAliasUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppExtensionHost>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppInstaller>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppInstallerUri>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Application>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationBackgroundTask>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationContentUriRule>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationIdentity>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationProperty>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppService>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppUriHandler>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppUriHandlerGroup>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppxManifest>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AutoUpdatePackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Bundle>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.BundlePackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ConnectedSet>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ConnectedSetPackageFamily>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ContentGroup>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ContentGroupFile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.CustomInstallWork>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DefaultTile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DependencyGraph>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DeploymentHistory>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DynamicAppUriHandler>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DynamicAppUriHandlerGroup>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.EndOfLifePackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Enterprise>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.File>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.FileTypeAssociation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.FileTypeAssociationLauncherInfo>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.HostRuntime>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MigratorPatch>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtApplication>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtDefaultTile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtPackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtSharedPri>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtUserPri>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.NamedDependency>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.OptionalBundle>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.OptionalBundlePackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Package>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageAppInstaller>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageExternalLocation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageFamily>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageFamilyPolicy>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageFamilyUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageFamilyUserResource>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageIdentity>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageLocation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageMachineStatus>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackagePolicy>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageProperty>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageSourceUri>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageSuperceded>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageUserStatus>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTileUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTileUserChangelog>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTileUserDataChange>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTileView>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Protocol>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ProtocolLauncherInfo>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ProvisionedPackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ProvisionedPackageDeleted>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ProvisionedPackageExclude>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PublisherCacheFolder>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTileUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTileUserChangelog>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTileUserDataChange>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTileView>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Sequence>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SharedPackageContainer>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SharedPackageContainerPackageFamily>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SRHistory>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.TargetDeviceFamily>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.TileView>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.User>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.XboxPackage>
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Activation>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppExecutionAlias>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppExecutionAliasUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppExtension>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppExtensionHost>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppInstaller>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppInstallerUri>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Application>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationBackgroundTask>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationContentUriRule>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationExtension>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationIdentity>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationProperty>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppService>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppUriHandler>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppUriHandlerGroup>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppxManifest>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AutoUpdatePackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Bundle>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.BundlePackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ConnectedSet>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ConnectedSetPackageFamily>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ContentGroup>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ContentGroupFile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.CustomInstallWork>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DefaultTile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DependencyGraph>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DeploymentHistory>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DynamicAppUriHandler>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DynamicAppUriHandlerGroup>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.EndOfLifePackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Enterprise>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.File>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.FileTypeAssociation>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.FileTypeAssociationLauncherInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.HostRuntime>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MigratorPatch>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtApplication>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtDefaultTile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtPackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtSharedPri>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtUserPri>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.NamedDependency>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.OptionalBundle>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.OptionalBundlePackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageAppInstaller>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageExtension>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageExternalLocation>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageFamily>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageFamilyPolicy>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageFamilyUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageFamilyUserResource>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageIdentity>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageLocation>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageMachineStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackagePolicy>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageProperty>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageSourceUri>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageSuperceded>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageUserStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTileUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTileUserChangelog>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTileUserDataChange>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTileView>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Protocol>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ProtocolLauncherInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ProvisionedPackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ProvisionedPackageDeleted>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ProvisionedPackageExclude>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PublisherCacheFolder>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTileUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTileUserChangelog>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTileUserDataChange>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTileView>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Sequence>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SharedPackageContainer>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SharedPackageContainerPackageFamily>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SRHistory>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.TargetDeviceFamily>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.TileView>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.User>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.XboxPackage>
Windows.Foundation.Collections.PropertySet
Windows.Foundation.PropertyValue
Windows.Foundation.Uri
Windows.Internal.StateRepository.Activation
Windows.Internal.StateRepository.AppExecutionAlias
Windows.Internal.StateRepository.AppExecutionAliasUser
Windows.Internal.StateRepository.AppExtension
Windows.Internal.StateRepository.AppExtensionHost
Windows.Internal.StateRepository.AppInstaller
Windows.Internal.StateRepository.AppInstallerUri
Windows.Internal.StateRepository.Application
Windows.Internal.StateRepository.ApplicationBackgroundTask
Windows.Internal.StateRepository.ApplicationContentUriRule
Windows.Internal.StateRepository.ApplicationExtension
Windows.Internal.StateRepository.ApplicationIdentity
Windows.Internal.StateRepository.ApplicationProperty
Windows.Internal.StateRepository.AppService
Windows.Internal.StateRepository.AppUriHandler
Windows.Internal.StateRepository.AppUriHandlerGroup
Windows.Internal.StateRepository.AppUriHandlerLauncherInfo
Windows.Internal.StateRepository.AppxManifest
Windows.Internal.StateRepository.AutoUpdatePackage
Windows.Internal.StateRepository.Bundle
Windows.Internal.StateRepository.BundlePackage
Windows.Internal.StateRepository.ConnectedSet
Windows.Internal.StateRepository.ConnectedSetPackageFamily
Windows.Internal.StateRepository.ContentGroup
Windows.Internal.StateRepository.ContentGroupFile
Windows.Internal.StateRepository.CustomInstallWork
Windows.Internal.StateRepository.DefaultTile
Windows.Internal.StateRepository.DependencyGraph
Windows.Internal.StateRepository.DeploymentHistory
Windows.Internal.StateRepository.DynamicAppUriHandler
Windows.Internal.StateRepository.DynamicAppUriHandlerGroup
Windows.Internal.StateRepository.EndOfLifePackage
Windows.Internal.StateRepository.Enterprise
Windows.Internal.StateRepository.File
Windows.Internal.StateRepository.FileTypeAssociation
Windows.Internal.StateRepository.FileTypeAssociationLauncherInfo
Windows.Internal.StateRepository.HostRuntime
Windows.Internal.StateRepository.Management.RepositoryManager
Windows.Internal.StateRepository.MigratorPatch
Windows.Internal.StateRepository.MrtApplication
Windows.Internal.StateRepository.MrtDefaultTile
Windows.Internal.StateRepository.MrtPackage
Windows.Internal.StateRepository.MrtSharedPri
Windows.Internal.StateRepository.MrtUserPri
Windows.Internal.StateRepository.NamedDependency
Windows.Internal.StateRepository.OptionalBundle
Windows.Internal.StateRepository.OptionalBundlePackage
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.PackageAppInstaller
Windows.Internal.StateRepository.PackageExtension
Windows.Internal.StateRepository.PackageExternalLocation
Windows.Internal.StateRepository.PackageFamily
Windows.Internal.StateRepository.PackageFamilyPolicy
Windows.Internal.StateRepository.PackageFamilyUser
Windows.Internal.StateRepository.PackageFamilyUserResource
Windows.Internal.StateRepository.PackageIdentity
Windows.Internal.StateRepository.PackageLocation
Windows.Internal.StateRepository.PackageMachineStatus
Windows.Internal.StateRepository.PackagePolicy
Windows.Internal.StateRepository.PackageProperty
Windows.Internal.StateRepository.PackageSourceUri
Windows.Internal.StateRepository.PackageSuperceded
Windows.Internal.StateRepository.PackageUser
Windows.Internal.StateRepository.PackageUserStatus
Windows.Internal.StateRepository.PrimaryTile
Windows.Internal.StateRepository.PrimaryTileUser
Windows.Internal.StateRepository.PrimaryTileUserChangelog
Windows.Internal.StateRepository.PrimaryTileUserDataChange
Windows.Internal.StateRepository.PrimaryTileUserNotificationChannel
Windows.Internal.StateRepository.PrimaryTileView
Windows.Internal.StateRepository.Protocol
Windows.Internal.StateRepository.ProtocolLauncherInfo
Windows.Internal.StateRepository.ProvisionedPackage
Windows.Internal.StateRepository.ProvisionedPackageDeleted
Windows.Internal.StateRepository.ProvisionedPackageExclude
Windows.Internal.StateRepository.PublisherCacheFolder
Windows.Internal.StateRepository.SecondaryTile
Windows.Internal.StateRepository.SecondaryTileUser
Windows.Internal.StateRepository.SecondaryTileUserChangelog
Windows.Internal.StateRepository.SecondaryTileUserDataChange
Windows.Internal.StateRepository.SecondaryTileUserNotificationChannel
Windows.Internal.StateRepository.SecondaryTileView
Windows.Internal.StateRepository.Sequence
Windows.Internal.StateRepository.SharedPackageContainer
Windows.Internal.StateRepository.SharedPackageContainerPackageFamily
Windows.Internal.StateRepository.SRHistory
Windows.Internal.StateRepository.TargetDeviceFamily
Windows.Internal.StateRepository.TileView
Windows.Internal.StateRepository.TileViewQueryFilter
Windows.Internal.StateRepository.User
Windows.Internal.StateRepository.XboxPackage
Windows.Internal.Tiles.MigrationHelper
Windows.StateRepository.dll
Windows.StateRepository.pdb
Windows.StateRepositoryUpgrade.dll
Windows.Storage.Streams.RandomAccessStreamReference
Windows.System.Internal.UserManager
Windows::Internal::StateRepository::AppExecutionAliasUserFactoryServer::Add
Windows::Internal::StateRepository::AppExecutionAliasUserFactoryServer::Delete
Windows::Internal::StateRepository::AppExecutionAliasUserFactoryServer::DeleteByApplicationIdentityAndUserAndAlias
Windows::Internal::StateRepository::AppExecutionAliasUserFactoryServer::Update
Windows::Internal::StateRepository::ConnectedSetFactoryServer::Add
Windows::Internal::StateRepository::ConnectedSetFactoryServer::Delete
Windows::Internal::StateRepository::ConnectedSetFactoryServer::DeleteByName
Windows::Internal::StateRepository::ConnectedSetFactoryServer::Update
Windows::Internal::StateRepository::ConnectedSetPackageFamilyFactoryServer::Add
Windows::Internal::StateRepository::ConnectedSetPackageFamilyFactoryServer::Delete
Windows::Internal::StateRepository::ConnectedSetPackageFamilyFactoryServer::Update
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::Add
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::Delete
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::DeleteByUserAndPackageAndIndex
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::DeleteByUserAndPackageAndName
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::Update
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::DynamicAppUriHandlerFactoryServer::Add
Windows::Internal::StateRepository::DynamicAppUriHandlerFactoryServer::Delete
Windows::Internal::StateRepository::DynamicAppUriHandlerFactoryServer::Update
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::Add
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::Delete
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::DeleteByUserAndPackageFamilyAndName
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::ReplaceByUserAndPackageFamilyNameAndName
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::Update
Windows::Internal::StateRepository::Management::RepositoryManagerServer::ApplySnapshot
Windows::Internal::StateRepository::Management::RepositoryManagerServer::CheckIntegrity
Windows::Internal::StateRepository::Management::RepositoryManagerServer::ClearDatabaseCache
Windows::Internal::StateRepository::Management::RepositoryManagerServer::CreateSnapshot
Windows::Internal::StateRepository::Management::RepositoryManagerServer::DeleteSnapshot
Windows::Internal::StateRepository::Management::RepositoryManagerServer::ImportPackageUserStatus
Windows::Internal::StateRepository::Management::RepositoryManagerServer::ImportSnapshot
Windows::Internal::StateRepository::Management::RepositoryManagerServer::Optimize
Windows::Internal::StateRepository::Management::RepositoryManagerServer::UnblockRequests
Windows::Internal::StateRepository::Management::RepositoryManagerServer::UpdateStatistics
Windows::Internal::StateRepository::Management::RepositoryManagerServer::Upgrade
Windows::Internal::StateRepository::PackageFactoryServer::UpdateIsMachineRegisteredByPackageFullName
Windows::Internal::StateRepository::PackageFactoryServer::UpdateIsSingletonRegistered
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::Add
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::Delete
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::DeleteByUserAndPackageFamilyAndNameAndIndex
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::Update
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::PackageFamilyUserResourceFactoryServer::Add
Windows::Internal::StateRepository::PackageFamilyUserResourceFactoryServer::Delete
Windows::Internal::StateRepository::PackageFamilyUserResourceFactoryServer::Update
Windows::Internal::StateRepository::PackageMachineStatusFactoryServer::DeleteByPackageFullName
Windows::Internal::StateRepository::PackageMachineStatusFactoryServer::UpdateStatusByPackageFullName
Windows::Internal::StateRepository::PackagePolicyFactoryServer::Add
Windows::Internal::StateRepository::PackagePolicyFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::PackagePolicyFactoryServer::Delete
Windows::Internal::StateRepository::PackagePolicyFactoryServer::DeleteByUserAndPackageAndNameAndIndex
Windows::Internal::StateRepository::PackagePolicyFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::PackagePolicyFactoryServer::Update
Windows::Internal::StateRepository::PackagePolicyFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::PackagePolicyFactoryServer::Upsert
Windows::Internal::StateRepository::PackageUserStatusFactoryServer::AddOrUpdateStatusByUserSecurityIdentifierAndPackageFullName
Windows::Internal::StateRepository::PackageUserStatusFactoryServer::DeleteByUserSecurityIdentifierAndPackageFullName
Windows::Internal::StateRepository::PrimaryTileUserChangelogFactoryServer::DeleteBy_Created
Windows::Internal::StateRepository::PrimaryTileUserChangelogFactoryServer::DeleteBy_Deleted
Windows::Internal::StateRepository::PrimaryTileUserChangelogFactoryServer::DeleteByTileUniqueId
Windows::Internal::StateRepository::PrimaryTileUserChangelogFactoryServer::DeleteByUserAndTileUniqueId
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::Add
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::Delete
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::DeleteByUserAndApplicationIdentity
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::DeleteByUserAndTileUniqueId
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::Update
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::SecondaryTileFactoryServer::Add
Windows::Internal::StateRepository::SecondaryTileFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::SecondaryTileFactoryServer::Delete
Windows::Internal::StateRepository::SecondaryTileFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::SecondaryTileFactoryServer::Update
Windows::Internal::StateRepository::SecondaryTileFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::SecondaryTileUserChangelogFactoryServer::DeleteBy_Created
Windows::Internal::StateRepository::SecondaryTileUserChangelogFactoryServer::DeleteBy_Deleted
Windows::Internal::StateRepository::SecondaryTileUserChangelogFactoryServer::DeleteByTileUniqueId
Windows::Internal::StateRepository::SecondaryTileUserChangelogFactoryServer::DeleteByUserAndTileUniqueId
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::Add
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::Delete
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::DeleteByUserAndSecondaryTile
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::DeleteByUserAndTileUniqueId
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::Update
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::Add
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::Delete
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::DeleteByTileUniqueId
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::DeleteByUserAndApplicationAndTileId
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::Update
Windows::Internal::StateRepository::XboxPackageFactoryServer::Add
Windows::Internal::StateRepository::XboxPackageFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::XboxPackageFactoryServer::Delete
Windows::Internal::StateRepository::XboxPackageFactoryServer::DeleteByEditionId
Windows::Internal::StateRepository::XboxPackageFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::XboxPackageFactoryServer::Update
Windows::Internal::StateRepository::XboxPackageFactoryServer::UpdateWorkId
WindowsCreateString
WindowsCreateStringReference
WindowsDeleteString
WindowsDuplicateString
WindowsGetStringRawBuffer
WindowsIsStringEmpty
WindowsStringHasEmbeddedNull
WITH BundleInfo(_PackageID, PackageType, BundleId, _PackageUserID, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)INSERT OR IGNORE INTO PackageUser  (_Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT 1, 0, p._PackageID, UserId, now(), 0, 1, DeploymentState, 0, NULL  FROM Package AS p INNER JOIN (   SELECT BundleId, UserId, DeploymentState FROM BundleInfo AS t    WHERE BundleId NOT IN (        SELECT b.BundleId FROM BundleInfo AS b         WHERE b.PackageType=8           AND b.UserId=t.UserId       )   ) AS b ON b.BundleId=p.SourceBundle AND p.PackageType=8;
WITH BundleInfo(_PackageID, PackageType, BundleId, PackageUserId, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)DELETE FROM PackageUser WHERE _PackageUserID IN (    SELECT PackageUserId FROM BundleInfo AS t     WHERE t.PackageType=8       AND NOT EXISTS(            SELECT 1 FROM Package AS p             INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID             WHERE pu.User=t.UserId AND p.SourceBundle=t.BundleId AND p.PackageType<>8           ));
WITH BundleInfo(_PackageID, PackageType, BundleId, PackageUserId, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)SELECT COUNT(*), GROUP_CONCAT(t.PackageUserID) FROM BundleInfo AS t WHERE t.PackageType=8   AND NOT EXISTS(        SELECT 1 FROM Package AS p         INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID         WHERE pu.User=t.UserId AND p.SourceBundle=t.BundleId AND p.PackageType<>8       );
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE fta.ContentType=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE fta.FileType=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ProgId=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND pf.PackageFamilyName=?3 AND (fta._WorkId=0 OR fta._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND pf.PackageFamilyName=?3 AND (fta._WorkId=0 OR fta._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND pf.PackageFamilyName=?3 AND (fta._WorkId=0 OR fta._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE fta.ContentType=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE fta.FileType=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ProgId=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND pf.PackageFamilyName=?3 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND pf.PackageFamilyName=?3 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND pf.PackageFamilyName=?3 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND pf.PackageFamilyName=?3 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)) AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)) AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Path, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)) AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (p._WorkId=0 OR p._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.AppListEntry=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.HostId=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category=?2 AND (ae._WorkId=0 OR ae._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.ProgId=?2 AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE dauh.ProgId=?2 AND (auh._WorkId=0 OR auh._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5)
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (pkg._WorkId=0 OR pkg._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE hr.HostId=?2 AND (hr._WorkId=0 OR hr._WorkId=?5) AND (pe._WorkId=0 OR pe._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.ApplicationUserModelId=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProgId=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (pkg._WorkId=0 OR pkg._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (pkg._WorkId=0 OR pkg._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (auh.HostName=?2 OR (SUBSTR(auh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(auh.HostName,2)))) AND (auh.Path IS NULL OR auh.Path=?5 OR (ENDSWITH(auh.Path,'*') AND (auh.Path='*' OR STARTSWITH(?5, SUBSTR(auh.Path,1,LENGTH(auh.Path)-1))))) AND (auh._WorkId=0 OR auh._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?5) AND (auh._WorkId=0 OR auh._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (dauh.HostName=?2 OR (SUBSTR(dauh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(dauh.HostName,2)))) AND (dauh.Path IS NULL OR dauh.Path=?5 OR (ENDSWITH(dauh.Path,'*') AND (dauh.Path='*' OR STARTSWITH(?5, SUBSTR(dauh.Path,1,LENGTH(dauh.Path)-1))))) AND (auh._WorkId=0 OR auh._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6)
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?5) AND (auh._WorkId=0 OR auh._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.fileTypeAssociation' AND p.PackageFullName=?2 AND fta.FileType=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) AND (fta._WorkId=0 OR fta._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.protocol' AND p.PackageFullName=?2 AND pr.ProtocolName=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) AND (pr._WorkId=0 OR pr._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (a._WorkId=0 OR a._WorkId=?6)  AND (p._WorkId=0 OR p._WorkId=?6) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND pf.PackageFamilyName=?3 AND (p._WorkId=0 OR p._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pkg._WorkId=0 OR pkg._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND pf.PackageFamilyName=?3 AND (fta._WorkId=0 OR fta._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (p._WorkId=0 OR p._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND pf.PackageFamilyName=?3 AND (p._WorkId=0 OR p._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pkg._WorkId=0 OR pkg._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)) AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?6) AND pf.PackageFamilyName=?3 AND (auh._WorkId=0 OR auh._WorkId=?7) AND (ae._WorkId=0 OR ae._WorkId=?7) AND (a._WorkId=0 OR a._WorkId=?7) AND (p._WorkId=0 OR p._WorkId=?7);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)) AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?3 AND (auh.HostName=?2 OR (SUBSTR(auh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(auh.HostName,2)))) AND (auh.Path IS NULL OR auh.Path=?6 OR (ENDSWITH(auh.Path,'*') AND (auh.Path='*' OR STARTSWITH(?6, SUBSTR(auh.Path,1,LENGTH(auh.Path)-1))))) AND (auh._WorkId=0 OR auh._WorkId=?7) AND (ae._WorkId=0 OR ae._WorkId=?7) AND (a._WorkId=0 OR a._WorkId=?7) AND (p._WorkId=0 OR p._WorkId=?7);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)) AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?3 AND (dauh.HostName=?2 OR (SUBSTR(dauh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(dauh.HostName,2)))) AND (dauh.Path IS NULL OR dauh.Path=?6 OR (ENDSWITH(dauh.Path,'*') AND (dauh.Path='*' OR STARTSWITH(?6, SUBSTR(dauh.Path,1,LENGTH(dauh.Path)-1))))) AND (auh._WorkId=0 OR auh._WorkId=?7) AND (ae._WorkId=0 OR ae._WorkId=?7) AND (a._WorkId=0 OR a._WorkId=?7) AND (p._WorkId=0 OR p._WorkId=?7)
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)) AND (p._WorkID=0 OR p._WorkID=?7) AND (pu._WorkID=0 OR pu._WorkID=?7)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?6) AND pf.PackageFamilyName=?3 AND (auh._WorkId=0 OR auh._WorkId=?7) AND (ae._WorkId=0 OR ae._WorkId=?7) AND (a._WorkId=0 OR a._WorkId=?7) AND (p._WorkId=0 OR p._WorkId=?7)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Path, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.AppListEntry=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.HostId=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category=?2 AND ae._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (auh.HostName=?2 OR (SUBSTR(auh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(auh.HostName,2)))) AND (auh.Path IS NULL OR auh.Path=?5 OR (ENDSWITH(auh.Path,'*') AND (auh.Path='*' OR STARTSWITH(?5, SUBSTR(auh.Path,1,LENGTH(auh.Path)-1))))) AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?5) AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.ProgId=?2 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (dauh.HostName=?2 OR (SUBSTR(dauh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(dauh.HostName,2)))) AND (dauh.Path IS NULL OR dauh.Path=?5 OR (ENDSWITH(dauh.Path,'*') AND (dauh.Path='*' OR STARTSWITH(?5, SUBSTR(dauh.Path,1,LENGTH(dauh.Path)-1))))) AND auhg._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE dauh.ProgId=?2 AND auhg._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?5) AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND p._WorkId=0 AND a._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE hr.HostId=?2 AND hr._WorkId=0 AND pe._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND p._WorkId=0 AND pu._WorkId=0 AND a._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProgId=?2 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.fileTypeAssociation' AND p.PackageFullName=?2 AND fta.FileType=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND fta._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.protocol' AND p.PackageFullName=?2 AND pr.ProtocolName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pr._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?6) AND pf.PackageFamilyName=?3 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?3 AND (auh.HostName=?2 OR (SUBSTR(auh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(auh.HostName,2)))) AND (auh.Path IS NULL OR auh.Path=?6 OR (ENDSWITH(auh.Path,'*') AND (auh.Path='*' OR STARTSWITH(?6, SUBSTR(auh.Path,1,LENGTH(auh.Path)-1))))) AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?3 AND (dauh.HostName=?2 OR (SUBSTR(dauh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(dauh.HostName,2)))) AND (dauh.Path IS NULL OR dauh.Path=?6 OR (ENDSWITH(dauh.Path,'*') AND (dauh.Path='*' OR STARTSWITH(?6, SUBSTR(dauh.Path,1,LENGTH(dauh.Path)-1))))) AND auhg._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND a._WorkId=0  AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh.Path IS NULL OR auh.Path=?6) AND pf.PackageFamilyName=?3 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND pf.PackageFamilyName=?3 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND pf.PackageFamilyName=?3 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 ;
wlTrZ
wm\T;
Wm'Z%d
Wo$t4
wo;=\ R
WorkId
workid
WorkId
WowDependencyGraph
WriteFile
WriteSetting: Name=%ls
WSj|Z
WSj9Z
WSjQZ
WSjUZ
WSPh 
WSQVP
WVj^Z
WVj}Z
WVj2Z
WVj8Z
WVjdZ
WVjJZ
WVjlZ
WVRPh
WVRPh@
-x:<r
X[_^]
x_v?V
X|V~SNW1@
X0V0T
XboxPackage
XboxPackageStatics::ActivateInstance
XboxPackageStatics::Add
XboxPackageStatics::ClearWorkByWorkId
XboxPackageStatics::ctor
XboxPackageStatics::Delete
XboxPackageStatics::DeleteByEditionId
XboxPackageStatics::DeleteByWorkId
XboxPackageStatics::dtor
XboxPackageStatics::Exists
XboxPackageStatics::ExistsByContentId
XboxPackageStatics::ExistsByDeviceId
XboxPackageStatics::ExistsByEditionId
XboxPackageStatics::ExistsByEscrowedKeyBlobId
XboxPackageStatics::ExistsByPackage
XboxPackageStatics::ExistsByProductId
XboxPackageStatics::ExistsByTitleId
XboxPackageStatics::Find
XboxPackageStatics::FindByContentId
XboxPackageStatics::FindByDeviceId
XboxPackageStatics::FindByEditionIdPackageFamilyName
XboxPackageStatics::FindByEscrowedKeyBlobId
XboxPackageStatics::FindByPackage
XboxPackageStatics::FindByProductId
XboxPackageStatics::FindByTitleId
XboxPackageStatics::Get
XboxPackageStatics::GetByEditionId
XboxPackageStatics::TryGet
XboxPackageStatics::TryGetByEditionId
XboxPackageStatics::Update
XboxPackageStatics::UpdateWorkId
xqC;]
XQOnA
xSu$W
y!Vh@
y"Vh<
y"VhH]
y%VhP
y%Vhx
y%WhX
y)Vh(
y)Vhh
y)VhH
y)VhPV
y)Vhx
y,Vh<
y,Wh 
y,Wh K
y,Wh(
y,Wh@
y,Wh@7
y,Wh`
y,Wh`=
y,Wh0
y,Wh0-
y,Wh8q
y,Wh8V
y,WhH
y,Whh
y,WhH2
y,Whhy
y,Whx
y,WhX
y.Wh 
y.Whh
y;rpP
Y__^[
y>)IY
Y0b0~0
y1Vh8
yaWh@
yaWhH
ygWh0
yis^9
ylWh@
ylWhH
yOPh(
yOPhX
yOWh`
yOWhP$
yOWhX
yQWh(
yQWhX
y-ShX
YSSSVj
ysWhp\
yua{A
YY_^]
Z?G*M/
z}3N|
Z7,Qi
Z9A,t9
Z9Y,t;3
Zt,kE
