     
                        "__tag": true,
                        "key": "availabilityId",
                        "key": "devOfferId",
                        "key": "parentProductId",
                        "key": "productId",
                        "key": "skuId",
                        "type": "string"
                    "__tag": true,
                    "availabilityId": {
                    "devOfferId": {
                    "key": "deviceFamily",
                    "key": "deviceMoid",
                    "key": "deviceOemid",
                    "key": "deviceScmid",
                    "key": "languages",
                    "key": "market",
                    "productId": {
                    "quantity": "1",
                    "skuId": {
                    "type": "string"
                    }
                    },
                "__tag": true,
                "client": "UniversalStoreInApp",
                "defaultValue": 25
                "deviceFamily": {
                "deviceMoId": {
                "deviceOemId": {
                "deviceScmId": {
                "isOptional": true
                "key": "AppServiceName",
                "key": "bidRequest",
                "key": "consumableProductId",
                "key": "continuationToken",
                "key": "customDeveloperString",
                "key": "data",
                "key": "deviceFamily",
                "key": "DeviceId",
                "key": "deviceMoid",
                "key": "deviceOemid",
                "key": "deviceScmid",
                "key": "entitlementFilters",
                "key": "includeRelationship",
                "key": "locale",
                "key": "market",
                "key": "maxPageSize",
                "key": "Offer",
                "key": "optionalData",
                "key": "orderId",
                "key": "parameters",
                "key": "parentProductId",
                "key": "PFN",
                "key": "ProductId",
                "key": "productSkuIds",
                "key": "publisherUserId",
                "key": "quantity",
                "key": "relatedProductIds",
                "key": "serviceTicket",
                "key": "SkuId",
                "key": "StoreId",
                "key": "trackingId",
                "key": "type",
                "languages": {
                "market": {
                "type": "array",
                "type": "beneficiaryArray"
                "type": "goldenBeneficiary",
                "type": "goldenBeneficiaryArray"
                "type": "number",
                "type": "object"
                "type": "string"
                "type": "string",
                {
                }
                },
            "__tag": true,
            "alwaysEnforceDoublePurchasePolicy": true
            "applicationId": {
            "AppServiceName": {
            "beneficiaries": {
            "beneficiary": {
            "bidRequest": {
            "clientContext": {
            "continuationToken": {
            "customDeveloperString": {
            "data": {
            "deviceFamily": {
            "DeviceId": {
            "deviceMoid": {
            "deviceOemid": {
            "deviceScmid": {
            "enforceSellableBy": true,
            "entitlementFilters": {
            "includeRelationship": {
            "items": [
            "key": "attachRecordId",
            "key": "hostType",
            "key": "StoreId",
            "language": {
            "locale": {
            "market": {
            "maxPageSize": {
            "ModalFlow": "redeem",
            "ModalFlow": "smartInstall",
            "ModalFlow": "writeRatingsAndReview",
            "Offer": {
            "OptionalData": {
            "orderId": {
            "orderState": "Purchased",
            "parameters": {
            "ParentProductId": {
            "parentProductId": {
            "PFN": {
            "productId": {
            "ProductId": {
            "productSkuIds": [
            "productSkuIds": {
            "publisherUserId": {
            "relatedProductIds": {
            "removeQuantity": {
            "serviceTicket": {
            "SkuId": {
            "StoreId": {
            "storeSdkAttributes": {
            "trackingId": {
            "type": "string"
            "type": {
            "validityType": "Valid",
            ]
            ],
            }
            },
          "attachRecordId": {
          "hostType": {
          "isDigitalAttachment": true,
          "StoreId": {
          }
          },
        "__COMMENT__": "#0 - Get Parent Product",
        "__COMMENT__": "#0 purchase StoreID with extended response",
        "__COMMENT__": "#1 - Get User Collection for Parent Product",
        "__COMMENT__": "#1 invoke background task",
        "__COMMENT__": "#10 StoreList Query",
        "__COMMENT__": "#11 Search for products by query",
        "__COMMENT__": "#12 Given a set of product IDs, return the average ratings and counts",
        "__COMMENT__": "#13 ContentId/KeyId lookup by ProductId for ParentProduct",
        "__COMMENT__": "#14 ContentId/KeyId lookup by ProductId NO ParentProduct",
        "__COMMENT__": "#15 Invoke In App Redeem using Purchase Flow",
        "__COMMENT__": "#16 Invoke In App Rating & Review using Purchase Flow",
        "__COMMENT__": "#17 StoreList Query with previewStore",
        "__COMMENT__": "#18 Given a set of product IDs, return the average ratings and counts (previewStore)",
        "__COMMENT__": "#19 Ad SDK to get Mixer Ad data for Inline Purchase experience",
        "__COMMENT__": "#2 - Get User Collection for Products",
        "__COMMENT__": "#2 TVOD",
        "__COMMENT__": "#20 Get list of PTI devices for a user",
        "__COMMENT__": "#21 Push product to device",
        "__COMMENT__": "#22 AAD token based monetization apis - RS4+ Only",
        "__COMMENT__": "#23 SFDS Suggestion Service - RS5+ Only",
        "__COMMENT__": "#24 Invoking PurchaseApp (SXH) for the Smart Install scenario - RS5+ Only",
        "__COMMENT__": "#29 - Digital attach redeem",
        "__COMMENT__": "#3 - Get Products, No Parent (No license needed)",
        "__COMMENT__": "#3 purchase StoreID with force retail sandbox without license refresh",
        "__COMMENT__": "#4 - Get Products From Parent (Must have a valid license)",
        "__COMMENT__": "#4 Force license refresh for all online running licenses",
        "__COMMENT__": "#5 - Get User Collection for Parent Product by Family",
        "__COMMENT__": "#5 Acquire a device license - RS2+ Only",
        "__COMMENT__": "#6 - Consume Consumable",
        "__COMMENT__": "#6 Acquire a license token -  RS2+ Version",
        "__COMMENT__": "#7 - Get Customer Purchase Id",
        "__COMMENT__": "#7 Device token based monetization apis - RS2+ Only",
        "__COMMENT__": "#8 - Get Customer Collections Id",
        "__COMMENT__": "#8 Store User token based monetization apis",
        "__COMMENT__": "#9 - Get Products by Family from Parent",
        "__COMMENT__": "#9 Lookup ProductId from PackageFamilyName",
        "__COMMENT__": "Get campaign ID for device (RS4+)",
        "__COMMENT__": "Get campaign ID for user or device (RS5+)",
        "__COMMENT__": "Get Microsoft Accrued for device (RS4+)",
        "__COMMENT__": "Get Microsoft Accrued for user or device (RS5+)",
        "AnonymousRequest": true,
        "AuthType": 1,
        "AuthType": 2,
        "AuthType": 4
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyBufferMaxSize": 1024,
        "BodyBufferMaxSize": 20000,
        "BodyBufferMaxSize": 300,
        "BodyTemplate": {
        "DoPost": true,
        "FallbackToDeviceAuth": true
        "ForceRetailSandbox": true,
        "Height": 384
        "Height": 560
        "Index": 0,
        "Index": 1,
        "Index": 10,
        "Index": 11,
        "Index": 12,
        "Index": 13,
        "Index": 14,
        "Index": 15,
        "Index": 16,
        "Index": 17,
        "Index": 18,
        "Index": 19,
        "Index": 2,
        "Index": 20,
        "Index": 21,
        "Index": 22,
        "Index": 23,
        "Index": 24,
        "Index": 25,
        "Index": 26,
        "Index": 27,
        "Index": 28,
        "Index": 29,
        "Index": 3,
        "Index": 4,
        "Index": 5,
        "Index": 6,
        "Index": 7,
        "Index": 8,
        "Index": 9,
        "InvokePurchaseFlow": true,
        "OmitAuthTokenPrefix": true
        "RefreshLicenses": true
        "RefreshLicenses": true,
        "RequiresCapability": "previewStore",
        "RequiresCapability": "storeAppInstallation",
        "RequiresCapability": "xboxXDK",
        "RequireValidLicense": false
        "RequireValidLicense": false,
        "URI": "https://adbroker.mp.dse.microsoft.com/v1/adbroker/srtb2",
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/consume",
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "URI": "https://collections.mp.microsoft.com/v7.0/beneficiaries/me/keys",
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/{parentProductId}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK",
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/lookup{market:market}{languages:languages}{packageFamilyName:value}&fieldsTemplate=empty&alternateid=PackageFamilyName",
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products/lookup{parentProductId:value}{market:market}{languages:languages}{itemCount:$top}{skipCount:$skip}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK&actionFilter=Purchase&alternateId=SellableBy",
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "URI": "https://licensing.mp.microsoft.com/v8.0/licenseToken",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/aad",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/device",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/user",
        "URI": "https://pti.store.microsoft.com/v1/pti/devices{market:market}{languages:languages}{productId:productId}{skuId:skuId}",
        "URI": "https://pti.store.microsoft.com/v1/pti/push{market:market}",
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/keys",
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/orders",
        "URI": "https://sfdataservice.microsoft.com/smartinstall/v1.0/suggestions/suggest",
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}&parentProductId=",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}{displayMode:displayMode}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}{displayMode:displayMode}&parentProductId=",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/search{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{query:query}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}&parentProductId=",
        "URIBufferMaxSize": 1024,
        "UseAuthIfAvailable": true
        "UseBackgroundTask": true,
        "UserTokenTypes": 3,
        "Width": 456,
        "Width": 640,
        }
        },
      %02u skuType = %s, productId = %s, title = %s, customDeveloperData = %s, price = %s%s (%s), extendedData = %s, description = %s
      }
      <no sku data>
    "LinkUriFormat": "https://www.microsoft.com/store/{idType}/{id}",
    "MDCollections": "https://collections.mp.microsoft.com/",
    "MDDisplayCatalog": "https://displaycatalog.mp.microsoft.com/",
    "MDGetAppReceiptsDesktop": "https://licensingwindows.mp.microsoft.com/Licensing/License/AcquireReceipt/6.2/0?productId={productId}&receiptType={receiptType}",
    "MDGetAppReceiptsMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/appreceipts?os=8.10.12400.0&requestTime={requestTime}&cc={cc}&lang={lang}&parentProductId={parentProductId}&installedPublisherId={installedPublisherId}",
    "MDGetOneProductReceiptMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/receipts?os=8.10.12400.0&requestTime={requestTime}&cc={cc}&lang={lang}&parentProductId={parentProductId}&featureName={featureName}&installedPublisherId={installedPublisherId}",
    "MDPurchase": "https://purchase.mp.microsoft.com"
    "OneStoreAuthenticationDomain": "www.microsoft.com",
    "smartInstall": {
    "writeRatingsAndReview": {
    %02u inAppOfferToken = %s, transId = %s, offerId = %s
    %02u offerToken = %s, productId = %s, name = %s, price = %s%s (%s), type = %u, isOnSale = %hs, tag = %s
    %02u productId = %s, offerId = %s, productType = %u, skuId = %s, isTrial = %hs, catalogId = %s, expires %u/%u/%u
    {
    }
    },
    <empty list>
  %02u inAppOfferToken = %s, productId = %s, transId = %s, offerId = %s
  %02u inAppOfferToken = %s, productId = %s, type = %u, price = %s, name = %s
  <empty list>
  <missing list>
  Description: %s%hs
  ExpirationDateTime: %u/%u/%u %02u:%02u:%02u
  InAppOfferArray: %hs
  IsActive: %hs, IsTrial: %hs, App type: %u, Listner count: %u
  IsOnSale: false
  IsOnSale: TRUE, Sale End Date: %u/%u/%u %02u:%02u:%02u
  IsUAP: %hs, Market: %s, Locale: %s, Age Rating: %u
  LicenseInstance: %hs
  LicenseManager: %hs
  Price: %s, Base Price: %s, Currency Symbol: %s, Currenty Code: %s
  Ticks until next check: %u
  UnfulfilledList: %hs
 !"#$%&'()*+,-./0123
 0)01060A0Z0h0
 0E0T0Y0c0
 1J1t1
 7J7n7
 9>t#Sh
 ChkAlloc(m_spStoreCommerceFactory)
 http://www.microsoft.com/windows0
 info
 Microsoft Corporation. All rights reserved.
 Operating System
 SVW3
 WARN
 Windows
!(storeId && packageFamilyName)
!*!N!r!
!*WPq
!]_0t
!_hInternet
!_pszServer
!0*0A0r0{0
!0>0C0M0{0
!m_userObject || IsUMgrGetConstrainedUserTokenPresent()
!storeProductId.IsValid() && "Shouldn't be a storeId yet in this scenario"
!This program cannot be run in DOS mode.
!TkjE
!Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductResult *>,0>::DoWorkStub
"&"J"t"
"01060@0j0|0
"080?0I0N0w0
"Microsoft Window
"QVh 
"QVhx
"z}!M
####-##-##T##:##:##S
##:##
#$QChkHr(_jsonRequest.Set(jsonRequest))
#(#L#p#
#0.0p0{0
#070>0C0K0
#Gs>:
#Vx"&6
$$$H$l$&"J"
$0)0p0u0
$0;0H0R0W0n0y0
$2.s[S
$Microsoft Ireland Operations Limited1
$SVWj
% moa
%0*020P0U0g0l0x0
%016llX
%04u-%02u-%02u%s%02u:%02u:%02u%s
%04u-%02u-%02uT%02u:%02u:%02uZ
%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
%0B0O0
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
%localappdata%\Microsoft\Windows\WER\ReportArchive
%localappdata%\Microsoft\Windows\WER\ReportQueue
%localappdata%\Packages\Microsoft.WindowsStore_8wekyb3d8bbwe\LocalState\store.etl
%s export "%s" "%s" /y
%s%02d:%02d:%09.6f
%s%d.%02d:%02d:%09.6f
%s%hs:%ws
%s-%s-%d-%s
%s:%s
%s:%s:%s
%windir%\Logs\dosvc
%windir%\Logs\SIH
%windir%\Logs\WindowsUpdate
%windir%\ServiceProfiles\NetworkService\AppData\Local\Microsoft\Windows\DeliveryOptimization\logs
%windir%\SoftwareDistribution\ReportingEvents.log
%windir%\System32\Config\SystemProfile\AppData\Local\packages\Microsoft.GamingServices_8wekyb3d8bbwe\LocalState
%windir%\System32\LogFiles\WMI
%WINDIR%\System32\reg.exe
%ws&$skip=%u
&_*q<|
&040B0O0Y0^0|0
&050d0z0
&9N<u
'&Lh-\
&OL0O
&platformDependencyName=Windows.Universal
&platformDependencyName=Windows.Windows8x
&platformDependencyName=Windows.WindowsPhone8x
&PWSV
&S|9a
(((HRESULT)(hr)) < 0)
(((HRESULT)(spAsyncInfo->get_ErrorCode((&(__hr))))) >= 0)
(((HRESULT)(spAsyncInfo->get_Status(&status))) >= 0)
((_pszStringData == nullptr) && (_cchStringData == 0)) || ((_pszStringData == nullptr) && (_cchStringDataCapacity == s_cchUnknown)) || ((_pszStringData != nullptr) && (_cchStringData == ::wcslen(_pszStringData)))
((wcschr(pszUriBase, L'{')) == 0) && "On this overload, the uri base must be *clean*; no parameters allowed"
(_cchStringData <= _cchStringDataCapacity) || (_cchStringDataCapacity == s_cchUnknown)
(0x%08x)
(caller: %p) 
(invalid)
(PeOC
(QD)Qj
(QVh`
)&F~6
).)R)
)Microsoft Root Certificate Authority 20100
*.etl
,060c0j0o0v0
,a$Cs
,ET/KmM6kidqRyWJOlaGtatDN4mJMAZzyPvO4+PuMig4=0Z
,L,|,
,SVW3
.  AppId: %s, Name: %s
.00cfg
.080=0
.0H0Y0
.2.\.
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.data
.data$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.QSh4
.rdata
.rdata$brc
.rdata$sxdata
.rdata$T$brc
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.report.wer.txt
.rsrc
.rsrc$01
.rsrc$02
.text
.text$di
.text$mn
.text$x
.text$yd
.tls$
.tls$ZZZ
.xdata$x
//ServiceEnvironment/Authentication
//ServiceEnvironment/StoreSDK
/+I}j
/t.f;E
/Z*Px
/Z/y<
/Z-[E
/Z{I<
/Z}7F
-/Z3l
/Z7i*
/Z8@b
/ZeOC
/ZhM{
/ZsOg
/ZsOg<
/ZUo~9@D
/ZW^6
/ZxqL
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:t:x:
: :$:8:@:H:P:X:`:d:l:p:
: :%:/:`:
: :%:=:L:Q:Y:
: :&:9:B:S:Z:
: :0:4:8:H:L:P:T:\:d:l:t:|:
: :J:R:\:
: ;/;;;@;E;R;l;
: ;1;;;
:!:&:0:^:q:
:!:(:`:i:
:!:,:1:<:A:L:Q:Y:m:s:x:
:!:,:L:W:
:!:.:?:Q:[:`:u:
:!:':::E:W:^:
:!:P:U:_:
:!:p:z:
:!;5;:;?;L;_;d;i;v;
:!J5M
:":&:,:0:6:::R:V:\:`:f:j:p:t:z:~:
:":':1:x:
:":-:B:M:Z:n:~:
:":2:B:R:b:r:
:":9:@:J:O:v:
:";,;>;
:";3;8;>;X;
:";O;
:#:):/:5:9:?:C:I:O:U:Y:_:c:i:o:u:y:
:#:e:}:
:#:F:t:
:#:Q:`:
:#:Q:g:
:#;,;7;
:$:,:4:<:@:D:P:T:X:l:p:t:x:|:
:$:.:
:$:J:Y:
:$;:;H;b;p;
:%:.:K:P:z:
:%:0:6:b:
:%:1:6:@:R:W:t:
:%:3:K:
:%;,;8;F;
:%;3;?;[;g;s;
:%;5;C;q;
:&:1:m:t:{:
:&:2:r:
:&;+;N;S;o;t;
:(:0:4:L:P:X:\:p:t:
:(:4:8:@:D:H:P:X:`:d:h:p:t:
:(:6:d:z:
:(:I:Q:[:`:u:
:(;/;4;>;
:(;/;5;<;v;
:):3:8:`:n:x:}:
:):D:`:x:
:):H:e:o:
:);@;t;
:*:4:9:
:*:A:j:
:*:C:Q:q:
:*;D;U;
:,:4:8:P:T:X:\:p:x:|:
:,;;;@;H;
:.:3:;:
:.:7:R:\:
:.;;;
:/:X:g:x:
:/;6;
:::I:g:l:q:
:':-:J:v:
:':?:D:N:k:q:{:
:-:=:K:y:
:':>:J:
:':E:
::wcslen(_pszStringData) == _cchStringData
::WindowsDuplicateString(_availabilityId.Get(), pValue)
::WindowsDuplicateString(_campaignId.Get(), pValue)
::WindowsDuplicateString(_Caption.Get(), pValue)
::WindowsDuplicateString(_currencyCode.Get(), pValue)
::WindowsDuplicateString(_customDeveloperData.Get(), pValue)
::WindowsDuplicateString(_description.Get(), pValue)
::WindowsDuplicateString(_devOfferId.Get(), pValue)
::WindowsDuplicateString(_extendedJsonData.Get(), pValue)
::WindowsDuplicateString(_formattedBasePrice.Get(), pValue)
::WindowsDuplicateString(_formattedPrice.Get(), pValue)
::WindowsDuplicateString(_formattedRecurrencePrice.Get(), pValue)
::WindowsDuplicateString(_fulfillmentType.Get(), pValue)
::WindowsDuplicateString(_inAppOfferToken.Get(), pValue)
::WindowsDuplicateString(_language.Get(), pValue)
::WindowsDuplicateString(_name.Get(), pValue)
::WindowsDuplicateString(_packageFamilyName.Get(), value)
::WindowsDuplicateString(_productId.Get(), pValue)
::WindowsDuplicateString(_productKind.Get(), pValue)
::WindowsDuplicateString(_Purpose.Get(), pValue)
::WindowsDuplicateString(_response.Get(), value)
::WindowsDuplicateString(_skuId.Get(), pValue)
::WindowsDuplicateString(_storeId.Get(), pValue)
::WindowsDuplicateString(_title.Get(), pValue)
::WindowsDuplicateString(_trialUniqueId.Get(), pValue)
:;:@:E:v:
:;:Q:}:
:;;D;`;i;
:;;z;
:-;2;7;P;a;p;
:';G;Q;V;
:?:k:t:
:?:N:X:]:z:
:@:c:
:@;I;
:[:`:h:
:\:e:
:\;a;k;
:\;t;~;
:_;j;
:+:H:[:x:
:+;Q;
:<:@:D:H:P:T:`:d:l:p:
:<:A:Y:z:
:<:C:
:<:G:L:Q:[:{:
:<:R:
:=:}:
:=:F:y:~:
:>:D:g:p:v:
:>:N:]:{:
:0:=:_:f:n:s:
:0:h:
:1:::M:[:
:1:6:=:C:S:q:v:}:
:1;;;@;
:1;a;
:1;e;r;y;
:2;C;H;N;h;
:2;X;g;l;v;
:3:I:
:3;:;@;M;V;k;t;
:3;@;G;N;`;k;r;y;
:3;<;D;I;T;r;};
:3;X;
:4:>:F:R:W:\:c:m:
:4:S:
:4;T;n;
:5;>;D;J;T;{;
:6:=:B:J:l:
:7:d:
:7:h:r:w:
:7:S:X:g:t:y:
:8:=:G:z:
:8:g:l:t:
:8:J:Y:w:
:8;R;
:9:B:S:X:]:d:n:
:9:K:k:p:z:
:9:R:}:
:9;F;M;T;Z;m;v;
:A:q:
:a;f;
:A;N;[;
:B:~:
:b;l;~;
:B;L;Q;w;
:D:Z:
:D;I;Q;
:F:\:
:f:q:
:F:Y:^:h:
:F;K;w;
:g:m:
:G:N:U:\:c:j:q:x:
:G:t:
:G:T:y:
:G:Y:k:
:g;n;t;{;
:J:Y:c:h:
:K:T:c:h:r:
:l;u;
:M:Z:a:h:o:v:}:
:N:W:
:O:\:
:P:X:]:g:
:R:`:l:x:
:S:Z:a:h:
:V:\:f:
:V:h:v:
:V;[;c;
:V;];b;l;
:W:j:
:X;`;h;p;x;
:Z/0T
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;H;L;P;T;d;h;p;t;|;
; ;$;4;8;@;D;H;X;\;d;h;l;
; ;$;8;<;L;T;X;l;p;t;
; ;(;,;@;D;T;X;h;l;t;x;|;
; ;0;5;E;S;c;h;
; ;q;|;
; <*<A<H<
;!;&;Q;[;u;
;!;+;2;
;!;3;E;J;\;
;!;r;
;!<&<m<
;!<=<N<e<~<
;";?;D;I;|;
;";2;B;b;m;
;";2;B;R;b;r;
;"<-<Z<
;#;+;X;];x;
;#;D;g;
;#<L<j<
;$;(;,;@;H;L;T;X;p;|;
;$;(;,;0;4;<;@;`;d;h;l;p;|;
;$;(;.;4;:;>;D;H;N;T;Z;^;d;j;p;v;
;$;/;F;o;
;$;7;Z;_;g;
;$;I;
;$;J;U;\;g;
;$;T;^;d;t;
;$;Z;a;f;n;
;%;+;H;N;g;n;
;%;<;X;
;%;5;E;Q;^;p;
;%<.<9<b<
;%<+<0<L<]<l<q<
;&;A;m;x;~;
;&<8<F<d=
;&<8<F<y<
;&<R<[<l<q<v<}<
;&=Z=
;(;B;^;
;(<.<^<d<
;);.;T;Y;a;
;);P;g;
;)<:<I<o<
;)<3<><K<R<Y<`<r<}<
;*;;;q;{;
;*;;;y;
;*;`;e;o;
;*;k;r;y;
;*<2<7<A<z<
;*<l<
;,;1;6;=;D;x;
;,;J;V;l;
;.;3;;;
;.;D;
;.<?<I<N<f<t<~<
;.<H<
;/;\<t<~<
;/;<;D;I;S;
;/;=;k;
;/;U;q;v;
;:<A<F<N<
;';,;Y;y;
;;;B;I;^;
;;;E;J;w;
;;;w;
;';?;^;x;};
;-;?;P;X;s;{;
;-;@;J;a;o;};
;-;_;
;-;3;:;
;-;4;J;Q;W;
;?;D;{;
;?<D<
;@>N>
;[;a;l;q;v;
;+;8;>;Q;d;k;
;+;9;o;
;+<g<
;+<N<U<\<c<
;<;m;z;
;<;z;
;<<E<v<
;<<k<
;-<2<7<P<a<p<
;-<6<M<~<
;=;C;J;T;};
;=;D;K;R;
;=;K;Y;^;h;
;-=_=
;>;C;M;
;>;K;R;d;o;v;
;0<5<?<q<
;0<9<
;0<U<r<}<
;0<V<
;1;;;@;];
;1;?;I;N;k;p;z;
;1;6;=;C;S;u;{;
;2;6;<;@;F;J;P;T;Z;^;r;v;
;2;M;R;
;2<?<F<M<S<f<o<|<
;2<9<@<G<X<w<
;3;D;
;4;8;P;h;
;4;e;r;
;4;Q;x;
;4;Z;z;
;5;H;W;g;{;
;6;H;V;
;6;T;_;
;7;Q;\;
;7;V;
;8;<;@;D;H;P;T;X;p;t;|;
;8;=;B;\;l;
;8;=;f;k;
;8;I;N;Z;e;t;y;
;8;M;X;
;9;A;V;\;
;9;I;Z;r;~;
;A;G;L;V;
;A;G;L;V;(<<<D<I<T<k<
;A;S;X;
;B<{<
;b<l<~<
;D;H;L;P;T;X;h;l;|;
;D;S;X;p;
;d<k<r<y<
;D<Q<^<e<k<~<
;E;t;{;
;E<h<
;F;\;
;F;h;
;F;M;h;r;w;
;F;X;f;
;F<d<p<
;f<m<r<|<
;G;Q;\;i;p;w;~;
;H;V;[;e;z;
;H@t&
;H@t?
;H0t&
;H0t*
;H0t?
;H0tES
;I;`;
;I<`<
;K@t(
;K@t<
;K0t(
;K0t<
;O<T<\<
;P;];j;p;
;p;u;
;Q@t'
;Q@t=
;Q@t2
;Q@t3
;Q@tU
;Q0t'
;Q0t=
;Q0t1
;Q0t2
;Q0t3
;Q0tC
;Q0tR
;Q0tU
;S;p;
;T$ r
;T;^;d;t;
;w(s/
;W<^<d<k<
;w<|<
;X;c;r;w;
;Z;d;j;
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?8?@?D?X?\?`?x?|?
? ?$?,?0?8?<?L?P?T?d?h?|?
? ?$?,?0?D?L?P?T?d?h?p?t?
? ?&?G?O?V?\?b?
? ?(?,?0?4?<?@?T?X?\?l?p?t?
? ?*?t?
? ?4?8?<?L?T?X?l?p?
? ?f?
? ?z?
? Mh,
?!?&?-?3?C?a?f?m?s?
?!?*?7?>?
?!?'?+?1?5?;?A?G?K?Q?U?[?a?g?k?q?u?{?
?!?+?C?x?
?!?4?P?Y?`?
?!?9?x?
?!?q?w?|?
?"?)?3?V?b?g?
?"?'?1?k?p?z?
?"?'?1?X?j?y?~?
?"?2?B?R?_?s?
?"?2?B?R?b?r?
?"?A?F?N?
?#?*?@?G?M?
?#?-?2?R?`?q?{?
?#?+?~?
?#?3?Q?V?]?c?s?
?#?8?B?G?
?#?k?q?
?#?X?_?d?l?
?$?(?<?@?D?T?\?`?x?|?
?$?.?3?x?
?$?.?W?{?
?$?-?=?C?f?k?u?
?%?*?=?B?R?W?_?~?
?%?/?4?L?p?
?%?\?a?f?m?w?
?%?<?Y?a?h?o?u?
?%?1???M?W?\?q?}?
?%?1?r?
?%?A?O?w?
?%?a?s?
?%?c?p?}?
?%?V?h?v?
?&?2?{?
?&?3?I?N?S?n?
?&?4?O?j?
?&?A?`?n?
?&?r?
?&?T?n?
?(?-?5?c?l?{?
?(?5?<?C?I?\?e?n?u?|?
?(?6?
?)?;?A?p?
?)?2?:?@?L?V?
?)?3?=?G?Q?[?e?l?s?z?
?)?9?C?H?o?
?)?R?d?m?s?z?
?*?0?7?A?Y?s?}?
?,?0?4?<?@?H?L?\?`?h?p?t?
?,?0?4?D?H?P?T?X?h?l?t?x?
?,?6?N?g?x?
?,?m?|?
?,?R?X?
?.?=?B?J?w?
?.?3?N?S?[?
?.?5?<?|?
?.?8?=?B?I?N?q?
?.?8?D?K?R?
?.?Z?j?x?
?/?G?
?/?q?
?-?@?X?y?
??_V@YAXPAX@Z
?-?4???~?
?'?M?V?\?i?
?-?X?
?\?g?l?q?~?
?+?[?d?k?
?<?a?l?
?=?L?Q?[?
?=?y?
?>?H?_?f?
?>?I?T?_?j?
?4?;?B?
?4?\?k?r?
?4?E?y?
?456789:;<=
?5?:?R?Y?u?
?5?D?I?S?
?6?_?o?}?
?7???F?M?S?
?7?L?Q?Y?}?
?8?<?@?D?H?P?T?X?l?t?x?|?
?8?n?
?8?N?z?
?8?V?
?9???D?d?t?z?
?A?^?
?B?e?n?}?
?B?I?P?j?
?B?T?c?o?u?
?B?Y?n?s?{?
?F?X?f?r?
?G?Q?\?i?p?w?~?
?H?e?l?~?
?h?o?t?|?
?J?Q?X?_?
?L?e?s?
?l?w?|?
?P?U?]?
?Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::RuntimeClassInitialize
?X?b?g?
?Z?b?g?o?
?Z?i?n?x?
@.didat
@.reloc
@;G(v&
@9D$(
@9D$,
@d;A(t
[%hs(%hs)]
[%hs]
[\yb?
[CV:%2]
[QVh$
\$ t)
\$ WVP
\$(9T$8
\$09\$4vw
\$4Pj
\$DPj$hp>
\$DPV
\/k#Y
\\?\S:\Deployment\DeliveryOptimization\Logs
\\?\T:\Windows\System32\Logfiles\WMI\RtBackup\StoreOperational.etl
]Df35
^Wh D
^Wh$E
^Wh,#
^Wh@j
^Wh|l
^Whd*
^WhH{
^WhHn
_^[Y]
__CxxFrameHandler3
__dllonexit
__tag
__TlgCV__
_amsg_exit
_AppendToDataBuffer failed
_AreAllDownloadsComplete
_availabilities->GetView(ppValue)
_BuildBeneficiaryArrayJSON
_BuildBeneficiaryJSON
_BuildGoldenBeneficiaryArrayJSON
_BuildGoldenBeneficiaryJSON
_callnewh
_CheckOptionalPackageIsValid
_ConstructRequestBody
_contentIds->GetView(value)
_ConvertAppInstallState
_ConvertStoreQueueState
_CreateConnectionAndSendRequest(pszServerName, pszUrl, fUseSecure, fUsePut ? L"PUT" : L"POST", _GetStreamSize(pUploadDataStream), port, 0, fUseAuthentication)
_DownloadData()
_errno
_except_handler4_common
_extendedJsonData.Set(value)
_FilterProductsJson
_fInitialized
_ftol2
_ftol2_sse
_GetProxyInfoForUrl(pszServerName, pszUrl, fUseSecure, &pszProxyList, &pszProxyByPass, &dwAccessType)
_h!\B
_hCancelInternal
_hRequest
_hRequest == 0
_hRequest == hRequest
_images->GetView(ppValue)
_initterm
_IsNetworkMetered
_items->GetView(value)
_itow_s
_keyIds->GetView(value)
_keywords->GetView(ppValue)
_licenseLostEvent.Add(pHandler, pToken)
_licenseLostEvent.Remove(token)
_lock
_mapView.CopyTo(ppValue)
_modalManager != nullptr
_name.Set(name)
_name.Set(value)
_onexit
_ParseGetProductsByKinds
_ParseLicenseInstance( spLicenseInstance, isActive, isTrial, isTrialOwnedByThisUser, trialUniqueId.GetAddressOf(), isDiscLicense, expirationDate, trialTimeRemaining, package)
_pConnection == nullptr
_pPackage.CopyTo(ppPackage)
_pPackage->get_Id(packageId.GetAddressOf())
_pPackageLicense.CopyTo(ppValue)
_productId.CopyTo(value)
_productStoreId.Set(productStoreId)
_pszStringData == nullptr
_purchaseStatus == ProductPurchaseStatus_NotPurchased
_purecall
_ReceiveResponse failed
_request.CopyTo(json)
_response.CopyTo(json)
_response.Set(json)
_s/Z{I<
_SendJsonToURLWithHttpClientForStringResponse
_set_errno
_SetProxyForCurrentRequest(pszCurrProxy, pszProxyBypass, dwAccessType)
_ShouldFilterByRelationship
_skus->GetView(ppValue)
_snwprintf_s
_spPreviewImage.CopyTo(ppValue)
_spStoreContextServer.As(&result)
_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForProducts, _spCV, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
_transactionId.IsValid()
_unlock
_videos->GetView(ppValue)
_vsnprintf
_vsnwprintf
_WaitForLastAsyncCompletion failed
_wcsdup
_wcsicmp
_wcstoi64
_wcstoui64
_wcsupr
_WinStoreSDK_Receipt_Cache
_wtof
_wtoi
_wtol
_XcptFilter
`.data
`/ZQl
`0^0\
{"status": "aborted"}
{268761a2-03f3-40df-8a8b-c3db24145b6b}
{client}
{d6d5a677-0872-4ab0-9442-bb792fce85c5}
{featureName}
{idType}
{installedPublisherId}
{lang}
{languages}
{market}
{marketCode}
{parentProductId}
{platformDependencyNameParam}
{productId}
{receiptType}
{requestTime}
|$<PQ
|$0PV
|$49L$4
|$4Pj#h8
|$8PW
|$lPj
} QVh
~'$)p|
~/ZxqL
+>+b+
+010<0A0F0b0o0
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<,<0<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<x<|<
< <$<(<,<8<@<D<H<L<d<h<x<|<
< <$<,<4<8<T<X<`<d<h<p<x<
< <$<4<8<@<H<L<`<d<h<x<|<
< <$<8<@<D<X<\<h<l<p<
< <%</<
< <.<\<r<
< <.<\<r<f=
< <?<^<h<m<v<
< <K<X<_<q<|<
<!<&<-<3<C<a<f<m<s<
<!<'<B<G<L<a<r<
<!<6<G<X<i<z<
<!<p<z<
<!=.=8=
<!=T=~=
<"<,<O<
<"<,<t<z<
<"<2<B<R<b<
<"<c<s<
<"<W<
<"=)=3=u=
<"=2=@=n=
<"=3=8=>=X=
<#<*<1<8<><R=
<#<-<^<c<h<o<y<
<#<3<Q<V<]<c<s<
<#<4<R<e<
<#<7<D<J<Q<b<g<
<#<Z<
<#=U=
<$<(<@<X<p<t<x<|<
<$<)<4<;<a<
<$<+<2<9<@<G<e<x<
<$<-<@<f<o<
<$<0<<<H<
<$<1<8<O<\<i<o<
<$<9<C<M<Z<t<~<
<$<9<n<|<
<$<R<h<
<$<Z<n<
<$=`=l=
<$=3=8=T=i=n=v=
<%<*<L<Q<l<q<y<
<%<9<F<N=V=]=e=|=
<%<A<c<
<%<i<y<~<
<&<0<5<`<o<
<&<j<
<&<R<
<&=8=F=
<&=8=F=R=
<&=G=x=
<&=J=u=~=
<(<,<0<D<H<L<T<X<d<l<t<x<|<
<(<2<7<U<Z<d<
<(<6<d<z<
<(<d<~<
<(=,=0=
<(=8=F=t=
<)<0<6<I<R<_<f<}<
<)<0<7<><D<
<)<1<;<@<U<
<)=8===G=
<)=k=r=
<*</<u<z<
<*<?<
<*<4<9<Z<h<v<
<*<B<o<|<
<,<0<@<D<P<X<`<l<p<x<|<
<,<0<4<8<<<P<T<X<\<`<h<p<x<
<,<0<P<T<X<`<d<p<t<x<
<,<2<S<X<}<
<,<9<F<
<,<B<r<
<,<s<
<,=~=
<,=1=9=
<,=5=f=x=
<,=B=n=~=
<,=M=i=
<.<;<O<_<o<
<.<3<;<
<.<3<;<R<i<
<.<U<b<i<p<
<.=I=N=V=
</<?<O<_<o<{<
</<E<
</=4=S=X=`=
</=8=
</=s={=
<:<A<F<N<
<:='>h>
<;<@<e<j<r<
<;<[<`<j<
<;=A=L=Q=V=r=
<??YzU
<?=W=\=d=|=
<@<I<
<@<Z<k<
<+=0=N=W=
<'<,<6<]<
<'</<4<U<
<'<\<
<'<_<
<'<-<2<j<o<
<'<2<7<B<G<O<v<{<
<'<6<[<j<t<y<
<'<7<P<o<y<~<
<=<D<K<
<'=6=;=C=
<>=E=W=
<>=G=W=\=x=
<0<:<T<a<h<o<
<0<?<Q<q<
<0<5<?<_<z<
<0<F<
<0=4=8=<=d=h=p=t=x=|=
<0=6=L=S=]=b=
<0A0K0u0~0
<0E0v0
<1<<<m<v<
<1<o<t<~<
<1=Z=z=
<2<~<
<2<B<P<~<
<2=>=e=j=t=
<2=k=
<3"$o
<3<G<Y<k<~<
<3<R<W<
<3=P=
<5<A<F<P<b<g<
<5<U<o<~<
<6<R<a<
<6=]=g=
<6=>=H=M=
<7<><E<G=m=t={=
<7<><Q<V<n<u<
<7<A<F<
<7=D=Q=W=j=}=
<8<G<Q<V<
<8<j<q<
<b<k<p<
<B<t<{<
<C<Z<_<g<
<D<Q<[<`<s<
<D=_=d=n=
<D=I=W=`=m=|=
<E<P<Y<
<H<R<W<q<z<
<i=p=r>y>
<I>`>
<J<W<^<d<w<
<j=t=y=
<k=p=
<L<d<s<x<
<l<u<
<L=~=
<N<m<}<
<N<U<\<c<
<N=Z=_>
<o=v=
<P<U<Z<{<
<SVWj
<T<a<h<o<
<T<Y<l<
<T=h=
<T=j=
<t=y=
<TQ$`
<U<m<t<
<'V{_
<v=|=
<V=h=v=
<X<x<
= =$=(=,=<=@=P=T=X=h=p=t=
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=<=D=H=L=P=`=d=l=p=
= =:=w=~=
= =>=Y=j=y=
= =0=@=P=`=p=
= >/>4><>
= >B>a>
= >G>
=!=&=-=3=C=a=f=m=s=
=!=&=0=d=s=}=
=!=&=0=t=
=!=-=5=D=e=n=z=
=!=b=x=
=!>(>/>w>
=!>'>,>6>
=!>'>,>6>o>
="=:=D=I=a=
="=2=B=X=
="=7===B=I=`=K?
="=I=V=]=c=v=
=#=*=1=8=?=F=X=w=~=
=#=3=Q=V=]=c=s=
=#=5=C=S=c=x=
=#=8=S=X=
=#=B=`=
=#=B=R={=
=$=(=,=0=4=8=<=@=D=H=L=P=T=X=`=d=h=p=t=x=|=
=$=)=0>n>
=$=,=0=8=<=P=T=t=x=|=
=$=0=C=H=P=n=
=$=C=_=
=$=R=_=u=
=$>.>
=$>:>
=$>A>L>
=%=*=E=J=R=
=%=4=\=k=p=z=
=&=`=i=
=&=<=R=g=r=w=|=
=&=o=
=&>8>F>R>
=(=,=0=@=H=L=`=d=|=
=(=/=E=L=R=
=(=0=4=L=T=X=\=d=
=(=a=k=v=
=(=I=Q=[=`=u=
=(>1>H>y>
=(>5>?>l>v>{>
=)=@=^=<>D>
=)=^=e=j=r=
=)=<=A=K=
=)===O=^=d=k=~=
=)=>=C=M=~=
=)=0=7=I=S=^=e=
=)=0=7=I=T=[=b=w=d>
=)=1=;=@=U=~=
=)=4=;=p=
=)>@>p>
=)>\>
=*>/>C>J>O>T>a>
=,=\=t=
=,=0=X=\=`=d=h=p=x=|=
=,=4=8=<=L=P=T=d=l=p=
=,>2>Q>[>`>
=,>5>f>x>
=.=:=F=J=Q=U=Z=_=e=i=o=s=y=
=.=2=9===B=G=M=Q=V=[=`=e=
=.=3===}=
=.=8===o=
=/===k=
=/=R=a=f=p=
=/>;>K>O>V>Z>`>f>l>p>u>z>
=/>{>
=/>4>>>z>
=:=?=w=
=:=A=H=c=x=
=:=P=|=
=;=\=c=j=
=;=D=
=?=|=
=?=U=e={=
=@=k={=
=@=V=
=@>E>J>Q>[>o>}>
=\>e>
=\>j>q>{>
=+=o=
=<=I=z=
=<>P>U>_>
='=,=6=
='=<=J=P=u=
='=1=6=P=`=q=
=-=X=e=l=~=
=>=E=J=R=y=
=>=F=T=[=x=
=>=N=
=>>M>_>o>
='>1>6>`>o>
='>l>
=0=`=z=
=0=5=P=U=]=
=0=W=
=1=L=Y=
=1>6>B>M>Z>i>u>
=1>6>V>[>{>
=1>E>L>Q>Y>
=1>O>y>
=2=:=L=o=
=2=8=
=2=U=c=z=
=2>q>
=3=;=B=I=O=f=l=~=
=3=E=
=3>B>G>Q>}>
=4>A>N>U>\>c>j>q>x>
=4>E>^>|>
=5=A=I=V=f=p=}=
=6=>=W=c=h=r=
=6=C=J=P=j=s=|=
=6=E=O=T=w=
=6>X>
=7=<=A=u=
=7=>=_=d=i=
=7=>=E=L=b=
=7=D=K=Q=d=m=z=
=8=c=h=
=8>?>D>L>
=8>=>K>a>
=9=>=l=
=9=B=Q=[=`=
=a>f>
=AWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct HSTRING__ *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct HSTRING__ *>,0>::DoWorkStub
=C=J=
=C=L=W=
=c>h>
=D=w=
=F=X=f=r=
=F>V>d>
=H=j=v=
=H>`>n>x>}>
=I>^>l>
=K=a=
=K>Z>d>i>
=l=u=
=l>u>
=N=p=
=N>v>
=O=k=r=y=
=o>v>
=Q=X=]=g=
=q>v>
=s=z=
=S>]>b>
=V=[=~=
=W=b=~=
=W>^>d>k>
=Y=`=
> ?,?F?b?l?
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >$>,>4>8>L>P>X>\>
> >$>4><>@>T>\>`>t>x>|>
> >$>4>8>@>D>H>L>P>\>d>h>l>p>
> >(>,>@>D>T>\>`>t>|>
> >(>4>8>@>D>H>L>P>h>l>t>x>|>
> >'>S>[>b>h>
> >T>
>!?0?5?=?
>!>&>->3>C>a>f>m>s>
>!>(>6>
>!>/>]>s>
>!>1>A>Q>a>q>
>"?'?C?H?V?h?m?u?
>">(>5><>C>J>Q>X>_>
>">,>1>
>">;>G>L>V>
>">2>B>R>a>g>
>">W>
>#>(>@>I>|>
>#>(>_>}>
>#>(>G>
>#>2>8>M>
>#>3>Q>V>]>c>s>
>#>6>W>
>#>9>H>c>h>p>
>#>F>T>[>h>m>u>
>#>y>
>$>(>8><>L>P>X>\>p>x>|>
>$>.>
>$>.>8>>>K>P>s>x>
>$>.>A>L>r>
>$>B>X>]>k>}>
>%?3?D?J?V?
>%?Z?y?
>%>:>
>%>V>h>v>
>&?E?q?z?
>&>@>I>R>[>p>y>
>&>[>a>
>&>|>
>&>1><>]>b>l>
>&>Y>p>
>(?K?W?
>(>@>[>u>z>
>(>->
>(>->2>L>
>(>0>4><>@>T>\>`>x>|>
>(>6>
>(>N>
>(>V>l>
>)?.?I?N?V?
>*>/>7>]>b>|>
>*>7>=>D>^>j>p>w>
>,?1?6?G?
>,?5?f?x?
>,?7?S?\?
>,>>>k>
>,>0>D>H>L>P>d>l>x>|>
>,>2>>>O>\>f>w>}>
>,>5>F>M>
>.?3?=?
>.>5>
>.>A>U>
>.>D>
>.>W>]>
>/?=?I?
>/>=>k>
>:>?>I>p>z>
>:>d>
>'?.?3?:?I?O?X?_?f?m?
>?>R>
>?>u>
>'?1?6?\?k?
>-?2?<?[?y?
>-?7?L?
>@>}>
>@>O>T>^>
>[?d?s?
>[>a>l>q>v>
>[>b>i>p>
>\?t?~?
>\>c>j>q>x>
>`>e>
><?A?d?i?
><>[>v>
><>E>i>s>
>=>N>
>=>p>
>=>Z>_>i>
>'>,>K>c>t>
>->^>h>m>r>
>>>K>
>>>N>\>
>->3>H>`>
>'>5>o>}>
>0?9?
>0?O?Z?a?h?
>0>4>8><>@>H>L>T>X>\>l>p>t>x>
>0>5>M>T>^>
>1?>?F?S?X?`?
>1><>C>J>v>~>
>2>?>O>u>
>2>L>s>|>
>3>O>Y>s>x>
>4?R?a?k?p?
>4>>>F>R>W>\>c>m>
>4>E>
>5>N>]>g>l>
>6>H>T>`>
>6>H>V>b>
>7?>?C?K?r?y?~?
>7?>?C?K?u?z?
>7?M?b?g?l?
>9>>>C>Z>h>t>
>A?I?N?S?{?
>A>n>
>B?j?s?
>B>H>
>B>I>S>X>w>
>b>s>x>~>
>C>p>
>d?k?r?y?
>E?b?
>E?T?e?|?
>e-f)2
>F?e?n?
>F?M?
>G>k>
>G>L>Q>~>
>H>W>h>
>http://www.microsoft.com/pki/certs/MicCodSigPCA_2010-07-06.crt0
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>I?N?w?|?
>j>o>t>
>K?y?
>L?U?
>L>Q>[>
>NGdx
>O?V?[?z?
>O>e>j>t>
>O>V>]>s>
>O>X>c>
>P>p>
>P>Z>
>Q>_>k>r>|>
>S?s?}?
>S?Z?
>Su^vL
>T?h?
>u>}>
>W>\>m>
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0004080<0@0D0H0L0P0T0X0\0`0d0l0p0t0x0|0
0 0%0T0c0h0r0
0 0&0,02060<0B0H0N0
0 0(00080@0H0P0X0`0h0p0x0
0 0}0
0 1+10151B1
0 111;1
0 1b1v1
0!0&0.0G0
0!0&0D0Z0
0!0)0g0n0s0{0
0!0?0o0
0!010L0X0]0g0y0~0
0!0N0S0k0
0!2)2.232[2
0"0*0_0
0"0'0,030=0O0x0
0"0'0C0R0W0_0
0"010P0Z0_0u0
0"020B0R0b0r0
0"0j0
0"1)1.151D1J1S1Z1a1h1z1
0#0-020J0Z0m0
0#030Q0q0v0}0
0#030Q0V0]0c0s0
0#11181E1x1
0#111G1L1n1{1
0#171>1H1M1
0$0(080@0D0X0\0l0t0x0
0$0)0<0A0N0j0o0w0
0$0,040<0D0L0P0T0X0\0`0d0h0l0p0t0x0|0
0$0,0q0w0|0
0$1u1z1
0%0*000E0L0t0|0
0%0+0H0N0g0n0
0%070=0H0R0j0t0y0
0%0V0h0v0
0%1*121Z1
0&0{0
0&0<0l0
0&020
0&0a0
0&0T0j0
0(0,000@0D0L0T0X0t0x0
0(0,0D0H0P0T0X0\0`0d0t0x0
0(0@0J0T0m0u0z0
0(0-0[0m0
0(0B0P0k0s0|0
0(0C0H0R0y0
0)0:0?0I0_0
0)010;0@0U0
0)080<0B0F0L0R0X0\0b0f0l0s0y0}0
0*0/070d0s0x0
0*0/090[0d0m0y0
0*080=0G0\0h0m0w0
0*1>1
0*1Q1W1x1
0*1U1
0,030>0X0
0,0I0Q0X0_0e0|0
0,0S0`0g0m0
0,171<1A1N1n1u1
0.0`0
0.030=0j0
0.080=0
0.0h0r0}0
0.151
0.151A1
0.1o1}1
0/050V0
'0/0a0{0
0/1E1
0;0F0
0;0h0
0;1K1`1j1u1
0@0c0k0r0y0
0@0n0s0{0
0@1U1`1~1
0[0a0l0q0v0
0\1e1
0^0t0
0^1t1
0+050:0W0h0
0+090D0J0P0W0]0f0
0+0i0
0+111<1A1F1b1o1
0<1E1v1
0=0G0L0
0>1f1
00?0D0L0
000<0D0
00040<0@0P0T0X0\0d0l0p0t0|0
00080<0@0P0X0\0p0t0x0
0-020<0[0`0e0z0
004080D0L0P0X0\0p0x0|0
0'050c0y0
0'070E0s0
0-0N0
0'1,141a1g1l1t1
0-1<1A1I1q1
0'1=1i1y1
01080
01080p0y0
0'151T1r1}1
0-1A1s1}1
0-1x1
020>0I0\0p0{0
02070T0Y0v0{0
02090@0Z0~0
02181E1`1g1r1
021C1H1N1h1
021T1v1{1
03080@0{0
031<1G1
03181=1D1N1
040904B0
040N0
04122e3y3
050:0^0g0}0
-060E0J0T0
060H0V0
061H1V1
061Y1p1
071>1C1K1r1
080e0
090Q0V0`0
090S0
091?1Y1_1y1
091t(P
0A0W0n0
0B0f0
0B0S0a0o0}0
0B0U0Z0d0
0b1l1~1^:u:
0D0]0l0v0{0
0D0T0b0
0E0]0o0|0
0E0J0R0
0e0q0
0E1L1V1
0F0d0n0s0
0f0m0r0
0F1O1U1\1f1}1
0F1X1f1r1~1
0g1l1}1
0G1L1g1l1t1
0H0L0T0X0l0t0x0
0j0p0}0
0J0Q0X0
0m0s0
0N1U1\1c1{1
0O0\0c0i0|0
0P0m0r0|0
0QShp
0SVW3
0T0s0z0
0T0X0\0`0d0p0
0t0y0
0U0m0
0W0y0
0W1^1d1k1
0X0_0d0l0
0X0_0z0
0xABBACAB
0Yh"C
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1,10181<1D1H1P1T1\1`1h1l1t1x1
1 1$1,101D1H1P1T1X1h1p1t1
1 1$141<1@1T1\1`1x1
1 1(1,1<1@1D1H1P1T1X1h1l1p1
1 1(10181@1H1P1X1`1h1l1p1t1x1|1
1 1,10141<1D1H1\1`1p1x1|1
1 141<1@1T1X1d1l1t1|1
1 1B1G1Q1p1x1}1
1!1&1B1O1
1!1&1C1H1M1e1|1
1!1.151;1N1Y1k1r1
1!1\1a1k1
1!1+1q1
1!111
1!111G1Q1V1
1"1)1?1
1"1/1F1P1d1n1}1
1"1?1b1
1"10151?1W1\1f1
1"171I1V1i1n1s1
1"1j1
1"1v1
1"2L2|2
1#1*141>1E1O1Y1_1k1q1}1
1#131Q1V1]1c1s1
1#191@1F1
1#1A1O1W1\1f1
1#1e1|1
1#1f1m1r1
1#1r1
1#202]2j2w2|2
1$1(1,10141<1@1D1L1P1T1X1`1d1h1l1p1t1x1|1
1$1,1q1w1|1
1$1,1x1
1$1.131
1$1.131M1e1r1
1$1M1R1Z1|1
1$2(20282P2
1$2l2u2
1%1W1a1f1
1&1/1;1B1I1P1Z1d1
1&10151c1u1|1
1&12171<1C1M1_1
1&282F2R2
1&2G2h2
1(0&0
1(1-151O1p1u1
1(1C1H1M1b1l1q1
1(252`2r2
1)1.181r1|1
1)13181g1z1
1)191F1Z1j1z1
1)1T1
1)2@2t2
1)222e2s2
1)2A2G2P2U2^2
1*1/141;1B1
1*1<1A1I1i1u1
1*1<1Q1
1*1K1R1
1*1q1w1|1
1*2C2Y2
1*2f2
1,101@1D1T1X1d1h1l1t1x1
1,1j1z1
1,252f2x2
1,2D2N2V2b2g2l2s2}2
1,2W2k2
1.1D1p1
1.1N1[1
1/0-0
1/161n1w1
1/1z1
1/2>2H2M2
1/242O2T2\2
1/2l2
1/Zfj
1:1E1]1{1
1:2f2x2
1:2G2
1;2@2J2
1;2A2L2Q2V2r2
1;2D4
1?1D1I1\1{1
1?1O1]1
1?2D3
1@2M2
1@2Q2[2
1[1`1j1
1[1a1l1q1v1
1[3+4
1]1d1n1s1
1]1p1z1
1_2d2m2}2
1_2f2
1+1<1_1k1p1z1
1+242r2
1+252M2_2i2
1<1`1p1
1<2E2v2
1=1I1Y1]1c1h1m1r1
1=2Q2W2]2j2o2y2
1>1T1
1>3g3
10.0.22621.580
10.0.22621.580 (WinBuild.160101.0800)
10@0c0
100706204017Z
101:1?1
101A1R1c1t1
102;2W2l2q2
102W2
1'1,1Z1d1s1
111:1F1M1T1[1e1o1
11161=1C1S1q1v1}1
11161>1
111G1Q1V1
111L1c1
112b2k2r2
1-131R1Y1`1z1
1'1G1Q1~1
1'1S1
122A2F2N2t2
122c2
122F2K2U2o2
13181B1Z1_1i1
131A1K1P1
141K1U1Z1
141N1}1
141p1
142>2D2T2_2v2
151D1I1Q1y1
161H1V1b1
162H2V2
172<2S2
181b1~1
181G1L1p1u1
191>1F1t1
192A2H2O2U2l2r2
1A1{1
1A1G1L1T1
1A1u1z1
1A2Y2
1B2H2^2e2
1D1h1m1u1
1D2|2
1E1L1S1Z1
1E2J2T2w2
1E2W2
1F1K1S1
1F1X1f1
1G2L2R2i2p2z2
1G2N2S2[2
1G2W2e2
1H1R1]1j1q1x1
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
1I1h1
1J1r1
1K1a1
1K1Q1[1m1w1
1K2_2
1L1U1
1L2v2|2
1L2Z2t2
1M1x1
1N1S1
1n1s1{1
1O2V2`2e2
1P3{3
1Q1]1e1u1}1
1Q2V2
1Q2W2]2m2
1r1|1
1U2Z2d2
1v1{1
1V2m2x2
1y;V}
2 2$2(2,2024282<2@2D2H2L2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2t2x2|2
2 2$242<2@2T2X2|2
2 2%2*2/242\2|2
2 2%2M2
2 2(2D2H2L2P2T2`2d2h2l2|2
2 2,20282<2@2D2H2P2T2h2p2x2
2 2024282P2T2\2`2d2h2l2p2
2 2L2t2
2 2N2
2 383H3N3[3t3
2!2&2B2O2
2!3+303Y3q3
2!373^3k3q3
2"2)2>2x2
2"2.2>2b2h2o2z2
2"21262>2d2
2"2-2B2V2b2n2
2"2'2T2y2~2
2"282D2
2"292j2s2
2"2Z2t2y2
2"3.3j3s3~3
2#2(2/2>2D2M2T2[2b2t2\3e3
2#2-2=2G2Q2c2
2#232Q2V2]2c2s2
2#3-3C3U3
2$2(2,2<2@2P2T2\2d2h2|2
2$2(20282@2D2H2L2P2X2\2`2d2h2p2t2x2|2
2$2,2l2y2
2$262^2x2
2$2b2
2$2N2_2m2{2
2$2q2z2
2%2C2d2
2%2H2O3X3
2%2L2m2
2%2V2h2v2
2&2;2J2_2d2i2
2&222
2&222a2h2o2?3
2&3,3K3a3f3w3
2&383F3
2&383F3R3
2(20242<2@2T2X2`2d2t2|2
2(2-272i2q2v2
2(2-2b2
2(262d2z2
2(3-3Y3^3
2(353B3K3\3b3g3t3
2)2.2:2E2T2Y2a2
2)2.2V2
2)20272>2E2
2)2-24282>2D2J2N2T2X2]2b2h2l2r2v2{2
2*2/2B2O2T2\2z2
2*2U2_2d2z2
2*31363>3h3o3t3|3
2*3X3n3
2,2:2H2f2
2,2;2E2J2_2
2,222U2c2j2w2
2,2Z2p2
2,363
2,3X3n3u3
2.232;2O2_2d2
2.232O2X2
2.3S3b3g3o3
2/2;2
2/2@2M2a2q2
2:3?3n3s3{3
2:3T3e3
2;2B2I2e2m2t2{2
2?3D3N3u3
2?3w3
2@3E3M3
2@3n3
2`2e2j2q2{2
2`3o3v3
2+2:2D2I2
2+292G2i2z2
2+2C2M2X2e2l2s2z2
2<2\2h2
2<2A2Z2i2n2v2
2<3E3v3
2=2C2I2N2]2c2x2
202>2V2h2u2
20220805185040Z
20220805224351.071Z0
20220806185040Z0w0=
20292@2S2
202U2_2d2y2
210930182225Z
211202190519Z
212<2m2v2
21262=2C2S2q2v2}2
212b2k2
21383B3G3a3
213C3`3
2'2?2
2-2<2F2K2
2'202<2C2J2Q2[2e2
220512204706Z
2'22272^2t2
222X2k2r2
223W3r3~3
2-24292@2O2U2^2e2l2s2
2'252`2
230228190519Z0
230511204706Z0t1
230865+4705630
232:2?2G2o2
232:2?2G2z2
232_2o2}2
233?3e3j3r3
242?2f2y2
242\2a2r2
242<2D2H2P2T2h2l2
250706205017Z0~1
254?4J4W4^4e4l4
262H2V2
263H3V3
263I3
263W3
272<2Z2
282S2
283>3a3o3v3
2A2F2
2A2G2L2V2
2A2M2X2
2A2P2n2}2
2A3H3O3V3
2b2s2x2~2
2B3G3_3j3
2B3S3X3^3x3
2b3w3
2C2H2P2v2
2C2R2W2a2
2D2Z2
2D3K3
2D3K3P3Z3
2D3Z3h3
2f2q2
2f3#4x4
2F3}3
2I2T2t2y2
2I2X2
2I2X2b2g2
2I3N3V3|3
2J2`2
2J3X3d3p3
2K2U2Z2
2L2Q2b2
2l3u3
2M2m2
2M3R3Z3
2n2}2
2N3U3\3c3l3
2O3V3`3{3
2P3W3
2Q2x2~2
2R2c2h2n2
2R3W3\3
2s3y3
2U2[2e2{2
2U3e3s3
2V2`2e2
2W2^2c2
2X2_2d2l2
2X2g2
2X2k2~2
2Z2g2n2u2|2
3 3$3(3,3@3T3p3t3x3|3
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(383<3@3P3X3\3
3 3%3>3P3^3v3
3 3(30383@3D3H3X3\3p3t3|3
3 3*3[3
3 3>3a3
3 30343D3L3P3d3h3x3
3 343|3
3 3D3I3S3k3
3 474Q4b4
3!3&3B3O3
3!3&3w3
3!3+3\3
3!313A3d3w3
3!3r3
3!434C4[4}4
3!4'4,444a4g4l4t4
3"3(3:3B3K3R3g3
3"3<3I3P3W3a3
3"333B3a3p3z3
3"343T3^3
3"4)4.454D4J4S4Z4a4h4z4
3"4;4B4N4
3#3(323Q3Y3^3h3
3#3;3
3#3-3_3}3
3#333Q3V3]3c3s3
3#4]4y4
3#4`4
3$3(3,303@3D3L3P3`3d3l3p3
3$3)313q3
3$3,3x3
3$3;3
3$373@3Q3r3y3
3$3L3[3`3h3
3$41484>4Q4\4q4
3%3.3A3f3
3%3d3n3t3
3%434:4D4c4
3%4B4U4m4
3&3+333V3b3q3u3{3
3&323
3&3-343F3e3k3x3
3&353?3D3z3
3&3q3
3&484F4y4
3(3[3i3
3(363d3z3
3(3U3\3a3h3w3}3
3(3X3r3
3)3;3@3J3b3{3
3)3;3[3e3j3
3)303?3^3m3
3)323@3k3u3z3
3)484=4a4f4
3)4V4
3*383f3|3
3*3h3z3
3*3J3O3X3r3w3
3*44494
3*4W4m4r4
3,3@3I3X3`3{3
3,323Q3k3~3
3,333a3v3
3,454f4x4
3.383=3
3.383=3R3
3.4Y4i4w4
3/3S3X3d3i3q3
3/444g4l4
3/4g4
3?3D3I3p3
3?4D4m4r4z4
3?4F4
3@3P3^3
3[4n4
3_3|3
3_4h4
3_4u4D5Z5
3`5r5}5
3+3?3L3`3m3
3+3K3`3j3o3
3+3L3Q3_3t3y3
3+4<4A4J4x4
3+4b4
3+4t4
3<4C4O4
3<4E4v4
3=4D4e4j4t4
3>3K3R3X3k3v3
3>3Q3V3u3
300930183225Z0|1
303:3?3e3
303`3
3034383<3@3`3d3
30383<3@3D3T3\3`3x3
30383<3@3H3L3P3`3d3l3p3x3|3
30464L4S4]4b4
304A4K4
31363=3C3S3r3v3|3
31383>3y3
314L4U4
323<3A3m3
323K3P3Z3
324^4g4
324B4
3-323<3]3g3l3
333:3A3[3
333B3~3
3'383N3f3k3
3'3U3k3
343;3A3H3
343F3n3s3}3
3'444C4H4P4
3'4C4b4
353^3h3m3
354E4J4T4i4
363H3V3b3
373A3F3
374>4D4K4
375>5w6~6
384?4D4L4
394f4
3A3J3T3`3l3
3a3t3
3C3n3x3}3
3D3c3j3q3
3d4i4n4
3d4q4~4
3d4x4
3e3k3
3F3L3o3t3
3F3X3f3r3
3F4K4
3F4X4f4r4
3G3a3l3
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
3I3a3g3|3
3I3g3r3
3I3X3
3J3`3e3o3
3J3Y3w3|3
3J4O4Y4
3K3l3
3L3Q3[3
3L4|4
3m3r3|3
3N3p3y3
3P3Z3q3x3
3Q3|3
3Q3a3o3
3Q3l3u3
3q3z3
3QVh|
3r4|4
3S3X3b3
3SVmn
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4$4(4,4044484<4@4D4L4T4X4l4p4x4|4
4 4$4(4,444<4@4D4H4\4d4h4l4
4 4$484@4D4X4\4l4p4x4|4
4 4&4,42484H4S4`4f4j4p4t4z4
4 4(4,4@4D4L4P4`4h4l4
4 4+4^4e4l4s4
4 4-4<4F4K4
4 5.5<5J5T5Y5
4 5-5?5D5N5w5|5
4 5m5
4!4&4-434C4a4f4m4s4
4!4&4B4O4
4!4)4>4J4i4n4v4
4!4.494R4W4i4r4w4
4!4'4-4\4r4w4
4!4k4|4
4!4M4T4f4k4u4
4!4T4s4
4"4(4-4<4B4W4o4
4"4\4z4
4"4^4
4"4Q4}4
4"5,5>5
4"5,515I5]5o5
4"525@5n5
4"5'515S5f5u5z5
4#4(4.4H4f4
4#4*4C4P4V4\4
4#434Q4V4]4c4s4
4#4-474q4~4
4#4u4
4$4(4<4@4L4T4X4\4l4p4x4|4
4$4,40444D4H4L4\4`4p4t4
4$4,4x4
4$4.4b4
4$494H4M4U4
4$4R4h4
4%4*4W4}4
4%4+4P4W4^4z4
4%464J4Y4_4f4w4
4%4T4
4%5,565;5i5
4%6I6m6|6
4&424a4h4o4?5
4&474V4
4&5<5h5x5
4&555d5
4&595L5
4(4@4K4Q4^4c4{4
4(4>4f4
4(414:4@4E4J4Q4Y4n4
4(464B4
4(464i4
4(4U4Z4d4
4)484B4W4r4
4)484N4n4
4*4B4
4*4s4
4*565F5J5P5U5Z5_5o5{5
4*575>5E5W5a5l5s5
4,414G4V4[4z4
4,555
4.434H4N4S4y4~4
4.53585h5u5
4/4;4b4
4/4;4M4X4k4
4/494N4
4/4E4f4s4z4
4/4G4b4z4
4/5_5
4:4A4F4M4\4b4k4r4y4
4:4S4X4b4w4
4:5B5G5Q5
4;4C4H4R4
4;4F4f4k4u4
4;5s5
4?4N4k4t4
4?5F5P5U5t5
4?5T5
4@]TI
4@4\4i4n4x4
4@4I4q4
4[4h4{4
4[4r4
4\4e4
4\5e5
4]4f4p4v4}4
4]4x4
4^+ D(J-
4+4/464:4?4D4J4N4T4X4]4b4h4l4r4v4|4
4+4O4T4^4v4
4+4S4\4
4+52595s5z5
4<4G4w4
4=4g4l4
4=4J4Q4X4j4u4|4
4=5C5I5c5j5t5y5
4>4F4W4p4|4
4>5g5
404~4
4044484<4D4H4\4d4h4|4
404D4Z4h4
40555?5b5v5{5
414C4f4k4p4w4
424<4A4V4a4t4
42474A4Y4q4
42Zu.
4'4,464O4q4v4
4'4,4Z4i4
4'4.454G4Q4\4c4
4-4=4M4]4m4z4
4-4>4O4
4'404:4C4M4V4`4i4s4
4'41464^4
4-424S4b4g4{4
444e4n4
4'4U4k4
4-545T5c5
454G4L4
4-5C5
464>4
464C4T4e4y4
475@5k5v5
484^4m4
484s4|4
485?5D5L5v5{5
485H5V5
494>4F4
494F4S4Z4`4s4
494H4
495{5
4A4V4
4A4x4
4b5l5~5
4D4I4Q4p4
4D5V5c5
4E4]4d4
4E4Z4`4e4
4es`O
4g5q5|5
4H4O4T4\4
4H5O5U5\5
4I4P4U4]4
4I5P5Z5
4K4[4i4
4KSbe
4l5u5
4M4V4]4
4O4n4
4O4r4x4
4P5w5
4Q4V4a4f4q4v4
4Q5_5
4R4u4
4-RZKD[
4SVWQQ
4T5a5n5u5{5
4U4~4
4u4~4
4V4h4v4
4V5a5f5
4X4k4
4Y5`5g5n5u5|5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5,5054585<5@5D5H5P5T5t5x5|5
5 5$5(5,5054585<5@5D5L5P5T5X5`5h5l5p5
5 5$5(585@5D5\5`5h5l5
5 5$5,54585@5D5X5`5d5x5|5
5 5$50585<5@5P5T5X5h5l5
5 5*5
5 5*5B5M5
5 5'5.5v5
5 6$6(6,60686<6@6P6T6h6p6t6x6
5 6-6T6y6
5 6R6d6~6
5!5&5
5!5&5E5R5
5!5(5/5A5a5k5
5!51555;5@5E5J5Z5f5v5z5
5!6`6o6y6~6
5"5(5,52565<5B5H5L5Q5V5[5`5
5"5'5,535=5O5x5
5"5'5_5
5"5J5Q5X5_5u5
5"5V5\5y5
5"6.6R6W6m6y6
5"626N6
5#5(5-52575G5S5c5g5n5r5w5}5
5#5(5-525Y5_5m5z5
5#5*5/595
5#5;5j5
5#505:5?5U5
5#535Q5V5]5c5s5
5#555q5
5#565c5
5#5c5
5#5q5x5
5#62676?6g6v6{6
5#6S6
5$5(5054585H5L5\5d5h5|5
5$5(585<5D5H5P5X5\5p5t5|5
5$5)5/595C5S5c5i5t5z5
5$5)5;5k5p5x5
5$5,5
5$5,5o5
5$5,5q5w5|5
5$5.5L5d5}5
5$5;5B5z5
5$6.646D6O6f6
5%5,535H5
5%5,535H5|5
5%525i5
5%585>5b5h5m5y5~5
5%5V5h5v5
5%6,666x6
5%6=6O6\6
5&5_5d5n5
5&5+535q5y5~5
5&5+5L5Z5
5&5+5N5d5i5
5&52575A5V5b5g5q5
5&6/646@6I6U6[6d6
5&686F6
5&686k6
5(5C5N5a5f5p5
5(5I5
5(6.6T6
5(6/646<6
5)5B5x5
5)5F5c5
5*62676?6
5*62676A6y6
5,53595
5,54585<5@5T5\5d5l5p5t5x5
5,6d6n6s6
5,6F6
5.5:5B5I5P5V5\5
5.6C6N6~6
5.6Y6h6m6u6
5/5@5O5T5\5q5
5/545Y5o5t5
5/666@6E6^6p6~6
5/6f6
5:5M5
5:5Y5g5|5
5:6@6[6a6
5;5N5S5
5;5Q5l5
5;6J6O6Y6
5;6z6
5?5F5M5c5
5?5w5|5
5?6E6R6m6
5\5t5
5]6B7
5_5d5n5
5_5h5
5`5}5
5+505P5U5]5p5
5<5K5U5Z5s5
5<5X5
5=5R5W5\5c5j5
5>5I5P5]5b5l5
5>6C6M6
5>6C6S6Y6_6f6w6|6
50@0l0
50_0f0m0
50555:5Y5y5
505F5[5m5w5
505M5a5z5
515>5|5
51565M5
52575A5q5{5
52575A5Y5q5
525B5R5b5r5
526>6K6P6Z6{6
535}5
535I5
535Q5c5h5r5
53686I6j6w6
545a5
546C6P6
5'5-5:5A5H5O5V5]5d5
5'5-5@5M5_5i5n5
555G5
555Q5V5
5'565;5C5e5z5
5'5e5t5~5
5'5O5
5'5Q5Z5l5
5-5T5x5
565C5J5Q5W5i5q5}5
565D5I5Q5]5b5m5r5|5
565z5
575<5D5i5n5v5
575D5W5f5
575E5O5T5i5w5
575M5
576>6C6K6x6}6
585?5D5L5
585M5Z5
595e5n5
595G5U5c5q5
595I5m5
595J5W5b5x5
595t5
596P6
5B5L5Q5g5
5B6L6^6
5C6J6Q6X6
5D5J5
5D6Z6a6k6p6
5E6J6j6o6
5F5U5Z5d5
5f6x6
5G5m5{5
5g6r6
5I6Q6j6r6
5K5"6:6D6O6\6c6j6q6
5K5U5
5k6q6
5K6W6j6
5L5R5u5z5
5L6U6
5l6u6
5M5U5`5q5
5N5j5|5
5O5X5x5
5P5k5?6H6v6
5P6X6]6g6
5Q5W5
5Q5X5_5m5z5
5s5x5
5s6~6
5U5k5p5
5W5f5
5W6%797
5X5g5q5v5
5Y5^5f5
5Z6_6d6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,64686<6@6P6T6X6p6t6|6
6 6$6(60686<6P6X6\6p6t6x6
6 6(6,6064686<6L6P6T6h6p6t6x6
6 6(6,64686H6L6T6X6\6l6p6
6 6(60686<6@6L6P6X6\6p6t6
6 6/646>6X6]6|6
6 6/696>6a6p6
6 626J6Q6d6|6
6 6'6.6n6
6 6G6l6
6 7/797>7_7
6!6&6-636C6a6f6m6s6
6!6&6M6T6g6t6
6!6A6F6a6f6n6
6!6V6
6!7u7
6!818J8
6"6)606H6Y6j6v6
6#6(626S6k6t6
6#6*61686N6
6#6+61666>6D6I6Q6W6\6b6j6r6~6
6#6>6E6O6T6s6z6
6#636C6S6c6s6
6#6-6b6q6v6
6#686L6Q6[6x6
6#686r6
6#6A6F6K6c6l6|6
6#71767;7R7t7~7
6$6(6064686<6@6P6T6X6\6d6h6p6t6
6$6.6C6H6R6g6q6v6
6$6/666
6$6@6R6i6
6$666=6^6e6l6s6
6$6O6^6
6$717>7D7H7N7T7Z7`7p7|7
6$7C7J7
6%6Q6g6l6
6%7f7u7z7
6%7R7~7
6&606{6
6&6-646;6M6<7E7
6&7i7
6(6,64686H6L6X6`6d6h6x6|6
6(616\6a6{6
6(666B6
6(6-686T6_6
6(6-6E6U6m6
6(6C6N6a6y6
6(6h6u6
6(6X6
6(7O7Z7
6)6.6U6^6y6~6
6*6/6G6L6T6
6*646W6
6*6c6
6*6Z6
6*bnT
6*Z*~*J(
6,6<6`6u6
6,777<7A7N7n7u7
6.6_6
6.6<6N6`6r6
6.636=6S6
6.757<7H7
6.777C7K7Z7
6:6A6K6a6m6y6
6:6A6R6_6
6;6w6
6;7A7L7Q7V7r7
6?7F7
6@7b7n7s7x7
6@7J7a7h7
6\7i7
6]6l6v6{6
6_7r7
6+6I6v6{6
6+6s6
6>6N6\6
6>7g7
60<0A0X0k0q0{0
60>0O0W0
606N6\6
60L0Q0Y0t0
60Y0p0
626A6b6s6
626r6
627G7R7[7
636C6Q6
636C6V6i6|6
636F6]6b6}6
636G6
646:6[6
646>6U6\6
646A6W6\6
646C6\6k6u6z6
647Q7
656?6D6
6-6;6[6
6-6@6s6
6-626<6e6j6t6
666I6X6]6e6
666O6Y6
666W6\6
6-676L6\6c6m6
667C7P7W7^7e7l7s7z7
667D7N7a7l7
6'6I6g6
6-7_7u7J8j8
6-767Q7
676F6s6
6'7D7a7m7
686G6X6y6
686i6p6
687^7j7
693t%
696C6p6w6|6
697>7F7v7}7
697B7_7d7n7
6A6U6~6
6a7q7
6A7W7
6B7`7h7
6C6P6V6j6p6|6
6D7M7X7
6d7y7
6F6t6
6F6X6f6r6
6G6N6S6Z6i6o6x6
6G7\7n7
6H6S6
6H7X7f7
6I7r7
6I7X7z7
6J6W6d6j6}6
6K7P7Z7
6K7W7j7
6L6S6Z6a6l6q6y6
6L7U7
6N6s6
6n7u7z7
6O7e748J8
6P6U6f6
6p6u6z6
6Q6[6b6p6
6Q6^6h6
6Q7k8
6T6e6k6q6z6
6u6~6
6u7Y9
6W6d6k6}6
6X6_6d6l6
6X7w7
7 7$7(7,7074787<7@7D7H7L7P7T7\7`7d7h7p7t7x7|7
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7x7|7
7 7$7,707D7H7X7`7d7|7
7 7$74787D7H7L7\7`7d7t7|7
7 7$787<7@7P7T7d7h7p7t7
7 7(7,707@7H7L7`7d7t7x7
7 7(7,7074787H7P7T7l7t7x7|7
7 7(7\7a7i7
7 7,7j7
7 7/7E7J7R7
7 737W7o7
7 74787<7L7P7`7d7h7x7|7
7 7'7:7V7a7n7u7|7
7 7f7
7 7X7k7x7
7 8]8c8j8t8
7!7&7-737C7a7f7m7s7
7!7(7/7E7v7}7
7!7,7=7M7X7
7!7<7E7
7!767K7`7i7
7"7)7;7
7"7)707B7L7X7_7f7
7"7*7o7
7"7<7U7b7y7
7"7'7
7#7)7H7P7`7i7
7#7*7=7
7#7-7V7\7l7
7$7)7;7H7N7S7Y7^7p7
7$7)7C7V7w7
7$7:7c7
7$7+72797@7
7$7+72797K7V7]7d7k7
7$747D7T7d7t7
7$7k7
7$838=8B8h8w8
7$878_8h8
7%7G7Z7y7
7%7T7c7h7r7
7%7z7
7%8,838:8
7&757F7
7&787=7E7[7j7
7&787Y7`7g7n7u7|7
7&797T7_7r7
7&7O7_7m7
7&8+808k8u8z8
7&808r8}8
7&8R8[8l8q8v8}8
7(7,7@7H7L7T7X7p7t7|7
7(7,707@7H7L7d7l7t7x7|7
7(8_8
7)7.767y7
7)7>7l7q7v7
7)747A7H7O7V7h7s7z7
7)888=8G8
7*7/7B7O7T7\7z7
7*7H7k7w7
7*898>8F8
7*8Q8m8
7,737:7R7g7r7
7,757>7[7|7
7,858f8x8
7,8D8N8V8b8g8l8s8}8
7.7?7]7v7
7.7a7
7.7S7
7/8t8
7/8x8
7;7H7O7U7h7q7~7
7;7L7r7
7;7P7Z7_7
7;8k8
7;8U8
7?7N7
7?8H8
7@7^7c7m7
7@7}7
7\7c7j7
7\7g7l7q7~7
7\8e8
7\8m8
7`7o7y7~7
7+7G7p7
7+7T7
7+9[9@:k:
7<7A7K7
7<7b7
7<7c7
7<7C7O7]7
7<8G8L8Q8[8{8
7<8K8^8m8
7=7m7{7
7=8G8L8
70>0D0K0
70797H7e7
708>8H8R8
70858X8k8p8
70C0S0W0^0b0h0n0t0x0}0
71777
717I7}7
718N8W8r8|8
72777A7
727B7]7d7
728;8F8r8
72878<8m8
737D7
747:7Q7V7`7
747g7w7
748C8]8
757;7^7d7
767[7`7e7l7v7
767E7X7
767H7V7b7
767M7_7|7
767P7
7'7,787=7E7m7x7
7'7.757<7N7n7x7
7-71777;7A7H7N7R7X7\7b7h7n7r7x7|7
7-72777q7|7
777C7X7v7
777h7r7
778?8D8L8
778?8D8O8p8{8
7'787Y7a7k7p7
778U8i8
7'7j7
787G7Q7V7
787h7
787W7v7
788i8
797P7V7]7v7
798C8H8y8
798P8
7A7S7
7A7W7
7A8_8o8
7B8k8q8
7B8S8X8^8x8
7C7s7
7D7c7j7q7
7E7J7R7s7~7
7E7L7[7h7
7E8g8
7F7S7
7F7X7f7r7
7F8X8f8r8~8
7G8o8t8~8!9E9J9T9l9
7H8u8{8
7I7N7n7s7
7K7P7U7r7
7k8~8
7L7U7`7
7m7z7
7O7V7`7e7~7
7O8T8^8
7Q7\7
7Q7\7c7m7
7Q7`7e7o7
7Q7~7
7V7]7b7u7
7Y7p7
7Z>@B1
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8(8,80888@8D8L8P8d8l8p8
8 8(8,8H8L8T8X8\8`8h8l8
8 8\9e9
8 8+8F8P8U8l8
8 84888<8@8H8P8x8|8
8 8f8
8 8L8g8
8 9%9/9
8 9+919E9P9V9j9u9{9
8!8&8-838C8a8f8m8s8
8!8(8/868=8D8K8V8
8!8(8`8i8
8!8.838=8j8y8~8
8!8'8-8=8H8U8[8_8e8i8o8u8{8
8!8n8
8!9.9
8!9'9,949h9o9t9|9
8"8(8.848:8?8F8L8R8X8^8c8j8p8v8|8
8"8,8?8J8
8"8-8q8
8"93989>9X9v9
8"9'9/9N9Y9
8"9c9r9w9
8"9H9Y9
8"9V9\9b9g9v9|9
8#8)8/85898?8C8I8O8U8Y8_8c8i8o8u8y8
8#8)8<8H8X8^8k8
8#8.8P8W8]8
8#818A8I8
8#8-8E8h8m8w8
8#8C8
8#8c8p8}8
8#8I8U8e8
8#8m8
8#9,979
8$8(8,8<8@8H8P8T8l8p8t8x8
8$8(8,80888<8@8D8L8P8T8X8\8`8d8h8l8p8t8x8|8
8$8(8084888<8@8D8X8`8d8l8p8
8$8)8N8U8m8t8
8$8,8084888H8P8T8h8l8|8
8$828`8v8
8$9)939w9
8$919|9
8$9l9u9
8$i9cw
8%8)8.83888=8
8%8+81858;8A8G8M8
8%8=8J8a8p8
8%868;8@8G8Q8l8
8%878<8F8
8%8U8
8&8<8Z8g8n8
8&8-878M8_8
8&9R9\9a9y9
8(8@8E8O8b8q8
8(8\8k8u8z8
8(80868C8H8R8
8(868B8t8{8
8(868d8~8
8(8-858L8~8
8(8c8l8w8
8(8I8Q8[8`8u8
8(8L8[8o8
8)888]8l8
8)8H8M8W8m8
8*919;9@9g9n9
8*9E9Q9c9
8,8:8d8r8
8.8E8R8`8e8o8
8.8j8
8.8l8s8}8
8/8?8M8{8
8/8B8d8m8
8/8P8
8:8P8
8:9O9Z9
8?8H8b8
8\$ u
8\9t9
8^)uY
8_9d9n9
8+909;9@9K9P9[9`9k9p9x9
8'<4<;<A<T<_<z<
8<8F8v8|8
8<8R8y8
8<9E9
8=9R9h9m9r9
8>8M8l8
8>8S8q8
8>9g9
80?0E0L0
80848<8D8H8`8h8p8x8
80858:8O8Y8^8s8
80898C8Q8w8
80979
81:W:^:e:
818X8a8n8z8
828z8
829v9
848>8F8R8W8\8c8m8
84888<8@8D8L8T8X8l8p8t8
849H9o9y9~9
849J9Q9[9`9
858{8
858=8B8L8n8s8}8
868<8T8j8o8
868H8V8b8
868j8
869f9
869q9y9~9
878C8
879D9Q9W9j9}9
8'8/8<8B8I8
8'8/898G8S8a8i8o8
8-8|8
8-8>8D8I8c8
8'80898N8c8r8z8
8-848G8T8k;
888@8D8X8\8`8p8x8|8
888G8X8y8
8'8i8
8'8T8[8`8g8v8|8
8-8U8u8z8
8'91969
8-92979=9G9b9g9l9r9|9
899H9O9
8A8e8j8t8
8A8W8
8A8W8x8
8A9N9U9\9c9j9q9w9
8a9q9
8b9m9
8c8h8~8
8c8m8r8
8D$(u
8D$;Q
8D$8u
8D8b8o8u8
8d8i8s8
8D8m8
8D8n8u8
8D9Y9^9k9
8E9M9T9\9s9
8F(u:
8F8M8R8Z8
8G8a8n8u8|8
8G9d9m9
8J8U8_8d8
8j9q9v9
8L8W8
8L9U9
8l9u9
8L9U9
8O8|8
8Q9v9
8R8W8k8
8T$ u
8T$(u
8T$`u
8T$0u
8T$Pu
8V8]8b8u8
8V9h9v9
8y8~8
8Y8p8
8Y9p9
9 :$:(:4:8:<:L:P:T:d:l:p:
9 :%:/:e:
9 :R:{:
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9 9$9(9@9D9L9P9T9X9\9h9l9p9|9
9 9$94989@9H9L9`9h9l9
9 9$989@9D9X9\9`9p9t9x9
9 9&9*90949:9A9E9K9Q9U9[9b9h9l9r9v9|9
9 9^9e9l9u9
9 9'9f9x9
9 9f9
9 9G9V9f9
9 9U9g9q9
9!:n:
9!:z:
9!9(929N9
9!9.959B9I9P9e9
9!9/9]9s9
9!949G9N9d9k9q9
9!979A9F9
9!9P9_9
9"9/969=9D9W9s9~9
9"9]9l9q9y9
9"989A9T9Y9j9s9
9#:::@:n:6;
9#:3:U:Y:^:d:j:p:v:|:
9#9)9/95999?9C9I9O9U9Y9_9c9i9o9u9y9
9#9:9I9X9
9#9;9@9J9
9#9+9Y9h9m9
9#9-929I9[9{9
9$:/:c:
9$:|:Z;d;{;
9$:5:::
9$9(9,9<9@9P9T9X9h9p9t9
9$9)9V9e9
9$9+9Y9`9
9$9E9z9
9%:K:f:p:u:
9%9*9^9h9o9
9%909=9Q9a9n9
9%9d9n9t9
9&9+9O9V9w9|9
9&9<9I9]9b9l9
9&939:9A9H9O9V9]9d9v9
9&9A9
9&9O9_9m9
9&9T9j9
9&9x9
9(:/:4:<:
9(:-:H:Y:^:j:u:
9(9,90949D9H9\9d9
9(9.949A9F9P9
9(9^95:M:W:b:o:v:}:
9(90949H9L9T9X9h9p9t9
9(92979h9
9(969B9
9(969l9u9
9(9R9
9(9u9
9)9/9H9W9\9f9{9
9)9:9
9)9o9y9~9
9*9/999Q9_9m9w9|9
9,:1:i:n:
9,9<9I9W9f9
9,979>9E9Z9
9,9G9\9q9v9}9
9,9y9
9.:5:<:C:J:Q:X:d:
9.9F9
9.u1h
9/:>:C:M:
9/9=9k9
9/9>9E9
9/969n9w9
9/9k9q9|9
9':,:O:T:
9-:7:<:
9:9A9F9P9f9k9s9
9:9Q9a9s9x9}9
9;9G9U9Z9d9|9
9?:H:S:j:
9?9M9{9
9@:[:
9@9I9
9\$(t
9\$0u/
9\$pu&Q
9\$Pw&Q
9\:e:
9^,t&h
9^0u;
9_ t'
9_ t%
9_ tv
9_$t%
9_0t'
9_8u+QVh
9{ t'
9~ t(
9+:^:
9+:n:
9+9<9l9
9+9r9
9+9W9]9d9l9
9<:E:
9<9`9x9
9=9F9d9@:P:^:
9>u"QPhH!
9>u3WP
90:5:?:T:`:e:o:
90:9:
909=9D9W9
90949<9@9l9p9t9x9|9
90989C9H9m9u9
909L9T9g9r9w9
909N9X9]9
909X9m9
919;9@9
919<9Q9X9v9
92:;:R:
929:9B9J9R9u9z9
929J9O9q9v9
93uHWV
949A9K9P9}9
949B9Q9}9
95:s:
959D9N9S9{9
96:W:
97:Q:b:
979Q9\9
989|9
99:?:e:
99:t:y:
9-9@9_9n9
9'9_9f9k9s9
9-929<9
9'939<9C9L9S9]9s9
999H9|9
9'9A9G9e9
9'9f9k9s9
9A:F:P:
9A9H9O9
9b:l:~:
9B9{9
9b9s9x9~9
9C:L:f:m:w:|:
9C9]9n9
9D$ t
9D$Lv6
9D:d:
9D:J:T:e:o:u:{:
9d:l:x:}:
9D9I9S9
9D9I9S9}9
9F:b:
9F:M:R:\:r:
9F:X:f:r:
9F9v9
9F9X9f9
9g9z9
9H9L9P9T9X9`9d9l9p9|9
9I:R:a:f:n:
9J9^9w9
9J9d9u9
9K9U9Z9|9
9l:u:
9L9Q9[9
9M9X9h9l9q9v9{9
9N?c?t?
9o:t;
9O2sI
9O9q9
9P:z;
9R:_:l:s:z:
9r9w9
9T9^9d9t9
9U9d9
9V$v)
9V:h:v:
9W:e:l:s:}:
9w4u$QSh
9w4u`
9w4u1VS
9wHu$QSh
9wHu`
9wHu1VS
9wlu&h
9X$vC
A ;B0t
A0;B@t
AADAuthority
AADResource
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
aborted
Accept:application/json
Account Ticket succesfully extracted. Ticket providerType: %ws web: %ws 
AcquiredDate
AcquireSRWLockExclusive
AcquireSRWLockShared
actionFilter
actionFilters
Actions
ActivateInstance(RuntimeClassAppInstallManager.Get(), &_appInstallManager)
activatibleClassId
Added header %s
AddFileToCab
Adding calling package = %s for productId = %s
Adding optional package = %s
Add-On Product Infos (CV = %hs):
AddOnKeyword
addOnParent
AllocateAndInitializeSid
AllowImpersonation
AlreadyPurchased
AlternateIds
AlwaysPromptBeforePurchase
AnonymousRequest
ApiInvoked
api-ms-win-appmodel-runtime-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-com-l1-1-1.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-2.dll
api-ms-win-core-file-l1-2-4.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-heap-obsolete-l1-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-localization-l2-1-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-1.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-eventing-legacy-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-base-l1-2-0.dll
api-ms-win-security-capability-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
api-ms-win-shcore-stream-winrt-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
ApiSetQueryApiSetPresence
AppDownloadLimit
Application
application/json
ApplicationManagement
AppServiceName
AppServiceResponseStatus
args->SetMemInfo(experienceToken, modalManager)
array
as.,k{n?,
Assert (%s): %s
AsyncActionCompletedHandler
AsyncOperationCompletedHandler`1
AsyncOperationCompletedHandler`1<Boolean>
AsyncOperationCompletedHandler`1<String>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
AsyncOperationCompletedHandler`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
AsyncOperationCompletedHandler`1<Windows.UI.Popups.IUICommand>
AsyncOperationProgressHandler`2
AsyncOperationProgressHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
AsyncOperationWithProgressCompletedHandler`2
AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Attached event handler for item %s
Attempting to set the install order to: %hs
authority
Authorization
authTicket.IsValid()
AuthToken
AuthType
Availabilities
AvailabilityId
AW+Gd
B2G2O2q2v2
Bearer 
BeginOperation
beneficiaries
beneficiary
beneficiaryArray
BigId
BigIds
BodyBufferMaxSize
BodyForcePrompt
BodyPromptSettings
BodyTemplate
buffer != nullptr
Build Name
BuildStoreInAppInfo
BuildStoreInAppSkuInfo
BundledSkus
BW^=oE1p
C:\data\systemdata\etw\StoreOperational.etl
C;\$ 
C0O0t0y0
C0PVQ
C3R/Z
C8PVQ
CABINET
Cabinet.dll
Cache-Control
CallContext:[%hs] 
campaignId
CampaignId
Canceling redirect for 0x%08x
CapabilityCheck
Caption
Catalog failure looking for BigCatId.
CatalogServiceProxyV6::AddOnsIterator::GetNext
CatalogServiceProxyV6::AddOnsIterator::GetNextBatch
CatalogServiceProxyV6::AddOnsIterator::Initialize
CatalogServiceProxyV6::GetB2BKey
CatalogServiceProxyV6::GetCustomerCollectionsId
CatalogServiceProxyV6::GetCustomerPurchaseId
CatalogServiceProxyV6::GetProduct
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullName
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType
cbStatus >= sizeof(DWORD)
cbStatus >= sizeof(WINHTTP_ASYNC_RESULT)
cchRemaining < urlLength && "We should have copied *something*"
CClientSTAHelper::AppPurchase
CClientSTAHelper::DoWork
CClientSTAHelper::GetAddOnProduct
CClientSTAHelper::GetBigCatIds
CClientSTAHelper::ProductPurchase
CClientSTAHelper::ProductPurchaseViaInAppOfferToken
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithDisplayData
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithResults
CHANh
CheckTokenMembershipEx
ChkAlloc(_releaseLicenseTimer)
ChkAlloc(_results)
ChkAlloc(_spCV)
ChkAlloc(_spInAppOffers)
ChkAlloc(cv.Get())
ChkAlloc(hashMap)
ChkAlloc(licenseBuffer)
ChkAlloc(m_timer)
ChkAlloc(pwszUppercaseRegion)
ChkAlloc(spbResponseData)
ChkAlloc(spInAppOffer)
ChkAlloc(spInAppOffer->pInAppSkuList)
ChkAlloc(spInAppSkuInfo)
ChkAlloc(spListingInformation)
ChkAlloc(spManufacturerInfo)
ChkAlloc(spNewProductLicense)
ChkAlloc(spOperation)
ChkAlloc(spProductInfo)
ChkAlloc(spProductLicense)
ChkAlloc(spPurchaseResults)
ChkAlloc(spReceiptData)
ChkAlloc(spRequestProductPurchaseWithDisplayPropertiesInfo)
ChkAlloc(spSkuInfo = Make<StorePreviewSkuInfoServer>())
ChkAlloc(spStoreAppInfo)
ChkAlloc(spStoreAppInfo->pInAppOfferList)
ChkAlloc(spszDestBuffer = new WCHAR[cchDestBuffer])
ChkAlloc(spszFormattedPrice)
ChkAlloc(spUnfulfilledConsumable)
ChkAlloc(tag)
ChkAlloc(tokenUser)
ChkArg(_messageDialogHelper)
ChkArg(action)
ChkArg(appId)
ChkArg(authResponse)
ChkArg(balanceRemaining)
ChkArg(cchFolder)
ChkArg(ContentIdentifiers)
ChkArg(context)
ChkArg(getAppReceiptOperation)
ChkArg(getCollectionsIdOperation)
ChkArg(getProductReceiptOperation)
ChkArg(getPurchaseIdOperation)
ChkArg(hstrUri)
ChkArg(items)
ChkArg(keywords)
ChkArg(lpszURL)
ChkArg(operation)
ChkArg(package)
ChkArg(pAppId)
ChkArg(pAppInfo)
ChkArg(pAppInformation)
ChkArg(pcbResponseData)
ChkArg(pCoreWindow)
ChkArg(pCustomerCollectionsId)
ChkArg(pCustomerPurchaseId)
ChkArg(pFulfillmentResult)
ChkArg(pHandler)
ChkArg(pHresult)
ChkArg(phWndCurrent)
ChkArg(pInAppInformation)
ChkArg(pInAppOffer)
ChkArg(pInAppSkuInformation)
ChkArg(pLinkUri)
ChkArg(pMandatory)
ChkArg(pOptionalPackage)
ChkArg(ppAppLicense)
ChkArg(ppAppReceiptOperation)
ChkArg(ppbResponseData)
ChkArg(ppData)
ChkArg(ppGetCollectionsIdOperation)
ChkArg(ppGetPurchaseIdOperation)
ChkArg(ppGetUnfulfilledConsumablesOperation)
ChkArg(ppLinkUri)
ChkArg(ppListingInformation)
ChkArg(ppLoadAddOnProductInfosOperation)
ChkArg(ppLoadListingOperation)
ChkArg(ppOperation)
ChkArg(ppPackage)
ChkArg(ppProductReceiptOperation)
ChkArg(ppPurchaseResults)
ChkArg(ppQueueItems)
ChkArg(ppReportConsumableFulfillmentOperation)
ChkArg(ppRequestAppPurchaseOperation)
ChkArg(ppRequestProductPurchaseOperation)
ChkArg(ppRequestProductPurchaseWithResultsOperation)
ChkArg(ppRequestPurchaseBySkuIdOperation)
ChkArg(ppResults)
ChkArg(pProductPurchaseStatus)
ChkArg(ppStoreContext)
ChkArg(ppStoreProductQueryResult)
ChkArg(ppStoreProductResult)
ChkArg(ppszUri)
ChkArg(ppUpdateList)
ChkArg(ppUpdateStatuses)
ChkArg(ppUri)
ChkArg(ppValue)
ChkArg(pReceipt)
ChkArg(pResult)
ChkArg(pResults)
ChkArg(productIds)
ChkArg(productKinds)
ChkArg(productStoreId)
ChkArg(pStorePackageUpdateResult)
ChkArg(pStorePackageUpdates)
ChkArg(pszBuffer)
ChkArg(pToken)
ChkArg(publisherUserId)
ChkArg(pUnfulfilledList)
ChkArg(pUpdateState)
ChkArg(pUser)
ChkArg(pValue)
ChkArg(result)
ChkArg(results)
ChkArg(serviceTicket)
ChkArg(spJsonArray)
ChkArg(status)
ChkArg(storeId || packageFamilyName)
ChkArg(storeIds)
ChkArg(storePurchaseProperties)
ChkArg(trackingId)
ChkArg(transactionId)
ChkArg(uri < UriHelper::UriMax)
ChkArg(uri < UriHelperV7::UriMax)
ChkArg(uri >= 0)
ChkArg(uriBase < UriHelper::UriMax)
ChkArg(user)
ChkArg(value)
ChkBool(!!cHasCurrent, ((HRESULT)0x80070057L))
ChkBool(!_hstrUri.IsValid(), HRESULT_FROM_WIN32(1247L))
ChkBool(!hasEmbeddedNull, ((HRESULT)0x80070057L))
ChkBool(!WindowsIsStringEmpty(productId.Get()), ((HRESULT)0x80070057L))
ChkBool(!WindowsIsStringEmpty(storeId), ((HRESULT)0x80070057L))
ChkBool((_productStoreId.IsValid() || ClientProcessUtils::IsDataMartApplication()), ((HRESULT)0x803F6107L))
ChkBool((nullptr != *ppProduct), ((HRESULT)0x803F6102L))
ChkBool((nullptr != productId), ((HRESULT)0x803F6103L))
ChkBool((quantity > 0), ((HRESULT)0x80070057L))
ChkBool(*entry != nullptr, HRESULT_FROM_WIN32(1168L))
ChkBool(*last == ':', ((HRESULT)0x80070057L))
ChkBool(_hstrUri.IsValid(), HRESULT_FROM_WIN32(1003L))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6108L))
ChkBool(_spNextQueryOperation != nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x803F6107L))
ChkBool(_storeContext == nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(asterisk == nullptr, ((HRESULT)0x80070057L))
ChkBool(callingProcessId == hwndProcessId, ((HRESULT)0x80070005L))
ChkBool(cchCurrency != 0, LR2HR(GetLastError()))
ChkBool(colon == nullptr, ((HRESULT)0x80070057L))
ChkBool(commandId == OkCommandId, ((HRESULT)0x80004004L))
ChkBool(filterCount < 2, ((HRESULT)0x80070057L))
ChkBool(filterSize < 2, ((HRESULT)0x80070057L))
ChkBool(found, ((HRESULT)0x80070005L))
ChkBool(found, ((HRESULT)0x80070057L))
ChkBool(hasCurrent, ((HRESULT)0x80070057L))
ChkBool(hstrProductId.IsValid() && hstrSkuId.IsValid() && hstrAvailabilityId.IsValid(), (_apiType == ClientApiType_AppPurchase) ? ((HRESULT)0x803F6101L) : ((HRESULT)0x803F6102L))
ChkBool(hwnd != 0, HRESULT_FROM_WIN32(1168L))
ChkBool(itemCount != 0, ((HRESULT)0x803F6107L))
ChkBool(last == pchEnd, ((HRESULT)0x80070057L))
ChkBool(length >= (count * 2), ((HRESULT)0x80070057L))
ChkBool(LoadStringW(g_hinst, uId, szUnformattedString, (sizeof(*RtlpNumberOf(szUnformattedString)))), HRESULT_FROM_WIN32(GetLastError()))
ChkBool(maxItemsToRetrieve > 0, ((HRESULT)0x80070057L))
ChkBool(nullptr != _storeContext, ((HRESULT)0x803F6107L))
ChkBool(packageCount > 0, ((HRESULT)0x80004005L))
ChkBool(packageFamilyName.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(packageFamilyNameToUninstall.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(pCallerData != nullptr, ((HRESULT)0x803F610BL))
ChkBool(pCallerData != nullptr, HRESULT_FROM_WIN32(1400L))
ChkBool(pCommand != nullptr, ((HRESULT)0x80004004L))
ChkBool(pProductIdCache != nullptr, ((HRESULT)0x803F6107L))
ChkBool(productCount > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(productId.IsValid(), ((HRESULT)0x80070057L))
ChkBool(productKind.IsValid(), HRESULT_FROM_WIN32(1168L))
ChkBool(productsLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(provider == AccountProviderType::MSA, ((HRESULT)0x8000FFFFL))
ChkBool(pszCloseBrace != 0, ((HRESULT)0x80004005L))
ChkBool(size <= 3, ((HRESULT)0x80070057L))
ChkBool(size == 1, ((HRESULT)0x803F6107L))
ChkBool(sizeResult == 1, ((HRESULT)0x803F6107L))
ChkBool(sizeResult > 0, ((HRESULT)0x803F6107L))
ChkBool(spLicenseInfoServer != nullptr, ((HRESULT)0x803F6107L))
ChkBool(spLicenseInstance != nullptr, ((HRESULT)0x803F6107L))
ChkBool(spPropertyValue != nullptr, ((HRESULT)0x80004004L))
ChkBool(StringHelpers::AreEqualCaseInsensitive(productKind.Get(), ConsumableKind.Get()) || StringHelpers::AreEqualCaseInsensitive(productKind.Get(), UnmanagedConsumableKind.Get()), HRESULT_FROM_WIN32(1168L))
ChkBool(tagComponentsSize != 0, ((HRESULT)0x80070057L))
ChkBool(tagComponentsSize <= 3, ((HRESULT)0x80070057L))
ChkBool(ticketCount == 1, ((HRESULT)0x803F6107L))
ChkBool(uReceiptNodeChildrenLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(uReceiptNodesLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(wuResults != nullptr, ((HRESULT)0x80004003L))
ChkHr(((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(25)<<16) | ((unsigned long)(httpRequest.GetRequestStatusCode()))) ))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, _WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, OnEventCallback, nullptr , nullptr )) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_subscription, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, initialChangeStamp, OnEventCallback, reinterpret_cast<PVOID>(this), nullptr , 0 , 0x00000004UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, _WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &m_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT)0x8000000BL))
ChkHr(((HRESULT)0x80004001L))
ChkHr(((HRESULT)0x80004005L))
ChkHr(((HRESULT)0x8000FFFFL))
ChkHr(((HRESULT)0x80070005L))
ChkHr(((HRESULT)0x8007000EL))
ChkHr(((HRESULT)0x80070057L))
ChkHr(((HRESULT)0x80190194L))
ChkHr(((HRESULT)0x80270254L))
ChkHr(((HRESULT)0x803F6101L))
ChkHr(((HRESULT)0x803F6103L))
ChkHr(((HRESULT)0x803F6107L))
ChkHr(((HRESULT)0x803F6108L))
ChkHr(((HRESULT)0x803F6109L))
ChkHr(((HRESULT)0x803F610BL))
ChkHr(((HRESULT)0x803F610CL))
ChkHr(((HRESULT)0x803F610DL))
ChkHr(((HRESULT)0x803F610EL))
ChkHr(((HRESULT)0x83750007L))
ChkHr((AgileHashMap<HSTRING, IStorePackageLicenseLostCallback*>::Make(&_pOptionalPfnToCallbackMap)))
ChkHr((AgileHashMap<HSTRING, ProductListing*,StringUpperCaseHash, StringCaseInsensitiveEquals>::Make(&_spInAppOffers)))
ChkHr((hrGetProduct == ((HRESULT)0x80190194L)) ? ((HRESULT)0x803F6101L) : hrGetProduct)
ChkHr((MakeAndInitialize<LicenseInformationServer, LicenseInformationServer>(spLicenseInformationServerSingleton.GetAddressOf())))
ChkHr((static_cast<HRESULT>(__hr)))
ChkHr(::ActivateInstance( StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(::ActivateInstance(StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(::ActivateInstance(StringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions).Get(), &modalExperienceOptions))
ChkHr(::ParseReceiptResponse(pbResponse, cbResponse, &tmpReceiptData, &cbReceiptData))
ChkHr(::WindowsDuplicateString(_collectionsId.Get(), pCustomerCollectionsId))
ChkHr(::WindowsDuplicateString(_extendedJsonData.Get(), pValue))
ChkHr(::WindowsDuplicateString(_purchaseId.Get(), pCustomerPurchaseId))
ChkHr(::WindowsDuplicateString(_skuStoreId.Get(), pValue))
ChkHr(::WindowsDuplicateString(_storeId.Get(), pValue))
ChkHr(::WindowsDuplicateString(productId, storeId))
ChkHr(::WindowsDuplicateString(productIdSkuId.Get(), storeId))
ChkHr(::WindowsDuplicateString(publisherUserId, &publisherUserIdCopy))
ChkHr(::WindowsDuplicateString(serviceTicket, &serviceTicketCopy))
ChkHr(::WindowsStringHasEmbeddedNull(inputString, &hasEmbeddedNull))
ChkHr(::WindowsSubstringWithSpecifiedLength( str, count, length - (count * 2), resultString))
ChkHr(::WindowsTrimStringEnd(trimmedStart.Get(), Space.Get(), trimmedString.GetAddressOf()))
ChkHr(::WindowsTrimStringStart(timeSpanString, Space.Get(), trimmedStart.GetAddressOf()))
ChkHr(__winrt_hr__)
ChkHr(_addOnLicenses->get_Size(&count))
ChkHr(_addOnLicenses->GetAt(i, license.GetAddressOf()))
ChkHr(_appInstallItem.As(&item2))
ChkHr(_appInstallItem->add_Completed(completedHandler.Get(), &_completedToken))
ChkHr(_appInstallItem->add_StatusChanged(statusChangedHandler.Get(), &_statusChangedToken))
ChkHr(_appInstallItem->get_InstallType(&installType))
ChkHr(_appInstallItem->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(_appInstallItem->get_PackageFamilyName(value))
ChkHr(_appInstallItem->get_ProductId(value))
ChkHr(_appInstallItem->GetCurrentStatus(&appInstallStatus))
ChkHr(_appInstallItem->GetCurrentStatus(&status))
ChkHr(_appName.Set(appName))
ChkHr(_AttachAllEventHandlers(_queueItems.Get()))
ChkHr(_availabilities.As(&inspectableProducts))
ChkHr(_availabilities->First(&availabilityIter))
ChkHr(_availabilities->First(&iter))
ChkHr(_availabilities->get_Size(&size))
ChkHr(_availabilities->GetAt(index, &currentAvailability))
ChkHr(_availabilities->RemoveAt(bestIndex))
ChkHr(_bigIds->First(&spIter))
ChkHr(_bigIds->get_Size(&size))
ChkHr(_BuildBeneficiaryArrayJSON(user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonBeneficiaries))
ChkHr(_BuildBeneficiaryJSON( tickets[index].m_providerType, tickets[index].m_ticket.Get(), tickets[index].m_webAccountId.Get(), jsonBeneficiary))
ChkHr(_BuildBeneficiaryJSON(providerType, authTicket.Get(), DefaultWebAccountIdString.Get(), jsonBeneficiary))
ChkHr(_BuildGoldenBeneficiaryArrayJSON(user, jsonBeneficiaries))
ChkHr(_BuildGoldenBeneficiaryJSON(user, beneficiary))
ChkHr(_BuildGoldenBeneficiaryJSON(user, jsonBeneficiary))
ChkHr(_BuildModalExperienceOptions(modalExperienceOptions, _size))
ChkHr(_bundledSkuIds->GetView(ppValue))
ChkHr(_cachedLicenseJson.CopyTo(result))
ChkHr(_ChangeStatusStringToEnumValue())
ChkHr(_CheckOptionalPackageIsValid(optionalPackageName, _user))
ChkHr(_CheckOptionalPackageIsValid(packageIdentifier, _user))
ChkHr(_ClearEventHandler(item))
ChkHr(_ClearEventHandler(item.Get()))
ChkHr(_collectionData.CopyTo(ppValue))
ChkHr(_collectionData->First(&iter))
ChkHr(_completedEvent.Add(handler, token))
ChkHr(_completedEvent.InvokeAll(this, args.Get()))
ChkHr(_completedEvent.Remove(token))
ChkHr(_ConstructRequestBody( jsonBody, _user, static_cast<WinStoreAuth::AccountProviderType>(requestParams.userTokenTypes), userAuthPromptType, hwnd, requestParams.forceRetailSandbox, jsonInternalParameters))
ChkHr(_ConstructRequestBody(childObject, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(_ConstructRequestBody(jsonElement, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(_contextString.CopyTo(value))
ChkHr(_continuationToken.Set(continuationToken))
ChkHr(_ConvertAppInstallState(appInstallState, isStaged, isDownloaded, &state, &extendedState))
ChkHr(_ConvertDuration(_billingPeriodUnitType.Get(), _billingPeriod, &_billingPeriodUnit))
ChkHr(_ConvertDuration(_trialPeriodUnitType.Get(), _trialPeriod, &_trialPeriodUnit))
ChkHr(_ConvertStoreQueueState(extendedState, &packageStatus.PackageUpdateState))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, &_spPurchaseResults))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, transactionId, receipt.Get(), &_spPurchaseResults))
ChkHr(_CreateUnfulfilledConsumable( inAppOfferTokenString.Get(), transactionId, offerIdString.Get(), &consumable))
ChkHr(_currentBatch->GetObjectAt(_currentItemIndex, ppJsonIAP))
ChkHr(_cv.Set(cv))
ChkHr(_data->get_Size(&dataSize))
ChkHr(_data->GetAt(index, data.GetAddressOf()))
ChkHr(_extendedJsonData.Set(extendedJsonData))
ChkHr(_FillTheRequestWithRequiredParameters())
ChkHr(_FilterProductsJson(productJsonString, CatalogRelationshipType::AddOnParent, _productStoreId.Get()))
ChkHr(_FilterProductsJson(productJsonString, relationshipFilter, _productStoreId.Get()))
ChkHr(_FindUriWithIndex(requestIndex, spJsonUriArray, entry))
ChkHr(_GetCurrencyFormatter(currencyCode, userLocale.Get(), region, &spNumberFormatter))
ChkHr(_GetPackageLocalAppDataPath(szPackageFamilyName, pszFolder, cchFolder))
ChkHr(_GetRawStringFromOS(uri, data.GetAddressOf()))
ChkHr(_hresultOfOperation)
ChkHr(_hstrCurrencyCode.CopyTo(pValue))
ChkHr(_hstrCurrencyCode.Set(pAppInfo->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrencyCode.Set(pInAppOffer->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrencyCode.Set(pInAppSkuInformation->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrentMarket.CopyTo(pValue))
ChkHr(_hstrCurrentMarket.Set(pAppInfo->Market))
ChkHr(_hstrCustomDeveloperData.CopyTo(pValue))
ChkHr(_hstrDescription.CopyTo(hstrValue))
ChkHr(_hstrDescription.CopyTo(pValue))
ChkHr(_hstrDescription.Set(hstrValue))
ChkHr(_hstrDescription.Set(pAppInfo->Description))
ChkHr(_hstrDescription.Set(pInAppInformation->Description))
ChkHr(_hstrDescription.Set(pInAppOffer->Description))
ChkHr(_hstrDescription.Set(pInAppSkuInformation->Description))
ChkHr(_hstrDevOfferId.Set(devOfferId))
ChkHr(_hstrExtendedData.CopyTo(pValue))
ChkHr(_hstrFormattedBasePrice.CopyTo(pValue))
ChkHr(_hstrFormattedListPrice.CopyTo(pValue))
ChkHr(_hstrFormattedPrice.CopyTo(pValue))
ChkHr(_hstrHardwareManufacturerId.CopyTo(value))
ChkHr(_hstrHardwareManufacturerId.Set(value))
ChkHr(_hstrImageUri.Set(pInAppOffer->ImageUri))
ChkHr(_hstrInAppOfferToken.CopyTo(pValue))
ChkHr(_hstrInAppOfferToken.Set(inAppOfferToken))
ChkHr(_hstrInAppOfferToken.Set(pInAppOffer->InAppOfferToken))
ChkHr(_hstrLocale.Set(pAppInfo->Locale))
ChkHr(_hstrManufacturerName.CopyTo(value))
ChkHr(_hstrManufacturerName.Set(value))
ChkHr(_hstrModelName.CopyTo(value))
ChkHr(_hstrModelName.Set(value))
ChkHr(_hstrName.CopyTo(hstrValue))
ChkHr(_hstrName.CopyTo(pValue))
ChkHr(_hstrName.Set(hstrName))
ChkHr(_hstrName.Set(hstrValue))
ChkHr(_hstrName.Set(pAppInfo->Name))
ChkHr(_hstrName.Set(pInAppOffer->Name))
ChkHr(_hstrOfferId.CopyTo(hstrOfferId))
ChkHr(_hstrOfferId.CopyTo(offerId))
ChkHr(_hstrOfferId.Set(offerId))
ChkHr(_hstrProductId.CopyTo(hstrProductId))
ChkHr(_hstrProductId.CopyTo(pValue))
ChkHr(_hstrProductId.Set(pInAppInformation->InAppProductId))
ChkHr(_hstrProductId.Set(productId))
ChkHr(_hstrProductTag.CopyTo(pValue))
ChkHr(_hstrProductTag.Set(pInAppOffer->ProductTag))
ChkHr(_hstrProductType.CopyTo(pValue))
ChkHr(_hstrProductType.Set(L"Consumable"))
ChkHr(_hstrProductType.Set(L"Durable"))
ChkHr(_hstrProductType.Set(L"Unknown"))
ChkHr(_hstrReceipt.CopyTo(pValue))
ChkHr(_hstrReceiptXml.CopyTo(hstrReceiptXml))
ChkHr(_hstrReceiptXml.Set(receiptXml))
ChkHr(_hstrSkuId.CopyTo(pValue))
ChkHr(_hstrSkuId.Set(pInAppSkuInformation->SkuId))
ChkHr(_hstrSkuId.Set(skuId))
ChkHr(_hstrSkuType.CopyTo(pValue))
ChkHr(_hstrSkuType.Set(pInAppSkuInformation->SkuType))
ChkHr(_hstrStoreContentModifierId.CopyTo(value))
ChkHr(_hstrStoreContentModifierId.Set(value))
ChkHr(_hstrTitle.CopyTo(pValue))
ChkHr(_hstrTitle.Set(pInAppInformation->Name))
ChkHr(_hstrTitle.Set(pInAppSkuInformation->Title))
ChkHr(_inAppOfferToken.Set(inAppOfferToken))
ChkHr(_Initialize( packageFullName, "StoreContext.RequestDownloadAndInstallStorePackagesAsync", storeIds, nullptr , nullptr , true , true , false , pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, nullptr , nullptr , pStorePackageUpdates, install, shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, storeIds, storePackageInstallOptions, nullptr , true , shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_IsNetworkMetered(&onMeteredNetwork))
ChkHr(_jsonData.Set(jsonData))
ChkHr(_jsonResponse.CopyTo(pValue))
ChkHr(_jsonResponse.Set(LR"({"status": "aborted"})"))
ChkHr(_jsonValue.SetReference(json))
ChkHr(_keywords->Append(keyword.Get()))
ChkHr(_keywords->GetView(&spVectorView))
ChkHr(_licensableSku.Set(licensableSku))
ChkHr(_LoadLicenseJson(spLicenseInstance))
ChkHr(_MakeDefaultLicenseResponse(package))
ChkHr(_mapView.CopyTo(ppValue))
ChkHr(_messageDialogFactory->CreateWithTitle(content.Get(), title.Get(), &spMessageDialog))
ChkHr(_messageDialogHelper.As(&messageDialogHelper))
ChkHr(_newOrder->Append(productId.Get()))
ChkHr(_offlineLicensesChangedEvent.Add(pHandler, pToken))
ChkHr(_offlineLicensesChangedEvent.Remove(token))
ChkHr(_optionalPackageLicenseWatcher.AddOptionalPackageToWatch(optionalPackageName, pOptionalPackageLicense))
ChkHr(_optionalPackageLicenseWatcher.Initialize())
ChkHr(_optionalPackageLicenseWatcher.RemoveOptionalPackageToWatch(optionalPackageName))
ChkHr(_package.CopyTo(ppPackage))
ChkHr(_package->get_Id(packageId.GetAddressOf()))
ChkHr(_packageFamilyName.Set(packageFamilyName))
ChkHr(_packageFamilyNameToUninstall.Set(packageFamilyNameToUninstall))
ChkHr(_packageFullName.Set(packageFullName))
ChkHr(_packageFullName.Set(PFN))
ChkHr(_packageIdentifier.Set(packageIdentifier))
ChkHr(_ParseGetProductsByKinds(hydrateResult.Get(), products.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(productJsonString.Get(), products.GetAddressOf()))
ChkHr(_PFN.Set(PFN))
ChkHr(_pOptionalPfnToCallbackMap->HasKey(optionalPackageFullName, &foundOptionalPackage))
ChkHr(_pOptionalPfnToCallbackMap->Insert(optionalPackageFullName, storePackageLicenseCallback, &replaced))
ChkHr(_pOptionalPfnToCallbackMap->Remove(optionalPackageFullName))
ChkHr(_pPackage->get_Id(packageId.GetAddressOf()))
ChkHr(_price.CopyTo(ppValue))
ChkHr(_productId.Set(productId))
ChkHr(_productId.Set(value))
ChkHr(_productIdTable->HasKey(inAppOfferToken, &hasKey))
ChkHr(_productIdTable->Insert(inAppOfferToken, productId, &dontCare))
ChkHr(_productKinds.As(&productKinds))
ChkHr(_products.As(&inspectableProducts))
ChkHr(_products.CopyTo(spProducts.GetAddressOf()))
ChkHr(_products->get_Size(&count))
ChkHr(_products->get_Size(&countOfProducts))
ChkHr(_products->GetAt(0, &_product))
ChkHr(_productStoreId.Set(productStoreId))
ChkHr(_pStoreContextServer.As(&storeContextServer2))
ChkHr(_publisherUserId.Set(publisherUserId))
ChkHr(_queueItems.CopyTo(result))
ChkHr(_queueItems->get_Size(&size))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Canceled, true ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, false ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, true ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_OtherError, false ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Pending, false ))
ChkHr(_RefreshStatus(item, true ))
ChkHr(_RefreshStatus(item.Get(), raiseEvent))
ChkHr(_request.Set(jsonRequest))
ChkHr(_request->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync( cv, __FSTREXP __FUNCTION__  , storeIds, false, false, nullptr, operation))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , pStoreIds, true , false , nullptr , ppOperation))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , storeIds, true , false , storePackageInstallOptions, operation))
ChkHr(_RequestPurchase( pCallerData, nullptr, nullptr, body.Get(), cv.GetHStringReference().Get(), InvokedApi_SendStoreRequest.Get(), jsonResponse))
ChkHr(_response.Set(jsonInitialResponse))
ChkHr(_response.Set(response))
ChkHr(_results.CopyTo(ppResults))
ChkHr(_results.CopyTo(ppStoreProductQueryResult))
ChkHr(_RetrieveHWNDFromCallerData(pCallerData, &hwnd))
ChkHr(_serviceTicket.Set(serviceTicket))
ChkHr(_ShouldFilterByRelationship(product, relationshipType, parentProductId, &remove))
ChkHr(_skuId.CopyTo(pValue))
ChkHr(_skuId.Set(skuId))
ChkHr(_skus.As(&inspectableProducts))
ChkHr(_skus->First(&iter))
ChkHr(_skus->get_Size(&size))
ChkHr(_skus->GetAt(i, &sku))
ChkHr(_skus->GetAt(index, &currentSku))
ChkHr(_skus->RemoveAt(bestIndex))
ChkHr(_SortAvailabilities())
ChkHr(_SortSkus())
ChkHr(_spAppLicense.CopyTo(ppResults))
ChkHr(_spDisplayProperties->get_Name(nameOverride.GetAddressOf()))
ChkHr(_spImageUri.CopyTo(pValue))
ChkHr(_spInAppOffers->GetView(ppValue))
ChkHr(_spInAppOffers->Insert( pInAppOffer->InAppOfferToken, spProductListing.Get(), &replaced ))
ChkHr(_spLicenseInformationInternal.CopyTo(__uuidof(**(value)), IID_PPV_ARGS_Helper(value)))
ChkHr(_spLicenseInformationInternal->GetProductId(_appCatalogId.GetAddressOf()))
ChkHr(_spLicenseManager.As(&appLicenseManager2))
ChkHr(_spNextQueryOperation.CopyTo(spNextPagedOperation.GetAddressOf()))
ChkHr(_spNextQueryOperation->GetNextAsync( productJson.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->GetNextAsync( productJsonString.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->HasMorePages(&hasMorePages))
ChkHr(_spNextQueryOperation->HasMorePages(hasMorePages))
ChkHr(_spQueueItems.CopyTo(ppQueueItems))
ChkHr(_spStoreCommerceServer->GetExclusiveLockForProduct(productId.Get(), &pendingPurchaseOperationForProduct))
ChkHr(_spStoreContextServer->CaptureStoreContextCallerData(reinterpret_cast<UINT64>(hwnd), &callerData))
ChkHr(_spUnfulfilledList->GetView(pUnfulfilledList))
ChkHr(_spUri.CopyTo(ppValue))
ChkHr(_statusChangedEvent.Add(handler, token))
ChkHr(_statusChangedEvent.InvokeAll(this, nullptr))
ChkHr(_statusChangedEvent.Remove(token))
ChkHr(_statusChangedTokenMap->get_Size(&size))
ChkHr(_statusChangedTokenMap->HasKey(packageFamilyName.Get(), &hasKey))
ChkHr(_statusChangedTokenMap->Insert(packageFamilyName.Get(), regToken, &replaced))
ChkHr(_statusChangedTokenMap->Lookup(packageFamilyName.Get(), &regToken))
ChkHr(_statusChangedTokenMap->Remove(packageFamilyName.Get()))
ChkHr(_storeContext->AssociateWithStoreContext(inspectableProducts))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(_storeId.Get(), ppOperation))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseWithPurchasePropertiesAsync(storeId.Get(), storePurchaseProperties, ppOperation))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsByFamilyFromParent, _spCV, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsNoParent, _spCV, jsonCatalogParameters.Get(), &statusCode, jsonCatalogString.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForParentProductByFamily, _spCV, jsonCollectionsParameters.Get(), &statusCode, jsonCollectionsString.GetAddressOf()))
ChkHr(_storeId.Set(storeId))
ChkHr(_storeIds.As(&storeIds))
ChkHr(_storePackageUpdates.As(&updates))
ChkHr(_storeQueueItem->get_IsMandatory(&_mandatory))
ChkHr(_subscriptionInfo.CopyTo(ppValue))
ChkHr(_updateStatusMap->First(&iterator))
ChkHr(_updateStatusMap->Insert(packageFamilyName.Get(), newStatus, &replaced))
ChkHr(_uriRuntimeClass.CopyTo(ppValue))
ChkHr(actionFilters->get_Size(&filterSize))
ChkHr(actionFilters->GetAt(0, actionFilter.GetAddressOf()))
ChkHr(ActivateInstance( HStringReference(RuntimeClass_Windows_Management_Deployment_PackageManager).Get(), &spPackageManager))
ChkHr(ActivateInstance(AppServiceConnectionRef.Get(), &pdConnection))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Xml_Dom_XmlDocument).Get(), &spXMLResponse))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Web_Http_Filters_HttpBaseProtocolFilter).Get(), &filter))
ChkHr(ActivateInstance(RuntimeClassAppInstallOptions.Get(), &appInstallOptions))
ChkHr(ActivateInstance(RuntimeClassWindowsManagementDeploymentPackageManager.Get(), &packageManager))
ChkHr(ActivateInstance(RuntimeClassWindowsXboxSystemInternalDeploymentAvailablePackageProvider.Get(), &packageProvider))
ChkHr(ActivateInstance(ValueSetRef.Get(), &message))
ChkHr(activationFactory.As(&uriFactory))
ChkHr(AddCommands(hr, spMessageDialog.Get()))
ChkHr(AddItem(inAppOfferToken.Get(), productId.Get()))
ChkHr(addOns.GetNext(&jsonIAP))
ChkHr(addOns.GetNext(&spProduct))
ChkHr(addOns.Initialize(_spStoreCommerceServer.Get(), _pCV))
ChkHr(addOns.Initialize(pStoreCommerceServer, pCV))
ChkHr(AgileVector<HSTRING>::Make(&_actionFilters))
ChkHr(AgileVector<HSTRING>::Make(&_keywords))
ChkHr(AgileVector<HSTRING>::Make(&_newOrder))
ChkHr(AgileVector<HSTRING>::Make(&contentIds))
ChkHr(AgileVector<HSTRING>::Make(&foundProductIds))
ChkHr(AgileVector<HSTRING>::Make(&keyIds))
ChkHr(AgileVector<HSTRING>::Make(&outputs))
ChkHr(AgileVector<HSTRING>::Make(&productIdsInAppInstallQueue))
ChkHr(AgileVector<HSTRING>::Make(&pVector))
ChkHr(AgileVector<StorePackageUpdate*>::Make(&updates))
ChkHr(AgileVector<StorePreviewProductInfo*>::Make(&spProductInfosList))
ChkHr(AgileVector<StorePreviewSkuInfo*>::Make(&spSkuInfoList))
ChkHr(AgileVector<StoreQueueItem*>::Make(&queuedItemResults))
ChkHr(AgileVector<StoreQueueItem*>::Make(&queueItems))
ChkHr(AllowImpersonation(appLicenseManager2.Get()))
ChkHr(AllowImpersonation(m_spLicenseManager.Get()))
ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf()))
ChkHr(alm->RefreshLicenses(refreshPolicy))
ChkHr(alternateIds->GetObjectAt(iId, &altId))
ChkHr(appInstallItem->get_ProductId(appInstallItemProductId.GetAddressOf()))
ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItems->get_Size(&size))
ChkHr(appInstallItems->GetAt(index, &item))
ChkHr(appInstallManager.As(&appInstallManager2))
ChkHr(appInstallManager.As(&appInstallManager5))
ChkHr(appInstallManager.As(&appInstallManagerInternal))
ChkHr(appInstallManager->get_AppInstallItems(&appInstallItems))
ChkHr(appInstallManager->get_AutoUpdateSetting(&autoUpdates))
ChkHr(appInstallManager5->SetQueueOrder(cvIn, productIds))
ChkHr(appInstallManager5->StartProductInstallWithOptionsForUserAsync( _user.Get(), productId.Get(), nullptr, nullptr, true, downloadOnAnyNetwork, cv.GetHStringReference().Get(), appInstallOptions.Get(), &asyncOp))
ChkHr(appInstallManagerInternal->GetAppInstallItemsForUser(_user.Get(), &appInstallItems))
ChkHr(appInstallManagerInternal->SearchForUpdatesWithPausedAddAsync( _user.Get(), appModelPackagesVV.Get(), true , cv.GetHStringReference().Get(), true, appInstallItemsOp.GetAddressOf()))
ChkHr(appInstallOptions->put_AllowForcedAppRestart(allowForcedAppRestart))
ChkHr(appInstallStatus.As(&appInstallStatus3))
ChkHr(appInstallStatus.As(&appInstallStatusInternal))
ChkHr(appInstallStatus->get_BytesDownloaded(&packageStatus.PackageBytesDownloaded))
ChkHr(appInstallStatus->get_DownloadSizeInBytes(&packageStatus.PackageDownloadSizeInBytes))
ChkHr(appInstallStatus->get_ErrorCode(&errorCode))
ChkHr(appInstallStatus->get_InstallState(&appInstallState))
ChkHr(appInstallStatus->get_PercentComplete(&percentComplete))
ChkHr(appInstallStatus3->get_IsStaged(&isStaged))
ChkHr(appInstallStatusInternal->get_IsDownloaded(&isDownloaded))
ChkHr(appLicenseManager2->GetOfflineLicenseForInstalledPackage( WindowsGetStringRawBuffer(packageFullName, nullptr), AppContentType::AppType_Unknown, license.GetAddressOf()))
ChkHr(appmodelPackages->Append(spAppmodelPackage.Get()))
ChkHr(appmodelPackages->Append(supplement.Get()))
ChkHr(appmodelPackages->get_Size(&packagesSize))
ChkHr(appmodelPackages->GetAt(packagesIndex, &package))
ChkHr(appmodelPackages->GetView(appModelPackagesVV.GetAddressOf()))
ChkHr(appProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(args->get_JsonResponse(jsonResponse.GetAddressOf()))
ChkHr(args->get_ResultCode(&hr))
ChkHr(args->RuntimeClassInitialize( jsonRequestString.Get(), jsonIntialResponse.Get(), _size))
ChkHr(arrAdditionalHeaders.Append(dhStr))
ChkHr(AsAgile(pMessageDialogHelper, &_messageDialogHelper))
ChkHr(AsAgile(productKinds, &_productKinds))
ChkHr(AsAgile(pStorePackageUpdates, &_storePackageUpdates))
ChkHr(AsAgile(spLicenseManager.Get(), &_spLicenseManager))
ChkHr(AsAgile(storeIds, &_storeIds))
ChkHr(AskWuWhichHardwareIsAvailable(guidArray, availableArray))
ChkHr(AsWeak(pStorePackageLicense, &_wrStorePackageLicense))
ChkHr(AsyncBase::CheckValidStateForResultsCall())
ChkHr(AuthenticationInternal::GetStorePrimaryAccountTicket( 0, AuthenticationEndpoint::OneStore, PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(availabilities->GetObjectAt(0, &availability))
ChkHr(availabilities->GetObjectAt(iAvailability, &availability))
ChkHr(availability.As(&availabilityPrivate))
ChkHr(availability->get_Price(ppValue))
ChkHr(availabilityIter->get_Current(&availability))
ChkHr(availabilityIter->get_HasCurrent(&hasCurrent))
ChkHr(availabilityIter->MoveNext(&hasCurrent))
ChkHr(availabilityPrivate->set_ProductIdSkuId(_productId.Get(), _skuId.Get()))
ChkHr(BackgroundPurchaseDialogTask(body.Get(), cv.GetHStringReference().Get(), jsonResponse))
ChkHr(basePrice->Stringify(&pricingInfo->BasePrice))
ChkHr(bestSku.As(&skuPrivate))
ChkHr(bigIds->Append(_productStoreId.Get()))
ChkHr(BlockOnCompletion(spAsyncOperation.Get(), COWAIT_WAITALL))
ChkHr(BlockOnCompletion(spPagedOperation.Get()))
ChkHr(BlockOnCompletionAndGetResults(appInstallItemsOp.Get(), &appInstallItems))
ChkHr(BlockOnCompletionAndGetResults(asyncOp.Get(), &installItemVector))
ChkHr(BlockOnCompletionAndGetResults(deploymentOperation.Get(), &deploymentResult))
ChkHr(BlockOnCompletionAndGetResults(messageDialogOperation.Get(), &command))
ChkHr(BlockOnCompletionAndGetResults(openOperation.Get(), &status))
ChkHr(BlockOnCompletionAndGetResults(operation.Get(), jsonResponse))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(readOperation.Get(), phstrContent))
ChkHr(BlockOnCompletionAndGetResults(requestOperation.Get(), &responseMessage))
ChkHr(BlockOnCompletionAndGetResults(sendMessageOperation.Get(), &response))
ChkHr(bstr.Initialize(L"", 0))
ChkHr(BuildKnownFeatureAndGuidArrays(systemFeatures, guidArray, knownFeaturesArray))
ChkHr(BuildStoreInAppSkuInfo(skuAvailability.Get(), &spInAppSkuInformation))
ChkHr(cacheStatics->GetPackageByFullName(packageFullNameToUninstall.Get(), internalPackage.GetAddressOf()))
ChkHr(callingPackage->get_Dependencies(dependencies.GetAddressOf()))
ChkHr(CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), &canSilentlyDownload))
ChkHr(CatalogServiceProxyV6::GetProduct( _inAppProductId.Get(), _pCV, &spProduct))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &product))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &spJsonObject))
ChkHr(CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType( _packageFullName.Get(), _appType, pCV, _appCatalogId.GetAddressOf()))
ChkHr(ChangeStatusStringToEnumValue())
ChkHr(ClientProcessUtils::CheckMultipleUserSupport(usedMultiUser))
ChkHr(ClientProcessUtils::GetAppContentTypeForInstalledPackage(_packageFullName.Get(), &_appType))
ChkHr(ClientProcessUtils::GetCallerTokenFromComCall(&hToken))
ChkHr(ClientProcessUtils::GetCallingAppName(appName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), callingPackage.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), spAppmodelPackage.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(user.Get(), &parentPackage))
ChkHr(ClientProcessUtils::GetCallingAppPackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(_packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppWindowHandle(&hwndOwner))
ChkHr(ClientProcessUtils::GetModalExperienceManager(&modalManager))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), sidString.GetAddressOf()))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), userSid.GetAddressOf()))
ChkHr(ClientProcessUtils::GetSidForUser(user.Get(), userSid.GetAddressOf()))
ChkHr(ClientProcessUtils::IsCallerERA(&_isERA))
ChkHr(ClientProcessUtils::IsCallerERA(&isERA))
ChkHr(CMiscHelpers::ConvertTextBlob2WideChar(spbReceipt, cbReceipt, &shReceipt))
ChkHr(CMiscHelpers::StringToGuid(transactionIdString.GetRawBuffer(nullptr), &transactionId))
ChkHr(CMiscHelpers::StringToGuid(WindowsGetStringRawBuffer(pAppInfo->Id, nullptr), &_id))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&m_spLicenseManager)), IID_PPV_ARGS_Helper(&m_spLicenseManager)))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spLicenseManager)), IID_PPV_ARGS_Helper(&spLicenseManager)))
ChkHr(CoCreateInstance(__uuidof(ApplicationLicenseManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(alm.GetAddressOf())), IID_PPV_ARGS_Helper(alm.GetAddressOf())))
ChkHr(CoCreateInstance(__uuidof(InstallServiceUserBroker), nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&pinToHelper)), IID_PPV_ARGS_Helper(&pinToHelper)))
ChkHr(CoCreateInstance(__uuidof(XboxDevelopmentPackageManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&packageManager)), IID_PPV_ARGS_Helper(&packageManager)))
ChkHr(CoCreateInstance(CLSID_HardwareCapability, nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spHardwareCapability)), IID_PPV_ARGS_Helper(&spHardwareCapability)))
ChkHr(CoCreateInstance(CLSID_SLSClient, nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&spSLSClient2)), IID_PPV_ARGS_Helper(&spSLSClient2)))
ChkHr(CoGetCallContext(__uuidof(**(&spCallingProcessInfo)), IID_PPV_ARGS_Helper(&spCallingProcessInfo)))
ChkHr(CoGetCallerTID(&_callerThreadId))
ChkHr(CoGetCallerTID(&callerThreadId))
ChkHr(collectionData.As(&collectionDataPrivate))
ChkHr(collectionDataArray->GetObjectAt(collectionIndex, &collectionItem))
ChkHr(collectionDataPrivate->get_ProductId(productId.GetAddressOf()))
ChkHr(collectionDataPrivate->get_SkuId(skuId.GetAddressOf()))
ChkHr(CollectionsServiceProxyV6::ConsumeConsumable(itemProductId.Get(), itemTransactionId.Get(), cv.Get()))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(bigCatId, pCV, items))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(GetAppCatalogId(cv.Get()), cv.Get(), items))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(parentProductId, pCV, items))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAndWebAccountAsync(request, account, uiElement, asyncInfo))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAsync(request, uiElement, asyncInfo))
ChkHr(ComposeLegacyXboxContentIdFromInstalledContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), contentId.addressof()))
ChkHr(connectionProfile->GetConnectionCost(&cost))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, HStringReference(L"application/json").Get(), &requestContent))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, JsonMediaType.Get(), &requestContent))
ChkHr(contentId.CopyTo(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(ContentIdentifiers->First(&spContentIdsIter))
ChkHr(contentIdKeyIdItem->get_ContentIds(&contentIds))
ChkHr(contentIdKeyIdItem->get_KeyIds(&keyIds))
ChkHr(contentIdResponse->get_Items(&items))
ChkHr(contentIds->Append(contentId.Get()))
ChkHr(contentIds->Append(HStringReference(szGuid).Get()))
ChkHr(contentIds->Append(packageIdentifier))
ChkHr(contentIds->get_Size(&contentIdSize))
ChkHr(contentIds->get_Size(&contentIdsSize))
ChkHr(contentIds->get_Size(&contentSize))
ChkHr(contentIds->get_Size(&size))
ChkHr(contentIds->get_Size(&sizeOfContentIds))
ChkHr(contentIds->GetAt(contentIdIndex, contentId.GetAddressOf()))
ChkHr(contentIds->GetAt(i, contentId.GetAddressOf()))
ChkHr(contentIds->GetView(&contentIdsVectorView))
ChkHr(contentInfo->GetCatalogId(&storeIdFromLicense))
ChkHr(ConvertJsonObjectToPropertySet(jsonDataObj, message))
ChkHr(ConvertPropertySetToJsonObject(responseMessage, jsonOutput))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::AAD, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::MSA, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::AAD, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::MSA, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(CopyToNotNull(_productReceipt, pReceipt))
ChkHr(CopyToNotNull(_receipt, pReceipt))
ChkHr(CopyToNotNull(spLicenseInformationServerSingleton, value))
ChkHr(CopyToNotNull(spProductInfos, ppValue))
ChkHr(coreApp->get_MainView(coreAppView.GetAddressOf()))
ChkHr(coreAppView->get_CoreWindow(coreWindow.GetAddressOf()))
ChkHr(CoreQueryApplicationService(processId, __uuidof(ICoreApplication), __uuidof(**(&spCoreAppPrivate)), IID_PPV_ARGS_Helper(&spCoreAppPrivate)))
ChkHr(coreWindow.As(&coreWinInterop))
ChkHr(coreWindowStatic->GetForCurrentThread(coreWindow.GetAddressOf()))
ChkHr(coreWinInterop->get_WindowHandle(&hwnd))
ChkHr(cost->get_NetworkCostType(&costType))
ChkHr(cost->get_Roaming(&isRoaming))
ChkHr(CoSwitchCallContext(nullptr, &oldCtx))
ChkHr(CoSwitchCallContext(nullptr, &pOldCtx))
ChkHr(CoSwitchCallContext(pOldCtx, &pTmpCtx))
ChkHr(CreateCommand( 1020, Microsoft::WRL::Callback<Windows::UI::Popups::IUICommandInvokedHandler>( [](Windows::UI::Popups::IUICommand *) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IUriRuntimeClass> spUri; { { __hr = (IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(IAPUtils::CreateUri(HStringReference(L\"ms-windows-store://signin\").Get(), &spUri))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILauncherStatics> spLauncherStatics; { { __hr = (GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IAsyncOperation<bool>> spAsyncOperation; { { __hr = (spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }).Get(), &spCommand))
ChkHr(CreateCommand( 1022, nullptr, &spCommand))
ChkHr(CreateCommand( uLabelId, pHandler, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2002, OkCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2003, DenyCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateGetItemsRequest(authTicket.GetRawBuffer(nullptr), &request))
ChkHr(CreateGuid(&guidCorrelationId))
ChkHr(CreateGuid(&guidRequestId))
ChkHr(CreateHttpClient(&httpClient))
ChkHr(CreateListingInformation( _spStoreCommerceServer.Get(), cv.Get(), _hCancelEvent, _inAppOfferTokens.Get(), _keywords.Get(), &_spListingInformation))
ChkHr(CreateMessageDialogHelper(hwnd, dialogHelper))
ChkHr(CreateRandomAccessStreamOverStream(stream, BSOS_OPTIONS::BSOS_DEFAULT, __uuidof(**(&randAccStream)), IID_PPV_ARGS_Helper(&randAccStream)))
ChkHr(CreateStoreContextServer(pUser, _spStoreContextServer))
ChkHr(cryptoFactory->DecodeFromBase64String( encodedString, &spHashBuffer))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&_httpClient))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&httpClient))
ChkHr(currentAvailability.As(&currentAvailabilityPrivate))
ChkHr(currentAvailabilityPrivate->get_Rank(&currentRank))
ChkHr(CurrentEraTitleInfo::GetAppId(pfnBuff, pfnLength))
ChkHr(CurrentEraTitleInfo::GetProxyAppPid(&pid))
ChkHr(currentOperation->GetNextAsync(productJson, nextOperation))
ChkHr(currentOperation->GetNextAsync(productJsonResponse, nextOperation))
ChkHr(currentPair->get_Key(keyName.GetAddressOf()))
ChkHr(currentPair->get_Key(tag->destinationKey.GetAddressOf()))
ChkHr(currentPair->get_Value(jsonValue.GetAddressOf()))
ChkHr(currentPair->get_Value(value.GetAddressOf()))
ChkHr(currentSku.As(&currentSkuPrivate))
ChkHr(currentSkuPrivate->get_Rank(&currentRank))
ChkHr(customPolicyDecoded.Set(customPolicyEncoded))
ChkHr(CWSHttpHelper::AddTHAdditionalHeaders(arrRequestHeaders))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-CorrelationId", wszCorrelationId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-RequestId", wszRequestId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-CV", cv.GetUnicode()))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-SiteName", WindowsGetStringRawBuffer(authDomain, nullptr)))
ChkHr(data->pThis->GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))
ChkHr(dependencies.As(&dependenciesIteratable))
ChkHr(dependencies->get_Size(&size))
ChkHr(dependencies->GetAt(index, &package))
ChkHr(dependenciesIteratable->First(&dependenciesIterator))
ChkHr(dependenciesIterator->get_Current(&dependentPackage))
ChkHr(dependenciesIterator->get_HasCurrent(&hasCurrentDependencies))
ChkHr(dependenciesIterator->MoveNext(&hasCurrentDependencies))
ChkHr(dependentPackage.As(&dependentPackage4))
ChkHr(dependentPackage->get_Id(&dependentPackageId))
ChkHr(dependentPackage4->get_SignatureKind(&signatureKindDependent))
ChkHr(dependentPackageId->get_FullName(dependentPackageFullName.GetAddressOf()))
ChkHr(deploymentResult->get_ExtendedErrorCode(&deploymentResultCode))
ChkHr(deploymentResultCode)
ChkHr(dialogHelper->put_ContextString(packageDisplayName.Get()))
ChkHr(dialogHelper->ShowDialogWithResultsAsync( ((HRESULT)0x803F6209L), nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(displaySkuAvailabilities->GetObjectAt(0, &firstSkuAvail))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSku, &item))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSkuAvailability, &skuAvailability))
ChkHr(EnsureWindowFromCallingProcess(*phwndOwner))
ChkHr(EventTokenHashMap::Make(&_statusChangedTokenMap))
ChkHr(extendedError)
ChkHr(factory->Create(filter.Get(), &httpClient))
ChkHr(FileTimeToString(strTime, 200, UINT64_TO_FILETIME(value.UniversalTime)))
ChkHr(filter.As(&filter2))
ChkHr(filter2->put_MaxVersion(Windows::Web::Http::HttpVersion_Http11))
ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))
ChkHr(FormatNameValuePairs(pszFinalUri, urlLength, pszInitialUri, nameValuePairs, cNameValuePairs, encodeParameters))
ChkHr(FormatNameValuePairs(pszRemaining, cchRemaining, pathFormat, nameValuePairs, cNameValuePairs, false))
ChkHr(FormatStrings(L"%1\n[CV:%2]", ppszFormattedString, pszMessage, WindowsGetStringRawBuffer(cv, nullptr)))
ChkHr(foundProductIds.As(&foundProductIdsIVector))
ChkHr(foundProductIds->Append(productId.Get()))
ChkHr(get_StoreId(storeId.GetAddressOf()))
ChkHr(GetActivationFactory( CryptographicBufferRuntimeClassName.Get(), &cryptoFactory))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_PackageResourceResolver).Get(), &spPackageResolverStatics))
ChkHr(GetActivationFactory( NetworkingConnectivityNetworkInformation.Get(), &netInfoStatics))
ChkHr(GetActivationFactory( StateRepositoryPackageClassId.Get(), &spPackageStatics))
ChkHr(GetActivationFactory( StateRepositoryUserClassId.Get(), &spUserStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_ApplicationModel_Core_CoreApplication).Get(), coreApp.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), &spJsonValueStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), spPropValueFactory.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_TargetDeviceFamily).Get(), &spTargetDeviceFamilyStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), &componentLauncher))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference).Get(), &spStreamReferenceStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpClient).Get(), &factory))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpMethod).Get(), &methodStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpRequestMessage).Get(), &requestFactory))
ChkHr(GetActivationFactory(PropertyValueRef.Get(), &propertyValueFactory))
ChkHr(GetActivationFactory(RuntimeClassWindowsXboxApplicationModelStateInternalStateHelperCache.Get(), cacheStatics.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences).Get(), &spGlobalizationPreferences))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), &spCoreWindowStatic))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), coreWindowStatic.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Popups_MessageDialog).Get(), &_messageDialogFactory))
ChkHr(GetActivationFactory(WindowsFoundationUri.Get(), &uriEscapeStatics))
ChkHr(GetAddOnProduct(&spProduct))
ChkHr(GetALM(alm.GetAddressOf()))
ChkHr(GetAppName(szArgument, (sizeof(*RtlpNumberOf(szArgument)))))
ChkHr(GetB2BKey(collectionKeysUri.Get(), serviceTicket, publisherUserId, pCV, collectionsId))
ChkHr(GetB2BKey(purchaseKeysUri.Get(), serviceTicket, publisherUserId, pCV, purchaseId))
ChkHr(GetBigCatIds(productId.GetAddressOf(), skuId.GetAddressOf(), availabilityId.GetAddressOf(), productType.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(fullName.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(GetCallingAppSupportsMultipleUser(&supportsMultipleUsers))
ChkHr(GetContentId(szPackageFamilyName, cpt, &guidContentId))
ChkHr(GetContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), CPT_UNIVERSAL_APP, &guidContentId))
ChkHr(GetContentIdKeyIdsForProductIds( productIdsIter.Get(), cv.Get(), &contentIdResponse))
ChkHr(GetContentIdKeyIdsForProductIds(ids.Get(), cv.Get(), &response))
ChkHr(GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(GetCurrentStatus(&status))
ChkHr(GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(GetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
ChkHr(GetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
ChkHr(GetERAPackageFullNameByAumid(pfnBuff, wil::out_param(callerPackageFullName)))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( dblPrice, currencyCode, locale, region, formattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( price, currencyCode, language.Get(), HStringReference((const WCHAR*)pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( priceValue, pStorePricingInfo->CurrencyCode, locale, HStringReference(pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(GetHardwareManufacturerInfoInternal(value))
ChkHr(GetHttpResponse( pHttpClient, hstrURL, verb, pCV, requestContent.Get(), pStatusCode, hstrResponse))
ChkHr(GetJsonFromURLWithHttpClient(httpClient.Get(), hstrURL, pCV, ppJsonObject))
ChkHr(GetNamedString(spJson, pszName, timeString.GetAddressOf()))
ChkHr(GetNextBatch())
ChkHr(GetPackageFamilyNameFromPackage(pOptionalPackage, packageFamilyName))
ChkHr(GetPackageFamilyNameFromToken(spProcessToken, &pkgFamilyNameSize, pkgFamilyName))
ChkHr(GetPhoneReceiptFilepath(geoId, language, eReceiptType, featureName, packageFullName, szCacheFileFullPath, (sizeof(*RtlpNumberOf(szCacheFileFullPath)))))
ChkHr(GetPriceInfo(product, &spInAppOffer->PricingInfo))
ChkHr(GetPriceInfo(product, &spStoreAppInfo->PricingInfo))
ChkHr(GetPriceInfoFromAvailability(availability, &spInAppSkuInfo->PricingInfo))
ChkHr(GetPriceInfoFromAvailability(availability, pricingInfo))
ChkHr(getProcessPackageResult)
ChkHr(GetProducts(productKinds, storeIds.Get(), cv.GetHStringReference().Get(), productJson))
ChkHr(GetProductsByKinds( nullptr, ids.Get(), nullptr, cv.Get(), CatalogRelationshipType::All, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( nullptr, productIdsInAppInstallQueue.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( nullptr, spIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( productKinds.Get(), productIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::AddOnParent, productJsonString.GetAddressOf()))
ChkHr(GetProductsByKinds(productKinds, storeIds, nullptr, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
ChkHr(GetProductsByKinds(productKinds, storeIds, storeProductOptions, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
ChkHr(GetPublisherId(pStoreCommerceServer, pCV, hstrPublisherId.GetAddressOf()))
ChkHr(GetPurchaseAppPfn(_user.Get(), purchaseAppPfn.GetAddressOf()))
ChkHr(GetPurchaseAppUserModelId(_user.Get(), purchaseAppUserModelId.GetAddressOf()))
ChkHr(GetReceiptCacheFileName(geoId, language, eReceiptType, featureName, szCacheFileName, (sizeof(*RtlpNumberOf(szCacheFileName)))))
ChkHr(GetReceiptCacheFolder(packageFullName, pszCacheFilepath, cchCacheFilepath))
ChkHr(GetRequiredEkbFromContentId(contentId.get(), keyId.addressof()))
ChkHr(GetSidForUser(user, sidString.GetAddressOf()))
ChkHr(GetStoreCommerce(&spStoreCommerce))
ChkHr(GetStoreCommerce(&spStoreCommerceWithConsumables))
ChkHr(GetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
ChkHr(GetStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
ChkHr(GetStringFromURLWithHttpClient(pHttpClient, hstrURL, pCV, nullptr, jsonString.GetAddressOf()))
ChkHr(GetText(hr, cv, content.GetAddressOf(), title.GetAddressOf()))
ChkHr(GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync( m_productId.Get(), pCV, nullptr, spUnfulfilledList.Get()))
ChkHr(GetUnfulfilledConsumablesSync( _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), _spStoreCommerceServer->GetProductIdCache(), _spUnfulfilledList.Get()))
ChkHr(GetWindowHandle(spCoreWindow.Get(), &hwnd))
ChkHr(GuidToStringWithoutBraces(&anid, szAnid))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szContentId))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szGuid))
ChkHr(GuidToStringWithoutBraces(&guidCorrelationId, wszCorrelationId))
ChkHr(GuidToStringWithoutBraces(&guidRequestId, wszRequestId))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), szProductIdGuid))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), wszAppId))
ChkHr(hashMap.As(&_productIdTable))
ChkHr(hashMap->GetView(&_addOnLicensesMap))
ChkHr(hashMap->GetView(ppMapView))
ChkHr(hashMap->Insert(skuStoreId.Get(), license.Get(), &replaced))
ChkHr(hashMap->Insert(storeId.Get(), product.Get(), &replaced))
ChkHr(headers.As(&headersMap))
ChkHr(headers->Append(HStringReference(L"Cache-Control").Get(), HStringReference(L"no-cache, max-age=0").Get()))
ChkHr(headers->Append(HStringReference(L"MS-SiteName").Get(), authDomain))
ChkHr(headers->Append(HStringReference(L"X-WP-ANID").Get(), HStringReference(szAnid).Get()))
ChkHr(headers->get_UserAgent(&userAgent))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), formattedAuthToken.Get(), &succeeded))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), ticket, &succeeded))
ChkHr(headers->TryAppendWithoutValidation(HStringReference(L"Authorization").Get(), authTicket, &b))
ChkHr(headersMap->Insert(HStringReference(L"MS-CV").Get(), cv.GetHStringReference().Get(), &replaced))
ChkHr(hr)
ChkHr(hrCallContext)
ChkHr(hrCommerceOp)
ChkHr(hrCopy)
ChkHr(hrEntry)
ChkHr(hresult)
ChkHr(HRESULT_FROM_RPC(hr))
ChkHr(HRESULT_FROM_RPC(OptionalPackageRundownNotification( rpcHandle, appPfn.GetRawBuffer(nullptr), sessionId, sidString.GetRawBuffer(nullptr), WindowsGetStringRawBuffer(optionalPackageName, nullptr))))
ChkHr(HRESULT_FROM_RPC(RpcBindingFromStringBindingW(rpcStringBinding, &rpcHandle)))
ChkHr(HRESULT_FROM_RPC(RpcBindingSetAuthInfoExW( rpcHandle, nullptr, 6, 10, 0, 0, reinterpret_cast<RPC_SECURITY_QOS *>(&qos))))
ChkHr(HRESULT_FROM_RPC(RpcStringBindingComposeW(nullptr, reinterpret_cast<RPC_WSTR>(L"ncalrpc"), nullptr, nullptr, nullptr, &rpcStringBinding)))
ChkHr(HRESULT_FROM_WIN32(::RegGetValueW(hKey, nullptr, valueName, 0x00000002, nullptr, pszBuffer, &cbData)))
ChkHr(HRESULT_FROM_WIN32(::RegOpenKeyExW(root, subKey, 0, ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))), &hKey)))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 11ul ), &value, sizeof(value))))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 1ul ), value, dwSize)))
ChkHr(HRESULT_FROM_WIN32(1168L))
ChkHr(HRESULT_FROM_WIN32(122L))
ChkHr(HRESULT_FROM_WIN32(1244L))
ChkHr(HRESULT_FROM_WIN32(13L))
ChkHr(HRESULT_FROM_WIN32(1400L))
ChkHr(HRESULT_FROM_WIN32(15861L))
ChkHr(HRESULT_FROM_WIN32(15862L))
ChkHr(HRESULT_FROM_WIN32(1630L))
ChkHr(HRESULT_FROM_WIN32(50L))
ChkHr(HRESULT_FROM_WIN32(5L))
ChkHr(HRESULT_FROM_WIN32(erf.erfOper))
ChkHr(HRESULT_FROM_WIN32(error))
ChkHr(HRESULT_FROM_WIN32(GetLastError()))
ChkHr(HRESULT_FROM_WIN32(rc))
ChkHr(HRESULT_FROM_WIN32(RtlNtStatusToDosError(status)))
ChkHr(hrFamilies)
ChkHr(hrFetch)
ChkHr(hrGetAllAccounts)
ChkHr(hrGetPackage)
ChkHr(hrGetPackageFamilyName)
ChkHr(hrGetString)
ChkHr(hrGoldenTicket)
ChkHr(hrHttp)
ChkHr(hrImpersonate)
ChkHr(hrInfo)
ChkHr(hrInfosIter)
ChkHr(hrInnerIter)
ChkHr(hrItemIter)
ChkHr(hrIter)
ChkHr(hrJoin)
ChkHr(hrJoinActionFilters)
ChkHr(hrJoinStoreIds)
ChkHr(hrKinds)
ChkHr(hrMake)
ChkHr(hrModalAsUser)
ChkHr(hrOp)
ChkHr(hrOperation)
ChkHr(hrPackage)
ChkHr(hrPost)
ChkHr(hrProductsIter)
ChkHr(hrRequest)
ChkHr(hstrContent.Set(pszContent))
ChkHr(hstrEntitlementId.Set(entitlementId))
ChkHr(hstrPreferredSkuId.Set(_inAppProductSkuId.Get()))
ChkHr(hstrProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(hstrTitle.Set(pszTitle))
ChkHr(httpClient->get_DefaultRequestHeaders(&headers))
ChkHr(httpRequest.Initialize (0))
ChkHr(httpRequest.SetAuthorizationHeader(authResponse))
ChkHr(httpRequest.UploadAndFetchResourceByUrl ( lpszURL, 0, 0, 1, 1 ))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, _productKinds.Get()))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds.Get()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), _availabilityId.Get(), _storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _skuStoreId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( productId.Get(), skuId.Get(), nullptr, storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId(productId.Get(), skuId.Get(), availabilityId.Get(), storeId.GetAddressOf()))
ChkHr(IAPUtils::CheckProductKinds(productKinds))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( jsonCatalogString.Get(), jsonCollectionsString.Get(), productJsonResponse))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJson))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJsonResponse))
ChkHr(IAPUtils::ConstructSlsUri(requestParams.uriToFormat.Get(), requestParams.cchUriMax, jsonInternalParameters, uri.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClient(&httpClient))
ChkHr(IAPUtils::CreateHttpClient(httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClient(ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( authToken.Get(), false, httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( ticket.Get(), false, ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), false, &httpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), true, &httpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(ticket.Get(), true, ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthIfAvailable(_user.Get(), &httpClient, requestParams.forceRetailSandbox))
ChkHr(IAPUtils::CreateUri(_hstrImageUri.Get(), &_spImageUri))
ChkHr(IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri))
ChkHr(IAPUtils::CreateUri(hstrLinkUri.Get(), ppLinkUri))
ChkHr(IAPUtils::CreateUri(hstrUri.Get(), &_uriRuntimeClass))
ChkHr(IAPUtils::CreateUri(uri.Get(), &_spUri))
ChkHr(IAPUtils::CreateUri(uriString.Get(), ppValue))
ChkHr(IAPUtils::GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(IAPUtils::GetDeviceContextString(deviceContextString.GetAddressOf()))
ChkHr(IAPUtils::GetDeviceIds(moid, oemid, scmid))
ChkHr(IAPUtils::GetFormattedPrice(_basePrice, _currencyCode.Get(), _formattedBasePrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_listPrice, _currencyCode.Get(), _formattedPrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_recurrencePrice, _currencyCode.Get(), _formattedRecurrencePrice.GetAddressOf()))
ChkHr(IAPUtils::GetJsonFromURL(hstrUri.Get(), pCV, &jsonObject))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient( _httpClient.Get(), HStringReference(szNextUrl).Get(), _spCV, &jsonIAPs))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient(httpClient.Get(), hstrUri.Get(), pCV, spJsonObject.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(hstrLanguage.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(language.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(temp.GetAddressOf()))
ChkHr(IAPUtils::GetLanguages(&spLanguages))
ChkHr(IAPUtils::GetLanguagesString(languages.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrGeoId.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrMarket.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(market.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(temp.GetAddressOf()))
ChkHr(IAPUtils::GetTimeSpanDifference(dtTrialTimeRemaining, &trialTimeRemaining))
ChkHr(IAPUtils::GetTimeSpanDifference(expirationDate, &trialTimeRemaining))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&_isAppContainer))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&isAppContainer))
ChkHr(IAPUtils::ParseStoreId( productStoreId, productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId( storeId, productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId( storeId.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId(data->storeIdToRefresh.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId(storeId.Get(), productId.GetAddressOf(), nullptr , nullptr ))
ChkHr(IAPUtils::SetDateTime(ftAddOnExpirationTime, &addOnExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &expirationDate))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &m_dtExpiration))
ChkHr(IAPUtils::SetDateTime(ftExpireTime, &m_dtExpiration))
ChkHr(IAPUtils::SetDateTime(ftTrialTimeRemaining, &dtTrialTimeRemaining))
ChkHr(IAPUtils::SetMaxDateTime(&_expirationDate))
ChkHr(IAPUtils::SetMaxDateTime(&expirationDate))
ChkHr(IAPUtils::SetMaxDateTime(&m_dtExpiration))
ChkHr(IAPUtils::TimeSpanToString(value, timeSpanString.GetAddressOf()))
ChkHr(ids->Append(productId.Get()))
ChkHr(images->GetObjectAt(iImage, &image))
ChkHr(impersonator.Impersonate())
ChkHr(inAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(inAppOfferTokens->GetAt(p, temp.GetAddressOf()))
ChkHr(info->get_IsSatisfied(&isSatisfied))
ChkHr(infos.As(&infosIterable))
ChkHr(infos->get_Size(&sizeResult))
ChkHr(infosIterable->First(&infosIterator))
ChkHr(infosIterator->get_Current(&keyValuePair))
ChkHr(infosIterator->get_HasCurrent(&hasCurrent))
ChkHr(Initialize())
ChkHr(InitializeIdsFromLicense())
ChkHr(initWithWindow->Initialize(_hwnd))
ChkHr(inspectable.As(&productPrivate))
ChkHr(installItemVector->get_Size(&installVectorSize))
ChkHr(installOptions->get_AllowForcedAppRestart(&allowForcedAppRestart))
ChkHr(installStatus->get_PackageInstallExtendedState(&entendedQueueState))
ChkHr(installStatus->get_PackageInstallExtendedState(&extendedState))
ChkHr(installStatus->get_PackageInstallState(&queueState))
ChkHr(installStatus->get_UpdateStatus(&newStatus))
ChkHr(internalPackage->get_DisplayName(displayName.GetAddressOf()))
ChkHr(IsCallerERA(&isERA))
ChkHr(IsStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId, *value))
ChkHr(IsStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId, *value))
ChkHr(it.As(&spWebTokenRequestResult))
ChkHr(item->add_StatusChanged( Microsoft::WRL::Callback<ITypedEventHandler<StoreQueueItem*, IInspectable*>>( this, &DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged).Get(), &regToken))
ChkHr(item->get_ContentIds(&contentIds))
ChkHr(item->get_KeyIds(&keyIds))
ChkHr(item->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(item->get_PackageFamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(item->get_ProductId(productId.GetAddressOf()))
ChkHr(item->GetCurrentStatus(installStatus.GetAddressOf()))
ChkHr(item->remove_StatusChanged(regToken))
ChkHr(item2->get_Mandatory(value))
ChkHr(Items.Append(item))
ChkHr(items->get_Size(&count))
ChkHr(items->get_Size(&itemCount))
ChkHr(items->get_Size(&size))
ChkHr(items->GetAt(0, &contentIdKeyIdItem))
ChkHr(items->GetAt(0, item.GetAddressOf()))
ChkHr(items->GetAt(i, inspectable.GetAddressOf()))
ChkHr(items->GetAt(index, &item))
ChkHr(items->GetAt(index, item.GetAddressOf()))
ChkHr(items->GetObjectAt(i, &item))
ChkHr(iter->get_Current(&availability))
ChkHr(iter->get_Current(&collectionData))
ChkHr(iter->get_Current(&item))
ChkHr(iter->get_Current(&sku))
ChkHr(iter->get_HasCurrent(&hasCurrent))
ChkHr(iter->MoveNext(&hasCurrent))
ChkHr(iterator->get_Current(&status))
ChkHr(iterator->get_HasCurrent(&hasCurrent))
ChkHr(iterator->MoveNext(&hasCurrent))
ChkHr(json.As(&jsonObjectIterable))
ChkHr(jsonArray->GetObjectAt(i, jsonElement.GetAddressOf()))
ChkHr(JsonHelpers::AppendObject(authTokensArray, jsonBeneficiary))
ChkHr(JsonHelpers::AppendObject(jsonBeneficiaries, beneficiary))
ChkHr(JsonHelpers::AppendObject(jsonProductSkuIds, productSku))
ChkHr(JsonHelpers::AppendObject(productSkuIds, productSku))
ChkHr(JsonHelpers::AppendObject(spBeneficiaryArray, spBeneficiary))
ChkHr(JsonHelpers::AppendString(jsonEntitlementFilters, entitlementFilter.Get()))
ChkHr(JsonHelpers::AppendString(productTypes, L"Application"))
ChkHr(JsonHelpers::AppendString(productTypes, L"UnmanagedConsumable"))
ChkHr(JsonHelpers::CreateJsonArray(&addOns))
ChkHr(JsonHelpers::CreateJsonArray(&authTokensArray))
ChkHr(JsonHelpers::CreateJsonArray(&jsonBeneficiaries))
ChkHr(JsonHelpers::CreateJsonArray(&jsonEntitlementFilters))
ChkHr(JsonHelpers::CreateJsonArray(&jsonProductSkuIds))
ChkHr(JsonHelpers::CreateJsonArray(&products))
ChkHr(JsonHelpers::CreateJsonArray(&productSkuIds))
ChkHr(JsonHelpers::CreateJsonArray(&productTypes))
ChkHr(JsonHelpers::CreateJsonArray(&spBeneficiaryArray))
ChkHr(JsonHelpers::CreateJsonObject(&_request))
ChkHr(JsonHelpers::CreateJsonObject(&_response))
ChkHr(JsonHelpers::CreateJsonObject(&beneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&includeRelationship))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCatalogParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCollectionsParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonInternalParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonOutput))
ChkHr(JsonHelpers::CreateJsonObject(&jsonParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonResultObject))
ChkHr(JsonHelpers::CreateJsonObject(&newResults))
ChkHr(JsonHelpers::CreateJsonObject(&package))
ChkHr(JsonHelpers::CreateJsonObject(&previewResultJson))
ChkHr(JsonHelpers::CreateJsonObject(&productSku))
ChkHr(JsonHelpers::CreateJsonObject(&request))
ChkHr(JsonHelpers::CreateJsonObject(&spBeneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&spRequest))
ChkHr(JsonHelpers::CreateJsonObject(&userAuth))
ChkHr(JsonHelpers::CreateJsonObject(jsonTemp.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(_currentBatch, &_currentBatchCount))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(alternateIds, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(availabilities, &countAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(collectionDataArray, &collectionSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &countSkuAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(images, &countImages))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(items, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonSKUAvailabilities, &cchSKUAvailablilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonUriArray, &countUris))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(localizedProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(marketProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productAddOns, &addOnSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(products, &productsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productsArray, &productSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(relatedProducts, &relatedProductsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(searchTitles, &countTitles))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuAvailabilities, &skuAvailabilitySize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuLocalizedProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spActions, &actionsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAlternateIds, &alternateIdsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAvailabilities, &availabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spDisplaySkuAvailabilities, &displaySkuAvailabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(storeProductArray, &productCount))
ChkHr(JsonHelpers::GetNamedArray(collectionData, L"items", &collectionDataArray))
ChkHr(JsonHelpers::GetNamedArray(customPolicyObject, L"packages", &packages))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &_currentBatch))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedArray(item, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedArray(jsonResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedArray(marketProperty, L"RelatedProducts", &relatedProducts))
ChkHr(JsonHelpers::GetNamedArray(package, L"productAddOns", &productAddOns))
ChkHr(JsonHelpers::GetNamedArray(product, L"AlternateIds", &alternateIds))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &skuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(product, L"LocalizedProperties", &localizedProperties))
ChkHr(JsonHelpers::GetNamedArray(product, L"MarketProperties", &marketProperties))
ChkHr(JsonHelpers::GetNamedArray(productsResultObject, L"Products", &productsArray))
ChkHr(JsonHelpers::GetNamedArray(properties, L"Images", &images))
ChkHr(JsonHelpers::GetNamedArray(properties, L"SearchTitles", &searchTitles))
ChkHr(JsonHelpers::GetNamedArray(response, L"items", &items))
ChkHr(JsonHelpers::GetNamedArray(sku, L"LocalizedProperties", &skuLocalizedProperties))
ChkHr(JsonHelpers::GetNamedArray(skuAvailability, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedArray(spAvailability, L"Actions", &spActions))
ChkHr(JsonHelpers::GetNamedArray(spDisplaySkuAvailability, L"Availabilities", &spAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(spJson, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"AlternateIds", &spAlternateIds))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"DisplaySkuAvailabilities", &spDisplaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedDateTime(conditions, L"EndDate", &pricingInfo->SaleEndDate))
ChkHr(JsonHelpers::GetNamedInteger(customPolicyObject, L"version", &version))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", &totalResultCount))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", (int *)&count))
ChkHr(JsonHelpers::GetNamedInteger(marketProperty, L"MinimumUserAge", &rating))
ChkHr(JsonHelpers::GetNamedObject(availability, L"Properties", &availabilityProperties))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvail, L"Sku", &firstSkuAvailSku))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvailSku, L"Properties", &firstSkuAvailSkuProperties))
ChkHr(JsonHelpers::GetNamedObject(jsonIAPs, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplaySkuSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(orderManagementData, L"Price", &price))
ChkHr(JsonHelpers::GetNamedObject(productResult, L"Product", &product))
ChkHr(JsonHelpers::GetNamedObject(sku, L"Properties", &skuProperties))
ChkHr(JsonHelpers::GetNamedObject(skuAvailability, L"Sku", &sku))
ChkHr(JsonHelpers::GetNamedObject(skuProperties, L"LicensingData", &skuLicensingData))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"Conditions", &conditions))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"OrderManagementData", &orderManagementData))
ChkHr(JsonHelpers::GetNamedObject(spDisplaySkuAvailability, L"Sku", &spSku))
ChkHr(JsonHelpers::GetNamedObject(spJsonObject, L"Product", ppJsonObject))
ChkHr(JsonHelpers::GetNamedString(altId, L"IdType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(altId, L"Value", &spInAppOffer->InAppOfferToken))
ChkHr(JsonHelpers::GetNamedString(availability, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"productId", collectionProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"skuId", collectionSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatId))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatIdOut))
ChkHr(JsonHelpers::GetNamedString(firstSkuAvailSkuProperties, L"CustomDeveloperData", &spInAppOffer->ProductTag))
ChkHr(JsonHelpers::GetNamedString(image, L"ImagePurpose", purpose.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(image, L"Uri", &spInAppOffer->ImageUri))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferTokenString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", itemInAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", itemProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"skuType", skuType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", itemTransactionId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", transactionIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonDataObj, L"AppServiceName", appServiceName.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"AuthToken", authToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"StoreId", _parentStoreIdFromParam.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonResponse, L"key", result))
ChkHr(JsonHelpers::GetNamedString(package, L"skuId", _skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(pagingInfo, L"continuationToken", ContinuationToken))
ChkHr(JsonHelpers::GetNamedString(price, L"CurrencyCode", &pricingInfo->CurrencyCode))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", &spInAppOffer->InAppProductId))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", currentProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductType", productType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"productId", addOnProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"skuId", addOnSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spInAppOffer->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spStoreAppInfo->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spInAppOffer->Name))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spStoreAppInfo->Name))
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelatedProductId", relatedProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelationshipType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(response, L"key", key))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", &spInAppSkuInfo->SkuId))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuType", &spInAppSkuInfo->SkuType))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuDescription", &spInAppSkuInfo->Description))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuTitle", &spInAppSkuInfo->Title))
ChkHr(JsonHelpers::GetNamedString(skuLicensingData, L"ProductId", &spInAppSkuInfo->ProductId))
ChkHr(JsonHelpers::GetNamedString(skuProperties, L"CustomDeveloperData", &spInAppSkuInfo->CustomDeveloperData))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"IdType", alternateIdType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"Value", alternateIdValue.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAvailability, L"AvailabilityId", hstrAvailabilityId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spJson, L"PreferredSkuId", preferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"PreferredSkuId", hstrPreferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductId", hstrProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductType", hstrProductType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spSku, L"SkuId", hstrSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleString", searchTitleString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleType", titleType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedValue(price, L"ListPrice", &listPrice))
ChkHr(JsonHelpers::GetNamedValue(price, L"MSRP", &basePrice))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), &spJsonUriArray))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), spJsonUriArray.ReleaseAndGetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(collectionsJson, nullptr), &collectionData))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(productsJson, nullptr), &productsResultObject))
ChkHr(JsonHelpers::ParseToJsonObject(_jsonRequest.GetRawBuffer(nullptr), jsonDataObj.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(customPolicyDecoded.GetRawBuffer(nullptr), &customPolicyObject))
ChkHr(JsonHelpers::ParseToJsonObject(jsonBodyString.GetRawBuffer(nullptr), &jsonResult))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponse.GetRawBuffer(nullptr), _response.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponseString.GetRawBuffer(nullptr), &jsonResponse))
ChkHr(JsonHelpers::ParseToJsonObject(modalFlowSizes.GetRawBuffer(nullptr), modalFlowJsonData.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &productResult))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &spResults))
ChkHr(JsonHelpers::ParseToJsonObject(results.GetRawBuffer(nullptr), &spResults))
ChkHr(JsonHelpers::ParseToJsonObject(tmp.GetRawBuffer(nullptr), _request.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(jsonDataString, nullptr), jsonData.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(overrideJsonRequest, nullptr), &_request))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(parametersAsJson, nullptr), &jsonObject))
ChkHr(JsonHelpers::RemoveAt(products, static_cast<UINT32>(index)))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"entitlementFilters", jsonEntitlementFilters))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteArray))
ChkHr(JsonHelpers::SetNamedArray(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiaries))
ChkHr(JsonHelpers::SetNamedArray(newResults.Get(), L"Products", products))
ChkHr(JsonHelpers::SetNamedArray(package, L"productAddOns", addOns))
ChkHr(JsonHelpers::SetNamedArray(request, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(request, L"productTypes", productTypes))
ChkHr(JsonHelpers::SetNamedArray(spRequest, L"beneficiaries", spBeneficiaryArray))
ChkHr(JsonHelpers::SetNamedArray(userAuth, userSid.GetRawBuffer(nullptr), authTokensArray))
ChkHr(JsonHelpers::SetNamedBool(_request, L"HasPreviewCapability", hasPreviewCapability))
ChkHr(JsonHelpers::SetNamedBool(json, keyName.GetRawBuffer(nullptr), boolValue))
ChkHr(JsonHelpers::SetNamedBool(package, L"isActive", !!isActive))
ChkHr(JsonHelpers::SetNamedBool(package, L"isDiscLicense", isDiscLicense))
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrial", !!isTrial))
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrialOwnedByThisUser", isTrialOwnedByThisUser))
ChkHr(JsonHelpers::SetNamedBool(productAddOn, L"isActive", true))
ChkHr(JsonHelpers::SetNamedBool(spRequest, L"expandSatisfyingItems", false))
ChkHr(JsonHelpers::SetNamedDateTime(package, L"expiration", expirationDate))
ChkHr(JsonHelpers::SetNamedDateTime(productAddOn, L"expiration", addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedNumber(_response, L"error", hrPurchase))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), byteValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), doubleValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), floatValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(int64Value)))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(uint64Value)))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint32Value))
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"maxPageSize", _maxItems))
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"quantity", quantity))
ChkHr(JsonHelpers::SetNamedNumber(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteNumber))
ChkHr(JsonHelpers::SetNamedNumber(jsonOutput, L"AppServiceResponseStatus", responseStatus))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", 0))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", isInUserCollection ? 1 : 0))
ChkHr(JsonHelpers::SetNamedNumber(previewResultJson, L"licensableStatus", licenseQueryStatus))
ChkHr(JsonHelpers::SetNamedObject(jsonCollectionsParameters, L"includeRelationship", includeRelationship))
ChkHr(JsonHelpers::SetNamedObject(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteObject))
ChkHr(JsonHelpers::SetNamedObject(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(request, L"beneficiary", spBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(sku, L"CollectionData", collectionItem.Get()))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productIdsWithCommas", storeIdsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"CV", cv.GetUnicode()))
ChkHr(JsonHelpers::SetNamedString(_request, L"DeviceContext", deviceContextString.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"InvokedApi", invokedApi))
ChkHr(JsonHelpers::SetNamedString(_request, L"Name", tmp.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"ParentProductId", WindowsGetStringRawBuffer(appProductId, nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"StoreId", storeProductId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"UserId", realId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"Version", hstrPurchaseAppAPIVersion.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"AlreadyPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NetworkError"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NotPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"ServerError"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Aad"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Msa"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityValue", ::WindowsGetStringRawBuffer(token, nullptr)))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"localTicketReference", ::WindowsGetStringRawBuffer(accountId, nullptr)))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relatedProductId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relationshipType", SellableBy.Get()))
ChkHr(JsonHelpers::SetNamedString(json, keyName.GetRawBuffer(nullptr), stringValue.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"actionFilter", actionFilter.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", productId))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", storeIdsWithCommas.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productKinds", productKindsWithCommas.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"itemCount", maxItemsAsHstring.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"skipCount", skipCountAsHString.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"consumableProductId", productId))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"continuationToken", _continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"trackingId", HStringReference(szTrackingId).Get()))
ChkHr(JsonHelpers::SetNamedString(jsonDataObj, L"CV", _cv.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteString.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceFamily", deviceFamily.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceMoid", moid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceOemid", oemid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceScmid", scmid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"languages", languages.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"locale", language.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"market", market.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _parentStoreIdFromParam.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _productStoreId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"PFN", _packageFullName.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"serviceTicket", serviceTicket))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"DevOfferId", _devOfferId.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"StoreId", storeId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"productId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"skuId", _skuId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"trialUniqueId", trialUniqueId.Get()))
ChkHr(JsonHelpers::SetNamedString(previewResultJson, L"licensableSku", licensableSku.Get()))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"AuthToken", HStringReference(L"").Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"continuationToken", continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"parentProductId", ParentProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"productId", catalogProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"productIds", productIdsString.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(request, L"serviceTicket", serviceTicket))
ChkHr(JsonHelpers::SetNamedString(request, L"transactionId", transactionId))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityType", L"msa"))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", authTicket.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", MsaTicket))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"localTicketReference", L"0"))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"market", market.Get()))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"validityType", L"Valid"))
ChkHr(JsonHelpers::SetNamedTimeSpan(package, L"trialTimeRemaining", trialTimeRemaining))
ChkHr(JsonHelpers::Stringify(_jsonValue, _stringifiedValue.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequestString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonIntialResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(entry, entryJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonBody.Get(), body.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonObject, cleansedParameterAsJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonOutput, _jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonResult, jsonBodyString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonResultObject, jsonResult))
ChkHr(JsonHelpers::Stringify(jsonTemp, overrideJsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(newResults, productJsonString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(package, _cachedLicenseJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(pRequest, requestJsonString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(previewResultJson, licenseSatisfactionResultJson))
ChkHr(JsonHelpers::Stringify(request, requestJson.GetAddressOf()))
ChkHr(jsonInput.As(&jsonObjectIterable))
ChkHr(jsonInput->SetNamedValue(jsonSubstitutionList->destinationKey.Get(), jsonSubstitutionList->defaultValue.Get()))
ChkHr(jsonLegacyWindowsPhoneLicensingData->GetNamedString(HStringReference(L"PublisherId").Get(), strPublisherId.GetAddressOf()))
ChkHr(jsonLicensingData->GetNamedObject(HStringReference(L"LegacyWindowsPhoneLicensingData").Get(), &jsonLegacyWindowsPhoneLicensingData))
ChkHr(jsonObject->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(jsonObjectIterable->First(&jsonObjectIterator))
ChkHr(jsonObjectIterator->get_Current(&currentPair))
ChkHr(jsonObjectIterator->get_HasCurrent(&hasCurrent))
ChkHr(jsonObjectIterator->MoveNext(&hasCurrent))
ChkHr(jsonObjectStatics->Parse(jsonString, &jsonObject))
ChkHr(jsonObjectStatics->Parse(jsonString.Get(), &jsonObject))
ChkHr(jsonObjectStatics->Parse(responseJsonString.Get(), &responseJson))
ChkHr(JsonParser::ParseJSONStringToObject( _jsonResponse, this, requestStoreRateAndReviewTable))
ChkHr(JsonParser::ParseJSONStringToObject( _response, this, purchaseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonCollectionsString, this, collectionQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonResponse, this, purchaseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, itemsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( licenseSatisfactionResult, this, previewLicenseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, productQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, &results, getProductsByKindsResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, productQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( scope, &requestParams, responseTable))
ChkHr(JsonParser::ParseJSONToObject( childObject, tag, responseTable))
ChkHr(JsonParser::ParseJSONToObject( entry, &requestParams, responseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, AppLicenseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, AvailabilityRootTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, DisplaySkuAvailabilitiesTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, imageTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, itemTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, LicenseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, OrderManagementDataTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, ProductTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, RecurrenceTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, videoTable))
ChkHr(jsonProperties->GetNamedObject(HStringReference(L"LicensingData").Get(), &jsonLicensingData))
ChkHr(jsonSKU->GetNamedObject(HStringReference(L"Properties").Get(), &jsonProperties))
ChkHr(jsonSKUAvailabilities->GetObjectAt(0, &jsonSKUAvailability))
ChkHr(jsonSKUAvailability->GetNamedObject(HStringReference(L"Sku").Get(), &jsonSKU))
ChkHr(jsonSubstitutionList->defaultValue->get_ValueType(&defaultValueType))
ChkHr(jsonSubstitutionList->defaultValue->Stringify(defaultValueString.GetAddressOf()))
ChkHr(jsonSubstitutionList->destinationKey.CopyTo(jsonSubstitutionList->sourceKey.GetAddressOf()))
ChkHr(jsonUriArray->GetObjectAt(index, &object))
ChkHr(jsonValue->get_ValueType(&jsonType))
ChkHr(jsonValue->get_ValueType(&type))
ChkHr(jsonValue->get_ValueType(&valueType))
ChkHr(jsonValue->GetArray(jsonArray.GetAddressOf()))
ChkHr(jsonValue->GetBoolean(&value))
ChkHr(jsonValue->GetNumber(&value))
ChkHr(jsonValue->GetObjectW(&childObject))
ChkHr(jsonValue->GetObjectW(jsonObject.GetAddressOf()))
ChkHr(jsonValue->GetString(value.GetAddressOf()))
ChkHr(jsonValue->Stringify(value.GetAddressOf()))
ChkHr(KeyIdentifiers->First(&spKeyIdsIter))
ChkHr(keyIds->Append(HStringReference(keyId.get()).Get()))
ChkHr(keyIds->Append(keyId.Get()))
ChkHr(keyIds->get_Size(&keySize))
ChkHr(keyIds->GetAt(i, keyId.GetAddressOf()))
ChkHr(keyIds->GetView(&keyIdsVectorView))
ChkHr(keyValuePair->get_Value(&info))
ChkHr(keywords->get_Size(&cKeywords))
ChkHr(keywords->GetAt(k, filterKeyword.GetAddressOf()))
ChkHr(license->get_SkuStoreId(skuStoreId.GetAddressOf()))
ChkHr(license->GetContentInfo(__uuidof(**(contentInfo.GetAddressOf())), IID_PPV_ARGS_Helper(contentInfo.GetAddressOf())))
ChkHr(License->GetIsTrial(&isTrial))
ChkHr(License->GetLicenseGrantReason(&_grantReason))
ChkHr(licensedProducts.As(&products))
ChkHr(licensedProducts->Append(productId.Get()))
ChkHr(licensedProducts->get_Size(&size))
ChkHr(licenseInfo->get_IsTrial(&isTrial))
ChkHr(LicenseInformationServer::CreateInstance( _packageFullName.Get(), _appType, cv.Get(), &_spLicenseInformationInternal))
ChkHr(licenseManager->GetSatisfactionInfos( contentIds.Get(), keyIds.Get(), &licenseSatisfactionResult))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), keyIdsVectorView.Get(), &licenseSatisfactionResult))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), nullptr, &licenseSatisfactionResult))
ChkHr(LicenseParseReceiptResponse(spbReceiptResponse, cbReceiptResponse, &spbReceipt, &cbReceipt))
ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))
ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))
ChkHr(licenseSatisfactionInfoForAll->Clear())
ChkHr(licenseSatisfactionInfoForAll->GetView(&licenseSatisfactionInfoReadOnlyForAll))
ChkHr(licenseSatisfactionInfoForAll->Insert(contentId.Get(), leinfo.Get(), &replaced))
ChkHr(licenseSatisfactionResult.As(&licenseSatisfactionResultInternal))
ChkHr(licenseSatisfactionResult->get_ExtendedError(&extendedError))
ChkHr(licenseSatisfactionResult->get_LicenseSatisfactionInfos(&infos))
ChkHr(listPrice->Stringify(&pricingInfo->Price))
ChkHr(LoadFormattedString( uLabelId, nullptr, &pszContent))
ChkHr(LoadFormattedString( uTitleId, nullptr, &pszTitle, &szArgument))
ChkHr(LoadFormattedString(uContentId, cv, &pszContent, &szArgument, &szArgument2))
ChkHr(LocalAllocArray(cchBuffer, &pszBuffer))
ChkHr(LocalAllocBytes(cbData, &pszBuffer))
ChkHr(LocalAllocBytes(cbReceipt, &pbReceipt))
ChkHr(localizedProperties->GetObjectAt(0, &properties))
ChkHr(m_evtLicenseStatusChangedEvent.Add(pHandler, pCookie))
ChkHr(m_evtLicenseStatusChangedEvent.InvokeAll())
ChkHr(m_evtLicenseStatusChangedEvent.Remove(iCookie))
ChkHr(m_hstrProductId.CopyTo(pValue))
ChkHr(m_hstrProductId.Set(featureId))
ChkHr(m_hstrProductId.Set(pszProductId))
ChkHr(m_pProductLicenseMap.CopyTo(ppValue))
ChkHr(m_productId.Set(bigCatId))
ChkHr(m_spHashMap.As(&m_spIterable))
ChkHr(m_spHashMap->get_Size(pcItems))
ChkHr(m_spHashMap->GetView(&spHashView))
ChkHr(m_spHashMap->GetView(view))
ChkHr(m_spHashMap->HasKey(hstrKey, pfHasKey))
ChkHr(m_spHashMap->Insert(strProductId.Get(), spProductLicense.Get(), &replaced))
ChkHr(m_spIterable->First(ppIterator))
ChkHr(m_spPackageFullName.Set(packageFullName))
ChkHr(m_spStoreCommerce.As(spRef))
ChkHr(m_spStoreCommerceFactory->CreateStoreCommerceServer(&spStoreCommerce))
ChkHr(MakeAndInitialize<AcquireStoreLicenseForOptionalPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), pOptionalPackage, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BackgroundTaskOperation>(&operation, _user.Get(), jsonRequest, cv.GetHStringReference().Get()))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, storeProductOptions, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( operation, _packageFullName.Get(), pszOperationName, this, storeIds, storePackageInstallOptions, shouldPromptForConsent, totallySilent, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, false, false, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, false, true, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, this, _packageFullName.Get(), pStoreIds, cv.GetAnsi(), messageDialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<FindStoreProductForPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, package, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAppAndSupplementalStorePackageUpdatesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrieve, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), cv.GetAnsi(), productKinds.Get(), -1, asyncId ))
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, items, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, nullptr, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetConsumableBalanceRemainingOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerCollectionsIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerPurchaseIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetIsAnySkuInstalledOperation>( ppOperation, productStoreId, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &currentOperation, this, _productStoreId.Get(), productKinds, 0, maxItems, true, _user.Get(), cv.GetAnsi(), nullptr ))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _skipCount + _maxItems, _maxItems, _hasMorePages, _user.Get(), szCV, _httpClient.Get()))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &currentOperation, this, _productStoreId.Get(), productKinds, nullptr, maxPageSize, _user.Get(), cv.GetAnsi(), nullptr))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _continuationToken.Get(), _maxItems, _user.Get(), szCV, _httpClient.Get()))
ChkHr(MakeAndInitialize<GetOfflineLicensesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreProductOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), storeIds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUnfulfilledConsumablesOperationServer>( &spCheckConsumables, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId)))
ChkHr(MakeAndInitialize<GetUserCollectionOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrievePerPage, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), _szCV, productKinds.Get(), -1, asyncId ))
ChkHr(MakeAndInitialize<LicenseSatisfactionInfo>( &leinfo, license))
ChkHr(MakeAndInitialize<LicenseSatisfactionResult>( result, licenseSatisfactionInfoReadOnlyForAll, hrOperation, skuId ? HStringReference(skuId).Get() : nullptr))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&messageDialogHelper, appName.Get(), (HWND)0 ))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr , hwnd))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr, hwnd))
ChkHr(MakeAndInitialize<ProductIdCache>(&_spProductIdCache))
ChkHr(MakeAndInitialize<ProductReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId), productId ))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _packageFullName.Get(), _productStoreId.Get(), storeId, storePurchaseProperties, overrideJsonRequest, _user.Get(), cv.GetHStringReference().Get(), hwnd, _hasPreviewCapability, invokedApi ))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _PFN.Get(), appProductId.Get(), storeId.Get(), storePurchaseProperties.Get(), overrideJsonRequest.Get(), nullptr, cv.GetHStringReference().Get(), _parentHwnd, _hasPreviewCapability, InvokedApi_RequestPurchase.Get() ))
ChkHr(MakeAndInitialize<ReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId) ))
ChkHr(MakeAndInitialize<ReportConsumableFulfillmentOperationServer>( &spReportProdFulfillOp, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_fulfillRequestId), productId, transactionId ))
ChkHr(MakeAndInitialize<ReportConsumableOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, quantity, trackingId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestAppPurchaseOperationServer>( &spRequestAppPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestAppPurchaseId), fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseBySkuIdOperationServer>( &spRequestPurchaseBySkuIdOperation, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, skuId, hasPreviewCapability, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseOperationServer>( &spRequestProductPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseWithResultsOperationServer>( &spRequestProductPurchaseWithResultsInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, nullptr, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, storePurchaseProperties, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestStoreRateAndReviewOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<StoreAcquireLicenseResult>( ppResults, _pStorePackageLicense.Get(), _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreAppLicense>(&_spAppLicense,  spResults))
ChkHr(MakeAndInitialize<StoreCanAcquireLicenseResult>( ppResults, _licenseQueryStatus, _licensableSku.Get(), _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, _trackingId, _consumableStatus, _balanceRemaining, _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, GUID_NULL, _consumableStatus, _quantity, _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreContentIdKeyIdResponse>(response, responseJson.Get()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), nullptr, packageFullName.Get()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), pUser, packageFullName.Get()))
ChkHr(MakeAndInitialize<StoreContextCallerData>(ppCallerData, appWindowHandle))
ChkHr(MakeAndInitialize<StoreContextLicenseChangedCallback>(&_spLicenseChangedCallback, this))
ChkHr(MakeAndInitialize<StorePackageLicense>( &_pStorePackageLicense, _pOptionalPackage.Get(), _storeContext.Get() ))
ChkHr(MakeAndInitialize<StorePackageLicenseLostCallback>(&spStorePackageLicenseLostCallback, this))
ChkHr(MakeAndInitialize<StorePackageUpdate>(&storePackageUpdate, package.Get(), storeQueueItem.Get()))
ChkHr(MakeAndInitialize<StorePackageUpdateResult>( pStorePackageUpdateResult, _overallState, _updateStatuses.Get(), _queueItems.Get()))
ChkHr(MakeAndInitialize<StoreProduct>(&spStoreProduct,  storeProductJson))
ChkHr(MakeAndInitialize<StoreProductResult>( ppStoreProductResult, _products, _hResultOfOperation))
ChkHr(MakeAndInitialize<StoreProductResult>(ppResults, _products, _hresultOfOperation))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(&storePurchaseProperties, _nameOverride.Get()))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, name))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, nullptr))
ChkHr(MakeAndInitialize<StorePurchaseResult>(ppResults, _status, _hresultOfOperation))
ChkHr(MakeAndInitialize<StoreQueueItem>(&queueItem, installItem.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, appInstallItem.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, item.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItemCompletedEventArgs>(&args, status.Get()))
ChkHr(MakeAndInitialize<StoreQueueItemStatus>(&status, state, extendedState, packageStatus, errorCode))
ChkHr(MakeAndInitialize<StoreRateAndReviewResult>( ppResults, _status, _jsonResponse.Get(), _wasUpdated, _hresultOfOperation))
ChkHr(MakeAndInitialize<StoreRequestOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), requestKind, parametersAsJson, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<StoreSendRequestResult>( ppResults, _jsonResponse.Get(), _hresultOfOperation, _statusCode))
ChkHr(MakeAndInitialize<StoreUninstallStorePackageResult>( &result, _resultCode, _resultStatus ))
ChkHr(MakeAndInitialize<UninstallStorePackageOperation>( operation, _packageFullName.Get(), function, storeId, packageFamilyName, shouldPrompt, dialogHelper.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<AddLicenseAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [licenseBuffer](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IDataReaderStatics> dataReaderFactory; { { __hr = (Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IDataReader> licenseReader; { { __hr = (dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; UINT32 licenseBufferLength; { { __hr = (licenseReader->get_UnconsumedBufferLength(&licenseBufferLength)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; SP_CPP_ARRAY<BYTE> licenseBuffer; licenseBuffer = new BYTE[licenseBufferLength]; { if (!(licenseBuffer)) { Windows::Foundation::Diagnostics::OriginateError(((HRESULT)0x8007000EL), nullptr); } { if (!(licenseBuffer)) { { __hr = (((HRESULT)0x8007000EL)); }; ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkAlloc(licenseBuffer)", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; }; { { __hr = (licenseReader->ReadBytes(licenseBufferLength, licenseBuffer)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILicenseInstance> licenseInstance; { { __hr = (alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L\"\", licenseInstance.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<CancelInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<PauseInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<RefreshLicensesAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [refreshPolicy](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (alm->RefreshLicenses(refreshPolicy)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(alm->RefreshLicenses(refreshPolicy))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<ResumeInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getCollectionsIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString collectionsId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerCollectionsId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), collectionsId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(collectionsId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerCollectionsIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getPurchaseIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString purchaseId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerPurchaseId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), purchaseId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(purchaseId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerPurchaseIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppOperation, BaseTrust, [spThisKeepAlive, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString campaignId; HRESULT hrOperation = CollectionsServiceProxyV6::GetCampaignId( spThisKeepAlive->GetAppCatalogId(cvExtend.Get()), cvExtend.Get(), campaignId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(campaignId.Get()); } Telemetry::EndOperation("CurrentApp.GetAppPurchaseCampaignIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppLoadAddOnProductInfosOperation, BaseTrust, [spThisKeepAlive, cv](CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>& result) mutable { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); ComPtr<IVectorView<StorePreviewProductInfo*>> spProductInfos; HRESULT hrOperation = spThisKeepAlive->LoadAddOnProductInfos(cvExtend.Get(), &spProductInfos); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(spProductInfos.Get()); } Telemetry::EndOperation("StorePreview.LoadAddOnProductInfosAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, spPotentialSystemFeatures, cv](CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>> & results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IVectorView<StoreSystemFeature>> resultsView; { { __hr = (FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 230, __FSTREXP __FUNCTION__  , "ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 230, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, options, cv](CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>& results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference> resultsView; { { __hr = (WSCollector::CollectStoreLog(options, resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 339, __FSTREXP __FUNCTION__  , "ChkHr(WSCollector::CollectStoreLog(options, resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 339, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::GetStoreLogDataAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(marketProperties->GetObjectAt(0, &marketProperty))
ChkHr(memStatics->GetModalExperienceManager(modalExperienceManager))
ChkHr(message->put_Content(pRequestContent))
ChkHr(messageDialogHelper->ShowDialogWithResultsAsync( onMeteredNetwork ? ((HRESULT)0x803F6206L) : ((HRESULT)0x803F6203L), nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(methodStatics->get_Head(&method))
ChkHr(methodStatics->get_Options(&method))
ChkHr(methodStatics->get_Patch(&method))
ChkHr(modalExperienceOptions->put_AllowWin32Owner(true))
ChkHr(modalExperienceOptions->put_Centered(true))
ChkHr(modalExperienceOptions->put_ExperienceDefaultSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMaximumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMinimumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceTitle((nameOverride == nullptr ? HStringReference(L" ").Get() : nameOverride.Get())))
ChkHr(modalExperienceOptions->put_SuspendExemptionType(static_cast<UINT32>(PLM_TASKCOMPLETION_CATEGORY_FLAGS::PT_TC_NONE)))
ChkHr(moId.Set(szEncodedMoId))
ChkHr(nameOverride.Set(L""))
ChkHr(netInfoStatics->GetInternetConnectionProfile(&connectionProfile))
ChkHr(newOrder->First(&iter))
ChkHr(nextOp.CopyTo(_spNextQueryOperation.ReleaseAndGetAddressOf()))
ChkHr(oemId.Set(szEncodedOemId))
ChkHr(optionalPackageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkHr(optionalPackageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(outputBuffer.Preallocate(uriBufferMax, &pszDest))
ChkHr(outputBuffer.Promote(output.GetAddressOf()))
ChkHr(outputs->Append(inputString))
ChkHr(outputs->Append(output.Get()))
ChkHr(outputs->GetView(outputStrings))
ChkHr(outValue.Set(pszBuffer))
ChkHr(package.As(&package2))
ChkHr(package.As(&package4))
ChkHr(package->get_EffectiveSupportedUsers(&supportedUsers))
ChkHr(package->get_Id(&optionalPackageId))
ChkHr(package->get_Id(&packageId))
ChkHr(package->get_PackageType(&packageType))
ChkHr(package->get_TargetDeviceFamily(&foreignKey))
ChkHr(package->GetDisplayNameLocalized(appName))
ChkHr(package2->get_PackageFullName(packageFullNameToUninstall.GetAddressOf()))
ChkHr(package4->get_IsOptional(&isOptional))
ChkHr(package4->get_IsOptional(&isOptionalPackage))
ChkHr(package4->get_SignatureKind(&signatureKind))
ChkHr(packageFamilyName.Set(requestorFamilyName))
ChkHr(packageFamilyNameToUninstall.Set(packageFamilyName))
ChkHr(packageFullName.Set(bstr.Get()))
ChkHr(packageFullName.Set(requestorFullName))
ChkHr(packageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkHr(packageId->get_FamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(packageId->get_FullName(optionalPfn.GetAddressOf()))
ChkHr(packageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(packageId->get_Name(packageName.GetAddressOf()))
ChkHr(packageManager->FindPackagesByUserSecurityIdPackageFamilyName(userSid.Get(), packageFamilyNameToUninstall.Get(), packages.GetAddressOf()))
ChkHr(packageManager->RemovePackageAsync(packageFullName.Get(), &deploymentOperation))
ChkHr(packageManager->UninstallPackage(packageFullNameToUninstall.GetRawBuffer(nullptr)))
ChkHr(packageProvider->FindAvailablePackage(packageFamilyNameToUninstall.Get(), AvailablePackageIdentityType_ContentId, &package))
ChkHr(packages->First(&packagesIterator))
ChkHr(packages->GetObjectAt(0, &package))
ChkHr(packagesIterator->get_Current(&package))
ChkHr(packagesIterator->get_HasCurrent(&hasCurrent))
ChkHr(packagesIterator->MoveNext(&hasCurrent))
ChkHr(pAppAddOn->GetExpireTime(&ftExpireTime))
ChkHr(pAppAddOn->GetProductId(&pszProductId))
ChkHr(pAppAddOn->GetProductType(&m_eAddOnType))
ChkHr(parentPackage->get_Dependencies(&dependencies))
ChkHr(pArgs->get_State(&state))
ChkHr(ParseJSONToObject( jsonObject, pObj, entry.pChildren))
ChkHr(ParseJSONToObject( jsonObject, pObj, table))
ChkHr(ParseSLSJson(onestoreClientData.GetRawBuffer(nullptr), UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), true))
ChkHr(ParseSLSJson(pszJson, UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), false))
ChkHr(ParseSLSJson(pszJson, UriHelperV7::s_rghstrUrisSLS, UriHelperV7::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelperV7::s_rghstrUrisSLS))), false))
ChkHr(ParseUriSubstitutionTag(tag.Get(), tagKey.GetAddressOf(), tagName.GetAddressOf(), tagMeta.GetAddressOf()))
ChkHr(PathCchAddExtension(pszCacheFileName, cchCacheFileName, L".dat"))
ChkHr(PathCchAppendEx(pszCacheFilepath, cchCacheFilepath, szCacheFileName, 0))
ChkHr(PathCchAppendEx(pszFolder, cchFolder, L"_WinStoreSDK_Receipt_Cache", 0))
ChkHr(pCallerData->QueryInterface(__uuidof(**(&spCallerDataPrivate)), IID_PPV_ARGS_Helper(&spCallerDataPrivate)))
ChkHr(pCommand->get_Id(&spPropertyValue))
ChkHr(pdConnection->OpenAsync(&openOperation))
ChkHr(pdConnection->put_AppServiceName(appServiceName.Get()))
ChkHr(pdConnection->put_PackageFamilyName(purchaseAppPfn.Get()))
ChkHr(pdConnection->SendMessageAsync(message.Get(), sendMessageOperation.GetAddressOf()))
ChkHr(pHttpClient->DeleteAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->get_DefaultRequestHeaders(&headers))
ChkHr(pHttpClient->GetAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->PostAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->PutAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->SendRequestAsync(message.Get(), &requestOperation))
ChkHr(pickle->SetBlanket( punk, 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 4, nullptr, EOAC_DEFAULT))
ChkHr(pInAppInfo->spKeywords->get_Size(&cInAppOfferListKeywords))
ChkHr(pInAppInfo->spKeywords->GetAt(i, inAppKeyword.GetAddressOf()))
ChkHr(pInAppOffer->spKeywords->get_Size(&cKeywords))
ChkHr(pInAppOffer->spKeywords->GetAt(i, keyword.GetAddressOf()))
ChkHr(pInAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(pinToHelper->PinToShell(WindowsGetStringRawBuffer(appPackageFamilyName, nullptr), 0x02000000u))
ChkHr(pKeywords->get_Size(&cKeywords))
ChkHr(pkIter->get_Current(requestedProductKind.GetAddressOf()))
ChkHr(pkIter->get_HasCurrent(&hasCurrent))
ChkHr(pkIter->MoveNext(&hasCurrent))
ChkHr(pLicenseInstance->GetIsActive(&isActive))
ChkHr(pMessageDialog->get_Commands(&spCommands))
ChkHr(pMessageDialogHelper->ShowDialogWithResultsAsync( message, nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spJsonValue.Get()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spValue.Get()))
ChkHr(pProductIdCache->AddItem( _inAppOfferToken.Get(), hstrProductId.Get()))
ChkHr(pProductIdCache->AddItem(inAppOfferTokenString.Get(), productIdString.Get()))
ChkHr(pProductIdCache->ProductIdFromInAppOfferToken( _inAppOfferToken.Get(), _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), productId.GetAddressOf()))
ChkHr(previewLicenses.CopyTo(&_mapView))
ChkHr(product->get_ProductKind(actualProductKind.GetAddressOf()))
ChkHr(product->get_StoreId(productId.GetAddressOf()))
ChkHr(product->get_StoreId(storeId.GetAddressOf()))
ChkHr(productAddOns->GetObjectAt(i, &productAddOn))
ChkHr(ProductIdFromInAppOfferTokenTable(inAppOfferToken, productId))
ChkHr(ProductIdHashMap::Make(&hashMap))
ChkHr(productIds.As(&productIdsIter))
ChkHr(productIds->Append(productId))
ChkHr(productIds->Append(productId.Get()))
ChkHr(productIdsInAppInstallQueue->Append(appInstallItemProductId.Get()))
ChkHr(productIdsInAppInstallQueue->get_Size(&size))
ChkHr(productJsonString.CopyTo(productJson))
ChkHr(productJsonString.CopyTo(productJsonResponse))
ChkHr(productKindHashMap->HasKey(actualProductKind.Get(), &found))
ChkHr(productKindHashMap->Insert(requestedProductKind.Get(), true, &replaced))
ChkHr(productKinds->Append(ConsumableKind.Get()))
ChkHr(productKinds->Append(UnmanagedConsumableKind.Get()))
ChkHr(productKinds->First(&pkIter))
ChkHr(productKinds->First(&spIter))
ChkHr(ProductLicenseHashMap::Make(&m_spHashMap))
ChkHr(productPrivate->SetStoreContext(this))
ChkHr(products.As(&productsIVector))
ChkHr(products.CopyTo(&_products))
ChkHr(products.CopyTo(_products.GetAddressOf()))
ChkHr(products->get_Size(&count))
ChkHr(products->get_Size(&productCount))
ChkHr(products->get_Size(&productsLength))
ChkHr(products->GetAt(0, spStoreProduct.GetAddressOf()))
ChkHr(products->GetAt(i, product.GetAddressOf()))
ChkHr(products->GetObjectAt(0, &firstProduct))
ChkHr(products->GetObjectAt(static_cast<UINT32>(index), &product))
ChkHr(productsArray->GetObjectAt(productIndex, &product))
ChkHr(propertySet.As(&propertySetIterable))
ChkHr(propertySet.As(&propertySetMap))
ChkHr(propertySetIterable->First(&propertySetIterator))
ChkHr(propertySetIterator->get_Current(&currentPair))
ChkHr(propertySetIterator->get_HasCurrent(&hasCurrent))
ChkHr(propertySetIterator->MoveNext(&hasCurrent))
ChkHr(propertySetMap->Insert(keyName.Get(), propValue.Get(), &replaced))
ChkHr(propertyValueFactory->CreateBoolean(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateDouble(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateEmpty(propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateString(value.Get(), propValue.GetAddressOf()))
ChkHr(propValue->get_Type(&type))
ChkHr(propValue->GetBoolean(&boolValue))
ChkHr(propValue->GetDouble(&doubleValue))
ChkHr(propValue->GetInt16(&int16Value))
ChkHr(propValue->GetInt32(&int32Value))
ChkHr(propValue->GetInt64(&int64Value))
ChkHr(propValue->GetSingle(&floatValue))
ChkHr(propValue->GetString(stringValue.GetAddressOf()))
ChkHr(propValue->GetUInt16(&uint16Value))
ChkHr(propValue->GetUInt32(&uint32Value))
ChkHr(propValue->GetUInt64(&uint64Value))
ChkHr(propValue->GetUInt8(&byteValue))
ChkHr(pStorePackageUpdates->First(&updateIterator))
ChkHr(pStrings->First(spIter.GetAddressOf()))
ChkHr(pThis->_pOptionalPfnToCallbackMap->Lookup(HStringReference(pData->OptionalPackageFullName).Get(), callback.GetAddressOf()))
ChkHr(pUnfulfilledConsumable->get_ProductId(m_hstrProductId.GetAddressOf()))
ChkHr(pUnfulfilledList->Append(consumable.Get()))
ChkHr(pUnfulfilledList->get_Size(&size))
ChkHr(pUnfulfilledList->GetAt(lProduct, spUnfulfilledConsumable.GetAddressOf()))
ChkHr(pValue.As(&spJsonValue))
ChkHr(pVector.As(&pIVector))
ChkHr(pVector->Append(hstrCurrent.Get()))
ChkHr(quantityParts->get_Size(&partsSize))
ChkHr(quantityParts->GetAt(1, newQuantity.GetAddressOf()))
ChkHr(queuedItemResults->Append(storeQueueItem.Get()))
ChkHr(queuedItemResults->GetView(queuedItems))
ChkHr(queueItems->Append(queueItem.Get()))
ChkHr(queueItems->Append(storeQueueItem.Get()))
ChkHr(queueItems->GetView(&_spQueueItems))
ChkHr(queueItems->GetView(queuedItems))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_OneProduct, _inAppOfferToken.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _receipt.GetAddressOf()))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_OneProduct, _productId.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _productReceipt.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice( locale, market, &pInAppSkuInformation->PricingInfo, false , _hstrFormattedListPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(RefreshInternalState(false, pCV))
ChkHr(RefreshInternalState(true, pCV))
ChkHr(RefreshTableFromService(parentProductId, pCV))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"AppDownloadLimit", actualAppDownloadLimit))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMDiscoveryTTL", systemConfigurationExpiration.UniversalTime))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"UpdateDownloadLimit", actualUpdateDownloadLimit))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_CURRENTIDENTITY_REGISTRY_PATH, L"StoreAADAccountId", realId.GetRawBuffer(nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_REGISTRY_PATH, L"PrimaryWebAccountId", realId.GetRawBuffer(nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"Hardware", WindowsGetStringRawBuffer(catalogHardwareDescriptor, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"MOID", WindowsGetStringRawBuffer(mobileOperatorId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMID", WindowsGetStringRawBuffer(catalogHardwareManufacturerId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"SCMID", WindowsGetStringRawBuffer(catalogStoreContentModifierId, nullptr)))
ChkHr(relatedProducts->GetObjectAt(relatedIndex, &relatedProduct))
ChkHr(request->get_ClientId(clientId.GetAddressOf()))
ChkHr(request->get_Scope(scope.GetAddressOf()))
ChkHr(requestFactory->Create(method.Get(), uri.Get(), &message))
ChkHr(response->get_Items(&items))
ChkHr(response->get_Message(&responseMessage))
ChkHr(response->get_Status(&responseStatus))
ChkHr(responseContent->ReadAsStringAsync(&readOperation))
ChkHr(responseContent->TryComputeLength(&responseSizeBytes, &tryComputeLengthSucceeded))
ChkHr(responseMessage->EnsureSuccessStatusCode(&responseSuccess))
ChkHr(responseMessage->get_Content(&responseContent))
ChkHr(responseMessage->get_StatusCode(&httpStatusCode))
ChkHr(result.CopyTo(results))
ChkHr(result.Set(licenseSatisfactionResult.Get()))
ChkHr(ResultFromLastError())
ChkHr(results.Products.CopyTo(products))
ChkHr(results.Set(resultsView.Get()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::InternalStoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_MODAL_FLOW_SIZES", UriHelperV7::s_rghstrUris[UriHelperV7::ModalFlowSizes].GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS", onestoreClientData.GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::StoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(RoFileTimeToDateTime(fileTime, pDateTime))
ChkHr(RpcHelpers::GetRpcHandle(&rpcHandle))
ChkHr(scmId.Set(szEncodedScmId))
ChkHr(searchTitles->GetObjectAt(iTitle, &title))
ChkHr(SendStoreRequest( nullptr, _hasPreviewCapability ? 14 : 13, cv.GetHStringReference().Get(), requestJson.Get(), &status, responseJson.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerCollectionsId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerPurchaseId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetParentProduct, cv.Get(), nullptr, nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetProductsFromParent, cv.Get(), jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv.Get(), jsonCollectionsParameters.Get(), nullptr, jsonResult))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, uriId, cv, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( pCallerData, UriHelperV7::StoreEndpointExtensionUrls, requestKind, cv.Get(), jsonData.Get(), statusCode, jsonResponse))
ChkHr(SetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
ChkHr(SetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
ChkHr(SetMaxDateTime(&maxDateTime))
ChkHr(SetMaxDateTime(pDateTime))
ChkHr(SetMobileOperatorConfigurationInternal(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes))
ChkHr(SetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
ChkHr(SetStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
ChkHr(SetSystemConfigurationInternal(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor))
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(nullptr , value))
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(user, value))
ChkHr(signInMgr->GetHandleForUser(_user.Get(), &userContextToken))
ChkHr(signInMgr->GetHandleForUser(user, &userContextToken))
ChkHr(sku.As(&skuPrivate))
ChkHr(sku->get_IsInUserCollection(&isInCollection))
ChkHr(sku->get_Price(ppValue))
ChkHr(skuAvailabilities->GetObjectAt(skuAvailabilityIndex, &skuAvailability))
ChkHr(skuLocalizedProperties->GetObjectAt(0, &skuFirstLocalizedProperties))
ChkHr(skuPrivate->get_FulfillmentType(fulfillmentType.GetAddressOf()))
ChkHr(skuPrivate->set_ProductId(_storeId.Get()))
ChkHr(sortedAvailabilities->Append(bestAvailability.Get()))
ChkHr(sortedSkus->Append(bestSku.Get()))
ChkHr(spActions->GetStringAt(k, action.GetAddressOf()))
ChkHr(spAlternateIds->GetObjectAt(i, &spAlternateId))
ChkHr(spAnalyticsInfo->get_VersionInfo(&spVersionInfo))
ChkHr(spAppAddOn->GetCatalogId(&licenseAddOnCatalogId))
ChkHr(spAppAddOn->GetExpireTime(&ftAddOnExpirationTime))
ChkHr(spAppAddOn->GetProductId(&pszProductId))
ChkHr(spAppAddOn->GetSKUId(&licenseAddOnSkuId))
ChkHr(spAppContentInfo->GetCatalogId(&bigCatId))
ChkHr(spAppContentInfo->GetCatalogId(&productStoreId))
ChkHr(spAppContentInfo->GetWindowsStoreAppId(&m_appId))
ChkHr(spApplicationContentInfo->GetAddOnAtPosition(lProduct, spAppAddOn.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetAddOnCount(&nCount))
ChkHr(spApplicationContentInfo->GetCustomPolicy(&customPolicyLengthInBytes, reinterpret_cast<BYTE**>(&customPolicyEncoded)))
ChkHr(spApplicationContentInfo->GetEntitlementId(&entitlementId))
ChkHr(spApplicationContentInfo->GetTrialTimeRemaining(&ftTrialTimeRemaining))
ChkHr(spApplicationContentInfo->GetUserId(&lmUserId))
ChkHr(spAppmodelPackage->get_Dependencies(supplementalPackages.GetAddressOf()))
ChkHr(spAppmodelPackage->get_Id(&packageId))
ChkHr(spArray.As(&spJsonVector))
ChkHr(spAvailabilities->GetObjectAt(j, &spAvailability))
ChkHr(spBufferAsBytes->Buffer(reinterpret_cast<BYTE**>(&pDecodedBuffer)))
ChkHr(spCallerDataPrivate->GetAppWindowHandle(&appWindowHandle))
ChkHr(spCallingProcessInfo->OpenCallerProcessHandle((0x1000), &callingProcessHandle))
ChkHr(spCommand->put_Id(spPropertyValue.Get()))
ChkHr(spCommand->put_Invoked(pHandler))
ChkHr(spCommand->put_Label(HStringReference((const WCHAR*)pszContent).Get()))
ChkHr(spCommands->Append(spCommand.Get()))
ChkHr(spContentIdsIter->get_Current(contentId.GetAddressOf()))
ChkHr(spContentIdsIter->get_HasCurrent(&cHasCurrent))
ChkHr(spContentIdsIter->MoveNext(&cHasCurrent))
ChkHr(spCoreAppPrivate->GetAppDisplayName(appName.GetAddressOf()))
ChkHr(spCoreAppPrivate->GetWindowFromThreadId(callerThreadId, &spCoreWindow))
ChkHr(spCoreWindow.As(&spCoreWinInterop))
ChkHr(spCoreWindowStatic->GetForCurrentThread(&spCoreWindow))
ChkHr(spCoreWinInterop->get_WindowHandle(&hwnd))
ChkHr(spCoreWinInterop->get_WindowHandle(phWndCurrent))
ChkHr(spDisplayData->Initialize(hstrName))
ChkHr(spDisplayData->Initialize(nullptr))
ChkHr(spDisplaySkuAvailabilities->GetObjectAt(i, &spDisplaySkuAvailability))
ChkHr(spGlobalizationPreferences->get_Languages(ppLanguages))
ChkHr(spHardwareCapability->EvaluateHardwareCapabilities( GUID_WinStoreServiceID, arraySize, rawGuidArray, &wuResults, &hrOnlineCheck))
ChkHr(spHashBuffer.As(&spBufferAsBytes))
ChkHr(spHashBuffer->get_Length(&decodedBufferLength))
ChkHr(spHashView->Split(firstPartition, secondPartition))
ChkHr(spIds->Append(productId.Get()))
ChkHr(spIter->get_Current(hstrCurrent.GetAddressOf()))
ChkHr(spIter->get_Current(productKind.GetAddressOf()))
ChkHr(spIter->get_Current(storeId.GetAddressOf()))
ChkHr(spIter->get_Current(value.GetAddressOf()))
ChkHr(spIter->get_HasCurrent(&fHasCurrent))
ChkHr(spIter->get_HasCurrent(&hasCurrent))
ChkHr(spIter->MoveNext(&fHasCurrent))
ChkHr(spIter->MoveNext(&hasCurrent))
ChkHr(spIterator->get_Current(&feature))
ChkHr(spIterator->get_HasCurrent(&hasCurrent))
ChkHr(spIterator->MoveNext(&hasCurrent))
ChkHr(spJsonArray.As(&spJsonVector))
ChkHr(spJsonArrayStatics->Parse(HStringReference(pszJson).Get(), &spJsonArray))
ChkHr(spJsonObject.As(&spJsonValue))
ChkHr(spJsonObject->GetNamedArray(HStringReference(L"DisplaySkuAvailabilities").Get(), &jsonSKUAvailabilities))
ChkHr(spJsonObjectStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonValue->Stringify(hJsonString))
ChkHr(spJsonValueStatics->CreateBooleanValue(fValue, &spValue))
ChkHr(spJsonValueStatics->CreateNullValue(&spValue))
ChkHr(spJsonValueStatics->CreateNumberValue(fValue, &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference((const WCHAR*)strTime).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference(pszValue).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(hValue, &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(timeSpanString.Get(), &spValue))
ChkHr(spJsonVector->Append(spJsonValue.Get()))
ChkHr(spJsonVector->Append(spValue.Get()))
ChkHr(spJsonVector->RemoveAt(index))
ChkHr(spKeyIdsIter->get_Current(keyId.GetAddressOf()))
ChkHr(spKeyIdsIter->get_HasCurrent(&eHasCurrent))
ChkHr(spKeyIdsIter->MoveNext(&eHasCurrent))
ChkHr(spLanguages->get_Size(&size))
ChkHr(spLanguages->GetAt(0, pLanguage))
ChkHr(spLanguages->GetAt(i, language.GetAddressOf()))
ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))
ChkHr(spLicenseInformationServerSingleton->Initialize(lpszPackageFullName, eAppType, pCV))
ChkHr(spLicenseInfoServer.As(&licenseInfo))
ChkHr(spLicenseInstance->GetContentInfo(__uuidof(**(&spAppContentInfo)), IID_PPV_ARGS_Helper(&spAppContentInfo)))
ChkHr(spLicenseInstance->GetExpirationDateTime(&ftExpirationTime))
ChkHr(spLicenseInstance->GetIsActive(&m_bActive))
ChkHr(spLicenseInstance->GetIsTrial(&isTrial))
ChkHr(spLicenseInstance->GetIsTrial(&m_bIsTrial))
ChkHr(spLicenseInstance->GetLicenseGrantReason(&grantReason))
ChkHr(spLicenseManager->EnsureLicenseForApplicationDeployment(contentId.GetRawBuffer(nullptr), nullptr , nullptr ))
ChkHr(spListingInformation->Initialize(spStoreAppInfo))
ChkHr(spManufacturerInfo->put_HardwareManufacturerId(buffer.Get()))
ChkHr(spManufacturerInfo->put_ManufacturerName(buffer.Get()))
ChkHr(spManufacturerInfo->put_ModelName(buffer.Get()))
ChkHr(spManufacturerInfo->put_StoreContentModifierId(buffer.Get()))
ChkHr(spMessageDialog.As(&initWithWindow))
ChkHr(spMessageDialog->ShowAsync(&spAsyncOperation))
ChkHr(spMessageDialog->ShowAsync(ppMessageDialogOperation))
ChkHr(spNewProductLicense->InitializeInvalid(hstrKey))
ChkHr(spNextQueryOperation.CopyTo(_spNextQueryOperation.GetAddressOf()))
ChkHr(spNumberFormatter->FormatDouble(price, formattedPrice))
ChkHr(spOperation->BeginWork(1))
ChkHr(spPackageManager->FindPackageByPackageFullName(fullName.Get(), ppPackage))
ChkHr(spPackageManager->FindPackageByUserSecurityIdPackageFullName(sidString.Get(), fullName.Get(), ppPackage))
ChkHr(spPackageResolver->GetDisplayNameLocalized(appName.GetAddressOf()))
ChkHr(spPackageResolverStatics->Create(spPackage.Get(), &spPackageResolver))
ChkHr(spPackages->get_Size(&packageCount))
ChkHr(spPackages->GetAt(0, &spPackage))
ChkHr(spPackageStatics->ExistsByPackageFamilyName( packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->ExistsByUserAndPackageFamilyName( spUser.Get(), packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->FindByPackageFamilyNameAndPackageType( HStringReference(pkgFamilyName).Get(), PackageType_Main | PackageType_Xap, &spPackages))
ChkHr(spPackageStatics->GetByPackageFullName(packageFullName.Get(), package.GetAddressOf()))
ChkHr(spPagedOperation->GetResults( &hresult, &hasMoreResults, products, spNextQueryOperation))
ChkHr(spProductInfo->Initialize( spStoreAppInfo->Locale, spStoreAppInfo->Market, spStoreAppInfo, pInAppOffer))
ChkHr(spProductInfosList->Append(spProductInfo.Get()))
ChkHr(spProductInfosList->GetView(&spProductInfos))
ChkHr(spProductLicense->Initialize(spAppAddOn.Get()))
ChkHr(spProductLicense->Initialize(spUnfulfilledConsumable.Get()))
ChkHr(spProductLicenseMap->Initialize(spLicenseInstance.Get(), spUnfulfilledList.Get()))
ChkHr(spProductListing->Initialize(_hstrLocale.Get(), _hstrCurrentMarket.Get(), pAppInfo->IsUAP, pInAppOffer))
ChkHr(spPropertyValue->GetInt32(&commandId))
ChkHr(spPropValueFactory->CreateInt32(id, &spPropertyValue))
ChkHr(spPurchaseResults->Initialize( productPurchaseStatus, transactionId, pszReceipt, _hstrDevOfferId.Get()))
ChkHr(spPurchaseResults->Initialize(productPurchaseStatus, transactionId, pszReceipt, nullptr))
ChkHr(spPurchaseResults->Initialize(static_cast<StorePreviewProductPurchaseStatus>(productPurchaseStatus)))
ChkHr(spReceiptContent.As(&spXmlNodeSerializer))
ChkHr(spReceiptNode->get_ChildNodes(&spReceiptNodeChildren))
ChkHr(spReceiptNodeChildren->get_Length(&uReceiptNodeChildrenLength))
ChkHr(spReceiptNodeChildren->Item(0, &spReceiptContent))
ChkHr(spReceiptNodes->get_Length(&uReceiptNodesLength))
ChkHr(spReceiptNodes->Item(0, &spReceiptNode))
ChkHr(spRequestAppPurchaseInfo.As(&spAsyncInfo))
ChkHr(spRequestProductPurchaseWithDisplayPropertiesInfo->RuntimeClassInitialize( _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, devOfferId, pDisplayProperties, pMessageDialogHelper ))
ChkHr(spResults->GetNamedArray(HStringReference(L"Products").Get(), &storeProductArray))
ChkHr(spSkuInfo->Initialize( locale, market, pAppInformation, pInAppInformation, pInAppSku))
ChkHr(spSkuInfoList->Append(spSkuInfo.Get()))
ChkHr(spSkuInfoList->GetView(&_spSkuInfoList))
ChkHr(spSLSClient2->GetSLSDataChunk(GUID_StoreFrontServiceID, 0, L"//ServiceEnvironment/StoreSDK", &pszJson, &lastModified))
ChkHr(spStoreCommerce->GetAppId(&m_appID))
ChkHr(spStoreCommerce->GetAppPurchaseCampaignIdAsync(cv.GetHStringReference().Get(), ppOperation))
ChkHr(spStoreCommerce->GetAppReceiptAsync(cv.GetHStringReference().Get(), getAppReceiptOperation))
ChkHr(spStoreCommerce->GetCustomerCollectionsIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetCollectionsIdOperation))
ChkHr(spStoreCommerce->GetCustomerPurchaseIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetPurchaseIdOperation))
ChkHr(spStoreCommerce->GetLicenseInformation(ppAppLicense))
ChkHr(spStoreCommerce->GetLinkUri(hstrLinkUri.GetAddressOf()))
ChkHr(spStoreCommerce->GetProductReceiptAsync(productId, cv.GetHStringReference().Get(), getProductReceiptOperation))
ChkHr(spStoreCommerce->Initialize(cv.GetHStringReference().Get()))
ChkHr(spStoreCommerce->LoadAddOnProductInfosAsync(cv.GetHStringReference().Get(), ppLoadAddOnProductInfosOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync( nullptr, keywords, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync( productIds, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync(nullptr, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->RequestAppPurchaseAsync( includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestAppPurchaseOperation))
ChkHr(spStoreCommerce->RequestProductPurchaseAsync(productId, includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkHr(spStoreCommerce->RequestProductPurchaseByProductIdAndSkuIdAsync( productId, skuId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestPurchaseBySkuIdOperation))
ChkHr(spStoreCommerceWithConsumables->GetUnfulfilledConsumablesAsync( cv.GetHStringReference().Get(), ppGetUnfulfilledConsumablesOperation))
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentAsync( productId, transactionId, cv.GetHStringReference().Get(), ppReportConsumableFulfillmentOperation))
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentSync(productId, cv.GetHStringReference().Get()))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithDisplayPropertiesAsync( productId, devOfferId, displayProperties, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithResultsAsync( productId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseWithResultsOperation))
ChkHr(spStoreContext.As(&spStoreContextPrivate))
ChkHr(spStoreContextPrivate->SendStoreRequestAsync( requestKind, parametersAsJson, ppOperation))
ChkHr(spStoreContextServer.As(&spStoreContextServer3))
ChkHr(spStoreContextServer->GetAssociatedStoreQueueItems( cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer->GetProduct( cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(spStoreContextServer->GetStoreQueueItems( storeIds.Get(), cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer3->SetInstallOrderForAssociatedStoreQueueItems( cv.GetHStringReference().Get(), _newOrder.Get()))
ChkHr(spStoreProduct.As(&storeProductPrivate))
ChkHr(spStoreProduct->get_HasDigitalDownload(&hasDigitalDownload))
ChkHr(spStoreProduct->get_IsInUserCollection(&isInUserCollection))
ChkHr(spStoreProduct->get_ProductKind(productKind.GetAddressOf()))
ChkHr(spStreamReferenceStatics->CreateFromStream(randAccStream.Get(), result.GetAddressOf()))
ChkHr(spTargetDeviceFamily->get_Name(&targetPlatform))
ChkHr(spTargetDeviceFamilyStatics->Get(foreignKey, &spTargetDeviceFamily))
ChkHr(spThis->_appInstallItem.As(&appInstallItem2))
ChkHr(spThis->GetSatisfactionInfos(contentIdsVectorView.Get(), keyIdsVectorView.Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(spUnfulfilledConsumable->get_ProductId(strProductId.GetAddressOf()))
ChkHr(spUnfulfilledConsumable->Initialize(pszProductId, transactionId, pszDevOfferId))
ChkHr(spUserStatics->GetByUserSid(userSid.Get(), &spUser))
ChkHr(spValue.As(&spJsonValue))
ChkHr(spVectorView.As(&spIterable))
ChkHr(spVersionInfo->get_DeviceFamily(deviceFamily.GetAddressOf()))
ChkHr(spWebTokenRequestResults->get_Size(&resultsCount))
ChkHr(spWebTokenRequestResults->GetAt(0, it.GetAddressOf()))
ChkHr(spXmlDocumentIO->LoadXml(hResponse.Get()))
ChkHr(spXmlNodeSerializer->GetXml(hstrReceiptContent.GetAddressOf()))
ChkHr(spXMLResponse.As(&spXmlDocumentIO))
ChkHr(spXMLResponse->GetElementsByTagName(HStringReference(L"Receipt").Get(), &spReceiptNodes))
ChkHr(StartOperation(1))
ChkHr(StartOperation(asyncId))
ChkHr(StartOperation(iAsyncId))
ChkHr(status.As(&statusInternal))
ChkHr(status.CopyTo(result))
ChkHr(status->get_Value(&updateStatus))
ChkHr(statusInternal->get_IsDownloaded(value))
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(user, value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(nullptr , *value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(user, *value))
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(user, value))
ChkHr(storeContextServer->AcquireStoreLicenseForOptionalPackage( optionalPfn.Get(), spStorePackageLicenseLostCallback.Get(), &_valid))
ChkHr(storeContextServer->CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), value))
ChkHr(storeContextServer->DownloadStorePackages( storeIds.Get(), _storePackageInstallOptions.Get(), cv.GetHStringReference().Get(), _shouldPromptForConsent, _totallySilent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->DownloadStorePackageUpdates( updates.Get(), cv.GetHStringReference().Get(), _install, _shouldPromptForConsent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->FocusOnWindow((UINT64)hwnd))
ChkHr(storeContextServer->GetAppAndOptionalStorePackageUpdates(cv.GetHStringReference().Get(), &queuedItems))
ChkHr(storeContextServer->GetAssociatedStoreProducts( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJsonString.GetAddressOf(), &_spNextQueryOperation))
ChkHr(storeContextServer->GetConsumableBalanceRemaining( _productId.Get(), cv.GetHStringReference().Get(), jsonString.GetAddressOf()))
ChkHr(storeContextServer->GetCustomerCollectionsId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _collectionsId.GetAddressOf()))
ChkHr(storeContextServer->GetCustomerPurchaseId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _purchaseId.GetAddressOf()))
ChkHr(storeContextServer->GetLinkUri(storeId.Get(), uriString.GetAddressOf()))
ChkHr(storeContextServer->GetOfflineLicenses( cv.GetHStringReference().Get(), results.GetAddressOf()))
ChkHr(storeContextServer->GetPreviewLicenseResultForPackage( _packageIdentifier.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(storeContextServer->GetProductForPackage( productKinds.Get(), packageFullName.Get(), cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(storeContextServer->GetProductsWithOptions( productKinds.Get(), storeIds.Get(), _storeProductOptions.Get(), cv.GetHStringReference().Get(), productJsonString.GetAddressOf()))
ChkHr(storeContextServer->GetUserCollection( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJson.GetAddressOf(), &_spNextQueryOperation))
ChkHr(storeContextServer->Initialize(false, nullptr))
ChkHr(storeContextServer->Initialize(pUser != nullptr, _spLicenseChangedCallback.Get()))
ChkHr(storeContextServer->IsStoreProductInstalled( _productStoreId.Get(), cv.GetHStringReference().Get(), &_isInstalled))
ChkHr(storeContextServer->RequestPurchase( _storeContextCallerData.Get(), _storeId.Get(), _storePurchaseProperties.Get(), _jsonData.Get(), cv.GetHStringReference().Get(), _response.GetAddressOf()))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), _requestKind, cv.GetHStringReference().Get(), _jsonData.Get(), &_statusCode, _jsonResponse.GetAddressOf()))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), 16, cv.GetHStringReference().Get(), nullptr, &statusCode, _jsonResponse.GetAddressOf()))
ChkHr(storeContextServer->SetUser(pUser))
ChkHr(storeContextServer->UninstallStorePackage( _storeId.Get(), _packageFamilyNameToUninstall.Get(), cv.GetHStringReference().Get(), _shouldPrompt, _dialogHelper.Get(), &_resultStatus ))
ChkHr(storeContextServer2->GetPreviewLicenseResultForStoreId( _productStoreId.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(storeId.Set(L""))
ChkHr(storeIdComponents->get_Size(&size))
ChkHr(storeIdComponents->GetAt(0, pProductId))
ChkHr(storeIds->Append(HStringReference(storeIdFromLicense).Get()))
ChkHr(storeIds->Append(storeId.Get()))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( _spStoreCommerceServer.Get(), cv.Get(), 0, &spStoreAppInfo))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( pStoreCommerceServer, pCV, hCancel, &spStoreAppInfo))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( this, pCV, nullptr, &spStoreAppInfo))
ChkHr(StorePackageUpdateManagerUtils::StorePackageUpdateStatusLifetimeTraits::Construct(value, _status))
ChkHr(storePackageUpdateStatuses->Append(updateStatus))
ChkHr(storePackageUpdateStatuses->GetView(&_updateStatuses))
ChkHr(StorePackageUpdateStatusHashMap::Make(&_updateStatusMap))
ChkHr(StorePackageUpdateStatusVector::Make(&storePackageUpdateStatuses))
ChkHr(storeProductArray->GetObjectAt(0, storeProductJson.GetAddressOf()))
ChkHr(storeProductId.Set(storeId))
ChkHr(storeProductOptions->get_ActionFilters(&actionFilters))
ChkHr(StoreProductPagedQueryResult::BuildMap( products, productKinds, &_mapView))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(storePurchaseProperties->get_ExtendedJsonData(tmp.GetAddressOf()))
ChkHr(storePurchaseProperties->get_Name(tmp.GetAddressOf()))
ChkHr(storeQueueItem->get_ProductId(productId.GetAddressOf()))
ChkHr(storeQueueItem->GetCurrentStatus(&installStatus))
ChkHr(STRAPI_Create(pszBuffer, &dhStr))
ChkHr(strAuthTokenPrefixed.CopyTo(authToken.ReleaseAndGetAddressOf()))
ChkHr(stringBuffer.Preallocate(decodedBufferLength + 1, &pszDecodedString))
ChkHr(stringBuffer.Preallocate(urlLength, &pszFinalUri))
ChkHr(stringBuffer.Promote(result.GetAddressOf()))
ChkHr(StringCaseInsensitiveEquals()(StorePackageUpdateLeft.PackageFamilyName, StorePackageUpdateRight.PackageFamilyName, fEquals))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, L",", &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, pszLanguage, &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/consume"))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/query"))
ChkHr(StringCchCopyA(szDestFileNameA, (sizeof(*RtlpNumberOf(szDestFileNameA))), pszDest))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, escapedData.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, L"=", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, seenQuestionMark ? L"&" : L"?", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, tagName.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, L"/", &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, pszUriBase, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, WindowsGetStringRawBuffer(nameValuePairs[i].value, nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyNExW(pszRemaining, cchRemaining, pszFormatCursor, pszOpenBrace - pszFormatCursor, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyW(pszIdValue, cchIdValue, L"Public"))
ChkHr(StringCchCopyW(pszRemaining, cchRemaining, pszFormatCursor))
ChkHr(StringCchCopyW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), collectionsUriBase.GetRawBuffer(nullptr)))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%02d:%02d:%09.6f", isNegative ? L"-" : L"", hours, minutes, seconds))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%d.%02d:%02d:%09.6f", isNegative ? L"-" : L"", static_cast<int>(days), hours, minutes, seconds))
ChkHr(StringCchPrintfW( spszDestBuffer, cchDestBuffer, pszFormat, szEncodedMoId, szEncodedOemId, szEncodedScmId ))
ChkHr(StringCchPrintfW( szNextUrl, (sizeof(*RtlpNumberOf(szNextUrl))), _runningCount == 0 ? L"%ws" : L"%ws&$skip=%u", _hstrUri.GetRawBuffer(nullptr), _runningCount))
ChkHr(StringCchPrintfW(pszBuffer, cchBuffer, L"%s:%s", header, value))
ChkHr(StringCchPrintfW(szArgument, (sizeof(*RtlpNumberOf(szArgument))), L"0x%X", hr))
ChkHr(StringCchPrintfW(szSeedName, (sizeof(*RtlpNumberOf(szSeedName))), L"%s-%s-%d-%s", WindowsGetStringRawBuffer(geoId, nullptr), WindowsGetStringRawBuffer(language, nullptr), static_cast<UINT32>(eReceiptType), WindowsGetStringRawBuffer(featureName, nullptr)))
ChkHr(StringHelpers::DecodeBase64( HStringReference(customPolicyEncoded.GetPtr(), customPolicyLength).Get(), customPolicyDecoded.GetAddressOf()))
ChkHr(StringHelpers::Join( _productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds, false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( storeIds, false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( storeIds.Get(), false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join(_newOrder.Get(), false, productIdList.GetAddressOf()))
ChkHr(StringHelpers::Join(productIds, false, productIdsString.GetAddressOf()))
ChkHr(StringHelpers::SplitString(data.Get(), L":", quantityParts.GetAddressOf()))
ChkHr(StringHelpers::SplitString(rawInputTag.Get(), L":", &tagComponents))
ChkHr(StringHelpers::SplitString(storeId, g_pszStoreIdSeparator, &storeIdComponents))
ChkHr(StringHelpers::TrimEnds(inputTag, 1, rawInputTag.GetAddressOf()))
ChkHr(StringHelpers::TrimString(output.Get(), uriOutput))
ChkHr(StringHelpers::TrimString(result.Get(), hstrUri))
ChkHr(StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, 0))
ChkHr(strPrefixAuthToken.CopyTo(ticket.ReleaseAndGetAddressOf()))
ChkHr(strProductId.Set(pszProductId))
ChkHr(substituteValue->get_ValueType(&valueType))
ChkHr(substituteValue->GetArray(&substituteArray))
ChkHr(substituteValue->GetNumber(&substituteNumber))
ChkHr(substituteValue->GetObjectW(&substituteObject))
ChkHr(substituteValue->GetString(substituteString.GetAddressOf()))
ChkHr(supplement.As(&supplement4))
ChkHr(supplement->get_Id(packageId.ReleaseAndGetAddressOf()))
ChkHr(supplement4->get_IsOptional(&isOptional))
ChkHr(supplementalPackages->get_Size(&supplementalPackagesSize))
ChkHr(supplementalPackages->GetAt(i, supplement.GetAddressOf()))
ChkHr(supportedFeaturesVector->GetView(&resultsView))
ChkHr(systemFeatures->First(&spIterator))
ChkHr(tag.Set(pszOpenBrace, static_cast<UINT32>(pszCloseBrace - pszOpenBrace) + 1))
ChkHr(tagComponents->get_Size(&tagComponentsSize))
ChkHr(tagComponents->GetAt(0, outputKey))
ChkHr(tagComponents->GetAt(1, outputName))
ChkHr(tagComponents->GetAt(2, outputMeta))
ChkHr(temp.Set(InternalGetRuntimeClassName()))
ChkHr(temp.Set(pszUri))
ChkHr(temp.Set(shReceipt))
ChkHr(temp.Set(spszFormattedPrice))
ChkHr(temp.Set(wszAppId))
ChkHr(threadContext._devOfferId.Set(devOfferId))
ChkHr(threadContext._inAppOfferToken.Set(inAppOfferToken))
ChkHr(threadContext._inAppProductId.Set(productId))
ChkHr(threadContext._inAppProductSkuId.Set(skuId))
ChkHr(threadContext._nameOverride.Set(nameOverride))
ChkHr(threadContext._PFN.Set(PFN))
ChkHr(threadContext.DoWork())
ChkHr(TrimString(result.Get(), resultString))
ChkHr(ULongMult(static_cast<DWORD>(wcslen(value)) + 1, sizeof(*value), &dwSize))
ChkHr(UMgrQueryUserToken(userContextToken, &userToken))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), true , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, true , operation))
ChkHr(UnpackHStringIIterable(inAppOfferTokens, &_inAppOfferTokens))
ChkHr(UnpackHStringIIterable(keywords, &_keywords))
ChkHr(update.As(&updatePrivate))
ChkHr(updateIterator->get_Current(&update))
ChkHr(updateIterator->get_HasCurrent(&hasCurrent))
ChkHr(updateIterator->MoveNext(&hasCurrent))
ChkHr(updatePrivate->get_StoreQueueItem(&storeQueueItem))
ChkHr(updates->Append(storePackageUpdate.Get()))
ChkHr(updates->First(&updateIterator))
ChkHr(updates->GetView(queuedItems))
ChkHr(uriEscapeStatics->EscapeComponent(substituteString.Get(), escapedData.GetAddressOf()))
ChkHr(uriFactory->CreateUri(hstrURL, &uri))
ChkHr(UriHelper::GetUri(UriHelper::LinkUriFormat, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), pLinkUri))
ChkHr(UriHelper::GetUri(UriHelper::MDCollections, collectionsUriBase.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsDesktop, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetOneProductReceiptMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::OneStoreAuthenticationDomain, hstrAuthDomain.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDCollections, HStringReference(L"v6.0/beneficiaries/me/keys").Get(), collectionKeysUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDPurchase, HStringReference(L"v6.0/users/me/keys").Get(), purchaseKeysUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetProductDetailsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchAddOnsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), _hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchProductsByPackageFamilyNamePath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchSkusByContentIdPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nameValuePairs, cNameValuePairs, false, hstrUri))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nullptr, 0, false, hstrUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszInitialUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszUriBase))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUris, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUrisSLS, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx( s_rghstrUris, uriBase, hstrPath, nameValuePairs, cNameValuePairs, hstrUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx(s_rghstrUris, uriBase, hstrPath, nullptr, 0, hstrUri))
ChkHr(UriHelperV7::GetIndexedEntry(slsUri, requestKind, entry.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::DeviceFamily, deviceFamily.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::ModalFlowSizes, modalFlowSizes.GetAddressOf()))
ChkHr(UrlEscapeW(idValueUnescaped.GetRawBuffer(nullptr), pszIdValue, &cchIdValue, 0))
ChkHr(userAuth->GetNamedArray(userSid.Get(), &jsonBeneficiaries))
ChkHr(UserAwareCallerIdentity::GetCallingProcessPackageFullName(packageFullName))
ChkHr(UserAwareCallerIdentity::GetCallingProcessUserContext(&userContextToken))
ChkHr(userLocale.Set(locale))
ChkHr(userLocale.Set(szUserLocale))
ChkHr(userMgr.As(&signInMgr))
ChkHr(UuidCreate(&anid))
ChkHr(UuidFromStringW((PWCHAR)_transactionId.GetRawBuffer(nullptr), _pTransactionId))
ChkHr(value.As(&propValue))
ChkHr(value->get_Value(&dwValue))
ChkHr(Vector<HSTRING>::Make(&_bigIds))
ChkHr(Vector<HSTRING>::Make(&_bundledSkuIds))
ChkHr(Vector<HSTRING>::Make(&_keywords))
ChkHr(Vector<HSTRING>::Make(&bigIds))
ChkHr(Vector<HSTRING>::Make(&contentIds))
ChkHr(Vector<HSTRING>::Make(&ids))
ChkHr(Vector<HSTRING>::Make(&keyIds))
ChkHr(Vector<HSTRING>::Make(&licensedProducts))
ChkHr(Vector<HSTRING>::Make(&productIds))
ChkHr(Vector<HSTRING>::Make(&productKinds))
ChkHr(Vector<HSTRING>::Make(&spIds))
ChkHr(Vector<HSTRING>::Make(&storeIds))
ChkHr(Vector<Package*>::Make(&appmodelPackages))
ChkHr(Vector<StoreAvailability*>::Make(&sortedAvailabilities))
ChkHr(Vector<StoreImage*>::Make(&_images))
ChkHr(Vector<StoreSku*>::Make(&sortedSkus))
ChkHr(Vector<StoreSystemFeature>::Make(&supportedFeaturesVector))
ChkHr(Vector<StoreVideo*>::Make(&_videos))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&_spUnfulfilledList))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&m_spUnfulfilledList))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&spUnfulfilledList))
ChkHr(VerifyCapability(requestParams.requiredCapability.Get()))
ChkHr(VerifyCapability(StoreConfigurationCapability.Get()))
ChkHr(VerifyCapability(StoreLicenseManagement.Get()))
ChkHr(wil::com_weak_query_nothrow(this, &weakThis))
ChkHr(Windows::Foundation::ActivateInstance( HStringReference(RuntimeClass_Windows_UI_Popups_UICommand).Get(), &spCommand))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Foundation_Uri).Get(), &uriFactory))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Web_Http_HttpStringContent).Get(), &contentFactory))
ChkHr(Windows::Foundation::GetActivationFactory( Microsoft::WRL::Wrappers::HStringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceManager).Get(), &memStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(L"Windows.Foundation.Uri").Get(), &activationFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), &spJsonArrayStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &jsonObjectStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonObjectStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_System_Profile_AnalyticsInfo).Get(), &spAnalyticsInfo))
ChkHr(Windows::Foundation::GetActivationFactory(UserManagerClassId.Get(), &userMgr))
ChkHr(WindowsCompareStringOrdinal(productId, _currentProductBeingPurchased.Get(), &comparisonResult))
ChkHr(WindowsConcatString( HStringReference(L"WLID1.0=").Get(), ticket, formattedAuthToken.GetAddressOf()))
ChkHr(WindowsConcatString( productId, StoreIdSeparator.Get(), productIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuId.Get(), StoreIdSeparator.Get(), productIdSkuIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuIdWithSeparator.Get(), availabilityId, storeId))
ChkHr(WindowsConcatString( productIdWithSeparator.Get(), skuId, productIdSkuId.GetAddressOf()))
ChkHr(WindowsConcatString(EntitlementFilterPrefix.Get(), productKind.Get(), entitlementFilter.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _hstrImageUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _ImageUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _VideoUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"WLID1.0=").Get(), authTicket, hstrAuthTicketWithPrefix.GetAddressOf()))
ChkHr(WindowsCreateString(pszResource, cch, jsonString))
ChkHr(WindowsCreateString(reinterpret_cast<PCWSTR>(pbReceipt), cbReceipt / 2, receipt))
ChkHr(WindowsCreateString(sidString, (UINT32)wcslen(sidString), sid))
ChkHr(WindowsCreateString(spszDestBuffer, (UINT32)wcslen(spszDestBuffer), pDeviceContext))
ChkHr(WindowsDuplicateString(_licensableSku.Get(), pValue))
ChkHr(WindowsPromoteStringBuffer(buffer, string))
ChkHr(WindowsSubstring(inputString, lastDelimeterIndex, output.GetAddressOf()))
ChkHr(WindowsSubstringWithSpecifiedLength(hstrReceiptContent.Get(), 9, WindowsGetStringLen(hstrReceiptContent.Get()) - 12, receipt))
ChkHr(WindowsSubstringWithSpecifiedLength(inputString, lastDelimeterIndex, delimeterIndex - lastDelimeterIndex, output.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker( true, authToken.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), _user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar((WinStoreAuth::AccountProviderType)requestParams.authType, authToken.Get(), strAuthTokenPrefixed.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar(providerType, ticket.Get(), strPrefixAuthToken.GetAddressOf()))
ChkHr(WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser(_user.Get(), authType, purchaseAppPfn.Get(), userId.Get(), realId.GetAddressOf()))
ChkHr(WSCollector::CollectStoreLog(options, resultsView))
ChkReturn(((HRESULT)0x80040001L))
ChkReturn(((HRESULT)0x80040002L))
ChkReturn(((HRESULT)0x8007000EL))
ChkReturn(_productIdTable->Lookup(inAppOfferToken, productId))
ChkReturn(hr)
ChkReturn(HRESULT_FROM_WIN32(1168L))
ChkWin32(Expr)
CHttpConnection::_Initialize
CHttpConnection::Connect
CHttpConnectionCache::GetConnection
CHttpRequest response header: %s : %s
CHttpRequest::_AddDebugHeaderIfPresent
CHttpRequest::_AppendToDataBuffer
CHttpRequest::_CreateConnectionAndSendRequest
CHttpRequest::_DownloadData
CHttpRequest::_GetProxyInfoForUrl
CHttpRequest::_LocalAllocHeader
CHttpRequest::_ReceiveResponse
CHttpRequest::_SendRequestWithRetry
CHttpRequest::_SetProxyForCurrentRequest
CHttpRequest::_WaitForLastAsyncCompletion
CHttpRequest::_WinHttpCompletionCallback
CHttpRequest::~CHttpRequest
CHttpRequest::AbortRequest
CHttpRequest::AddRequestHeader
CHttpRequest::Initialize
CHttpRequest::s_WinHttpCompletionCallback
CHttpRequest::SetAuthorizationHeader
CHttpRequest::UploadAndFetchResource
CHttpRequest::UploadAndFetchResourceByUrl
CHttpSession::_Initialize
CiWWSP
className
Cleared event hander for item %s
Client_ShowSkipForceAuthentication
ClientProcessUtils::CheckMultipleUserSupport
ClientProcessUtils::EnsureWindowFromCallingProcess
ClientProcessUtils::GetAppContentTypeForInstalledPackage
ClientProcessUtils::GetCallerTokenFromComCall
ClientProcessUtils::GetCallingAppName
ClientProcessUtils::GetCallingAppPackage
ClientProcessUtils::GetCallingAppPackage(_user.Get(), package.GetAddressOf())
ClientProcessUtils::GetCallingAppPackageFamilyName
ClientProcessUtils::GetCallingAppPackageFullName
ClientProcessUtils::GetCallingAppPackageFullName(_PFN.GetAddressOf())
ClientProcessUtils::GetCallingAppPackageFullName(m_PFN.GetAddressOf())
ClientProcessUtils::GetCallingAppSessionGuid
ClientProcessUtils::GetCallingAppSupportsMultipleUser
ClientProcessUtils::GetCallingAppWindowHandle
ClientProcessUtils::GetCallingAppWindowHandleFromThreadId
ClientProcessUtils::GetModalExperienceManager
ClientProcessUtils::GetSidForUser
ClientProcessUtils::GetWindowHandle
ClientProcessUtils::IsCallerERA
CloseHandle
CloseState
CloseThreadpoolTimer
cNameValuePairs >= 0
CoCreateFreeThreadedMarshaler
CoCreateInstance
CoGetApartmentType
CoGetCallContext
CoGetCallerTID
CoGetInterfaceAndReleaseStream
CoGetMalloc
CoImpersonateClient
CollectionData
CollectionsServiceProxyV6::ConsumeConsumable
CollectionsServiceProxyV6::GetCampaignId
CollectionsServiceProxyV6::GetUnfulfilledConsumables
CoMarshalInterface
CompanyName
CompareFileTime
CompareStringOrdinal
CompareStringW
ComposeLegacyXboxContentIdFromInstalledContentId
Conditions
ConstrainedImpersonateLoggedOnUser::GenerateImpersonationToken
Consumable
consumableProductId
consumers
ContentIds
continuationToken
Conversion to hex failed: %s
Conversion to UINT64 failed: %s
Converted Store Queue State for Package %s - AppInstallState: %d and IsStaged: %s and IsDownloaded: %s to StoreQueueItemState: %d and StoreQueueItemExtendedState: %d
ConvertSidToStringSidW
CopySid
CoReleaseMarshalData
CoRevertToSelf
CoRevertToSelf()
CoSetProxyBlanket
CoSwitchCallContext
CoTaskMemAlloc
CoTaskMemFree
CoTaskMemRealloc
CoWaitForMultipleHandles
CreateDirectoryW
CreateEvent failed
CreateEventExW
CreateEventW
CreateFileA
CreateFileW
CreateGetItemsRequest
CreateListingInformation
CreateMutexExW
CreateProcessW
CreateRandomAccessStreamOverStream
CreateSemaphoreExW
CreateStreamOnHGlobal
CreateThreadpoolTimer
Creating reg.exe process failed
CryptAcquireContextW
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptReleaseContext
CRYPTSP.dll
CSP6Internal::CreateCatalogHttpClient
CurrencyCode
CurrencySymbol
CurrentApp.AppId
CurrentApp.GetAppPurchaseCampaignIdAsync
CurrentApp.GetAppReceiptAsync
CurrentApp.GetCustomerCollectionsIdAsync
CurrentApp.GetCustomerPurchaseIdAsync
CurrentApp.GetProductReceiptAsync
CurrentApp.GetUnfulfilledConsumablesAsync
CurrentApp.LicenseInformation
CurrentApp.LinkUri
CurrentApp.LoadListingInformationAsync
CurrentApp.ReportConsumableFulfillmentAsync
CurrentApp.ReportProductFulfillment
CurrentApp.RequestAppPurchaseAsync
CurrentApp.RequestProductPurchaseAsync
CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
CurrentApp.RequestProductPurchaseWithResultsAsync
CurrentEraTitleInfo::GetAppId
CurrentEraTitleInfo::GetProxyAppPid
CustomDeveloperData
CWSHttpHelper::AddTHAdditionalHeaders
CWSHttpHelper::AddTHAdditionalRequestHeader
CWSHttpHelper::FetchURL
CYWWSP
D$ 9D$
D$ Ph
D$ Ph@:
D$ PhxC
D$ Pj
D$ PjEh0
D$ PQ
D$ PSSSS
D$ PSV
D$ PSW
D$ PV
D$ SVW
D$$Ph
D$$Pj
D$$PQ
D$$PV
D$$QQVh
D$$t,
D$(;D$ 
D$(P2
D$(Ph
D$(PhHQ
D$(PhX
D$(PhX`
D$(Pj
D$(PQ
D$(PS
D$(PV
D$(SV
D$(SV3
D$,PQ
D$,PV
D$,QQj
D$,SQj
D$,YY9D$
D$/PW
D$@PQ
D$\PQ
D$\PS
D$\QQ
D$`98
D$`PV
D$<Pj
D$<PQ
D$<PV
D$0;D$4r
D$0P3
D$0Ph
D$0PhpF
D$0PjEh0
D$0PQ
D$0PV
D$0PW
D$4PQ
D$4PV
D$4WP
D$8;D$H
D$8;D$Tr
D$8Pj
D$8PV
D$8QQWh
D$DPQ
D$DPSV
D$DPV
D$dQQ
D$DSP
D$Hl5
D$HPQ
D$hPQQ
D$LPV
D$LPW
D$lSP
D$pPh
D$PPj
D$PPV
D$TPj
D$tPV
D$TPV
D$XSV
d/Zc1q
DataDownloaded callback failed
DebugBreak
DecodePointer
defaultValue
DelayLoadFailureHook
DeleteCriticalSection
DeleteFileA
DeleteFileW
Developer
Device
DeviceContext
DeviceFamily
deviceFamily
deviceMoid
deviceOemid
deviceScmid
devOfferId
DevOfferId
DisableThreadLibraryCalls
DisplayProductSearchResult
DisplayRank
DisplaySkuAvailabilities
DisplaySkuSearchResult
DllCanUnloadNow
DllGetActivationFactory
DllGetClassObject
DoDelete
DoHead
DoOptions
DoPatch
DoPost
DoPut
DPA_SortedInsertPtr failed on handle 0x%08x for %s:%d
dQVh|m
DumpListingToDebugger
DuplicateTokenEx
Durable
Duration
dwContext != 0
dwErrorCode != 0 ? HRESULT_FROM_WIN32(dwErrorCode) : ((HRESULT)0x80004005L)
DWordAdd(dwNeeded, 1, &cbSizeToAlloc)
dyAL~
E(SVW
e/X4V
E_NOT_SET
E0g031
E0O0T0q0
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_2010-07-06.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
EncodePointer
EndDate
EndOperation
EnterCriticalSection
Enterprise
entitlementFilters
entitlementId
Entry cannot have a Body Template: %s
Entry requires a Body Template: %s
en-US
eReceiptType
error
Error
ERROR
Error
Error Code
ErrorCode
ErrorLocation
ErrorMessage
ErrorMethod
EtwEventEnabled
EtwEventRegister
EtwEventSetInformation
EtwEventUnregister
EtwEventWrite
EtwEventWriteTransfer
EventActivityIdControl
EventData
EventWriteTransfer
EvtExportLog
Exception
Exception Details
ExpandEnvironmentStringsA
ExpandEnvironmentStringsW
expandSatisfyingItems
expiration
ExtendedData
ext-ms-win-appmodel-state-ext-l1-2-0.dll
ext-ms-win-core-licensemanager-l1-1-0
ext-ms-win-core-licensemanager-l1-1-0.dll
ext-ms-win-core-licensemanager-l1-1-1
ext-ms-win-core-licensemanager-l1-1-2
ext-ms-win-core-licensemanager-l1-1-2.dll
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-devmgmt-policy-l1-1-3
ext-ms-win-kernel32-package-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-3-0.dll
ext-ms-win-rtcore-ntuser-window-ext-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usermgr-l1-2-0
F$9^(t(
F$9^,u
f;F$u
f;F.u
f[0bv(Z
F5>}%
f9:t3
Failed
Failed to convert systemtime to filetime
Failed to find substitute value with key %s and no default value provided.
Failed to find substitute value with key %s!
Failed to get account from accounts vector
Failed to parse property '%s'
Failed to substitute value with key %s because we were given an invalid type!
FailFast
FallbackToDeviceAuth
false
FALSE
false && "AppInstallItem returned an unexpected InstallType!"
false && "Store service returned an unexpected enum!"
fCm;]
fg:SM
File Name
FileDescription
FileTimeToDosDateTime
FileTimeToLocalFileTime
FileTimeToSystemTime
FileVersion
FilterIAPs
FindClose
FindFirstFileA
FindFirstFileExA
FindNextFileA
FindResourceExW
FindWindowExW
Fl(,:
floor
FlushTrace for %s failed
FlushTraces
FlushTraceW
ForcePrompt
ForceRetailSandbox
FormatMessageW
FormatNameValuePairs
Found matching package for %s
Found update for package = %s
Foundation
FreeLibrary
FreeResource
FreeSid
FRtlQueryFeatureConfiguration
Fsq^V
FulfillmentType
Function
FWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreUninstallStorePackageResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreUninstallStorePackageResult *>,0>::DoWorkStub
G ;A0t(
G Ph8
G+ECz
G3Mc,
G4VVWP
gaming*.etl
GBAx(&[
GdPh0
get_AppId() invoked.
get_LicenseInformation() invoked.
get_LinkUri() invoked.
GetAppPurchaseCampaignIdAsync invoked.
GetAppReceiptAsync() invoked.
GetCallingProcessPackageFullName
GetContinuationToken
GetCurrencyFormatEx
GetCurrentPackageFullName
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetCustomerCollectionsIdAsync() invoked.
GetCustomerPurchaseIdAsync() invoked.
GetERAPackageFullNameByAumid
GetExitCodeProcess
GetExitCodeProcess failed
GetFileInformationByHandle
GetFileSize
GetForegroundWindow
GetFormattedPriceUsingCurrencyFormatter
GetGeoInfoW
GetHttpResponse
GetLastError
GetLastError()
GetLengthSid
GetLocaleInfoEx
GetLocalTime
GetModuleFileNameA
GetModuleHandleExA
GetModuleHandleExW
GetModuleHandleW
GetPackageFamilyNameFromToken
GetPackageFullName
GetPackageFullNameFromToken
GetPriceInfo
GetPriceInfoFromAvailability
GetProcAddress
GetProcessHeap
GetProcessId
GetProcessIdOfThread
GetProductReceiptAsync(%s) invoked.
GetPurchaseAppLaunchAumid
GetPurchaseAppPackageFamilyName
GetRequiredEkbFromContentId
GetRestrictedErrorInfo
GetStateFolder
GetSystemTime
GetSystemTimeAsFileTime
GetTempFileNameA
GetTempPath2W
GetTempPath2W failed
GetTempPathA
GetTickCount
GetTickCount64
GetTokenInformation
GetUnfulfilledConsumablesAsync() invoked.
GetUserDefaultLocaleName
GetUserGeoID
GetVersionExA
GetWindowTextW
GetWindowThreadProcessId
GlobalFree
Going to catalog again to find BigCatId: QueryCatalogForBigCatIdByPackageFullNameAndType
Going to catalog to find BigCatId: QueryCatalogForBigCatIdByPackageFullName
goldenBeneficiary
goldenBeneficiaryArray
Got event for item with Package Family Name %s after the events were unregistered.
H:O4ir%@
H0[Y0)!
Hardware
HasMorePages
HasPreviewCapability
HasTrial
HeapAlloc
HeapFree
HeapReAlloc
Height
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SIH
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters\DnsPolicyConfig
hModule != nullptr
HR: 0x%x
HRESULT_FROM_WIN32(1317L)
HResultOfOperation
hrInfo
HSTRING_UserFree
HSTRING_UserMarshal
HSTRING_UserSize
HSTRING_UserUnmarshal
HStringBufferWrapper::Promote
http%s://%s/%s
http:
https://
https://login.microsoft.com
https://login.windows.local
https://login.windows.net/common
https://onestore.microsoft.com
https://purchase.mp.microsoft.com
i_>iQJ
I_RpcBindingInqLocalClientPID
I0G1-0+
I8QWh
I'ae#
IAPReceiptType_App
IAPReceiptType_OneProduct
IAPUtils::BuildEntitlementFiltersJSON
IAPUtils::BuildStoreId
IAPUtils::CheckProductKinds
IAPUtils::CombineProductsAndCollectionsJson
IAPUtils::ConstructSlsUri
IAPUtils::CreateHttpClient
IAPUtils::CreateHttpClientWithAuthHeader
IAPUtils::CreateHttpClientWithAuthIfAvailable
IAPUtils::CreateUri
IAPUtils::GetDeviceContextId
IAPUtils::GetDeviceContextString
IAPUtils::GetDeviceIds
IAPUtils::GetFormattedPrice
IAPUtils::GetJsonFromURL
IAPUtils::GetJsonFromURLWithHttpClient
IAPUtils::GetLanguage
IAPUtils::GetLanguages
IAPUtils::GetLanguagesString
IAPUtils::GetTimeSpanDifference
IAPUtils::IsCallingProcessAppContainer
IAPUtils::ParseStoreId
IAPUtils::ParseTimeSpan
IAPUtils::ParseTimeSpan(timeString.Get(), &date)
IAPUtils::ParseUriSubstitutionTag
IAPUtils::PostJsonToURLWithHttpClient
IAPUtils::SetDateTime
IAPUtils::TimeSpanToString
IAsyncAction
IAsyncOperation`1
IAsyncOperation`1<Boolean>
IAsyncOperation`1<String>
IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
IAsyncOperation`1<Windows.UI.Popups.IUICommand>
IAsyncOperationWithProgress`2
IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
identityType
identityValue
IdType
iertutil.dll
IIDFromString
ImagePurpose
Images
ImpersonateLoggedOnUser
InAppOfferToken
inAppOfferToken
includeReceipt
includeRelationship
Index
InitialDuration
InitializeCriticalSection
InitializeCriticalSectionEx
InitializeSRWLock
InitOnceExecuteOnce
innererror
Installs to complete, continuing
InsufficientConsumeQuantity
InternalName
InternalStoreEndpointExtensionUrls
InvokedApi
InvokePurchaseFlow
iR{I<
isActive
IsDebuggerPresent
isDiscLicense
IsErrorPropagationEnabled
isOptional
IsRecurring
IsRpcServerCallOnLocalTransport
isTrial
IsTrial
isTrialOwnedByThisUser
itemCount
Items
items
j%h8E
j%hpB
J%n%H
j,hh?
j.Xf9
j:[f9
j;Xf9E
j;Zf;
j-_f;
j+Xf;
j+Zf;
j=h`B
J>f;O
jjjjjj
jQVh8T
jQWh8
Json document is missing a required field.
JSON_RESPONSE
JSON_RESPONSE(JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS+JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS4JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_MODAL_FLOW_SIZES
JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS
JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS
jsonArray->GetObjectAt(0, jsonElement.GetAddressOf())
jsonArray->GetObjectAt(i, jsonElement.GetAddressOf())
jsonArray->GetStringAt(i, text.GetAddressOf())
JsonHelpers::AppendObject
JsonHelpers::AppendString
JsonHelpers::GetArraySizeFromJsonArray
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count)
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &len)
JsonHelpers::GetNamedDateTime
JsonHelpers::ParseToJsonArray
JsonHelpers::ParseToJsonObject
JsonHelpers::RemoveAt
JsonHelpers::SetNamedArray
JsonHelpers::SetNamedBool
JsonHelpers::SetNamedDateTime
JsonHelpers::SetNamedNull
JsonHelpers::SetNamedNumber
JsonHelpers::SetNamedObject
JsonHelpers::SetNamedString
JsonHelpers::SetNamedTimeSpan
JsonHelpers::Stringify
JsonHelpers::Stringify(_response, jsonResponse)
JsonHelpers::Stringify(productsResultObject, pCombinedJson)
jsonRequest: %s
jsonResponse: %s
jsonValue->GetArray(jsonArray.GetAddressOf())
jsonValue->GetBoolean(&value)
jsonValue->GetNumber(&result)
jsonValue->GetNumber(&valueAsDouble)
jsonValue->GetObject(jsonObject.GetAddressOf())
jsonValue->GetString(string.GetAddressOf())
jsonValue->GetString(timeString.GetAddressOf())
jSXf;
jSXf9E
JTk_S/
juhPo
JvjqThN
j-Xf;F
j-Yf9L$8u
j-Zf;
k&B[7
K\!t$ P
K<9{(t'
kernelbase.dll
keybd_event
KeyIds
keywords
KnILk
L$ ;u
L$ Qh
L$ Qj
L$ QP
L$ QPh
L$ QPh@9
L$ QWP
L$ VW
L$$9L$
L$$QP
L$$QQ
L$$QRP
L$$QSQW
L$$SV
L$$u(j
L$(QP
L$(QPh
L$(QQVWQ
L$(QS
L$(QSP
L$(QVPhhX
L$(VW
L$,QhT*
L$,QP
L$,QS
L$,QSP
L$,QVVPj
L$,QWP
L$;QP
L$?QP
L$@Pj
L$@QP
L$|QP
L$<QVPQ
L$0QP
L$0QQVW
L$0QRP
L$0QVPh
L$0QVPh("
L$0VW
L$4^3
L$4_^[3
L$4CS
L$4Pj
L$4PW
L$4Qh
L$4Qj
L$4QP
L$4SV
L$7QP
L$8Qh
L$8Qhl5
L$8QP
L$8QPh
L$8QVPh
L$8QVPhX)
L$D_^[3
L$DQP
L$dQP
L$DQP
L$GQP
L$HCS
L$HQP
L$hQP
L$KQP
L$kQP
L$l_^[3
L$LQP
L$lQP
L$LQP
L$PQP
L$pQP
L$PQP
L$PQWVPhpY
L$pVP
L$'QP
L$RQP
L$SQP
L$TQP
L$VQP
L$WQP
L$XCS
L$XQP
L$xQP
L$XQRP
L$XQVPj
Language
languages
latencyMs
LCMapStringEx
LeaveCriticalSection
LegacyWindowsPhoneLicensingData
Legal_Policy_Statement
LegalCopyright
length >= (count * 2)
licensableSku
licensableStatus
License Info for app %s: (CV = %hs)
LicensingData
Line Number
LineNumber
LinkUriFormat
Listing Information (after filtering, CV = %hs):
ListPrice
LoadAddOnProductInfosAsync() invoked.
LoadListingInformationAsync() invoked.
LoadListingInformationByKeywordsAsync() invoked.
LoadListingInformationByProductIdsAsync() invoked.
LoadResource
LoadStringW
Local\SM0:%lu:%lu:%hs
LocalAlloc
locale
LocalFree
LocalizedProperties
localTicketReference
LockResource
LogHr
LogMessage
LogNt
LogSimpleMessage
LogStagedFeatureUsage
Lookup failed for user's ownership of the trial. isTrialOwnedByThisUser=%s
Lu`wup
M QRSP
m_bInitialized
m_productId.CopyTo(productId)
M0]0k0
Machine
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxCountPerPage, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxPageSize, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
MakeAndInitialize<StoreProductQueryResult>( &_results, _products, productKinds.Get(), ChkGetHr())
MakeAndInitialize<T>(&image, DEBUG_PARSER_PARAMETERS_ARGS jsonElement)
MakeAndInitialize<T>(obj.GetAddressOf(), DEBUG_PARSER_PARAMETERS_ARGS jsonObject)
malloc
MapVirtualKeyW
market
MarketProperties
maxItemsToRetrieve
maxItemsToRetrievePerPage
maxPageSize
mbi_ssl
MBI_SSL
mbstowcs_s
MDCollections
MDDisplayCatalog
MDGetAppReceiptsDesktop
MDGetAppReceiptsMobile
MDGetOneProductReceiptMobile
MDPurchase
Member Name
memcmp
memcpy
memcpy_s
memmove
memmove_s
memset
Message
Messages
Microsoft
Microsoft America Operations1&0$
Microsoft Code Signing PCA 2010
Microsoft Code Signing PCA 20100
Microsoft Corporation
Microsoft Corporation0
Microsoft Corporation1
Microsoft Corporation1%0#
Microsoft Corporation1&0$
Microsoft Corporation1(0&
Microsoft Corporation1200
Microsoft Enhanced RSA and AES Cryptographic Provider
Microsoft Store Runtime DLL
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft.StorePurchaseApp_8wekyb3d8bbwe
Microsoft.StorePurchaseApp_8wekyb3d8bbwe!App
Microsoft.Windows.ApplicationModel.Store.Telemetry
MicrosoftTelemetryAssertTriggeredUM
Microsoft-Windows-AppXDeploymentServer/Operational
Microsoft-Windows-AppXDeploymentServer-Operational.evtx
Microsoft-Windows-Store/Operational
Microsoft-Windows-Store-Operational.evtx
Microsoft-Windows-TWinUI/Operational
Microsoft-Windows-TWinUI-Operational.evtx
Microsoft-Windows-WindowsUpdateClient/Operational
Microsoft-Windows-WindowsUpdateClient-Operational.evtx
minATL$__a
minATL$__m
minATL$__r
minATL$__z
MinimumUserAge
Minute
mobilling.microsoft.com
MOBillingAuthenticationDomain
ModalFlow
ModalFlowSizes
modalManager->ShowForContractByAppID( purchaseAppUserModelId, StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), &experienceToken)
modalManagerAsUser->ShowForContractByAppIDAsUser( purchaseAppUserModelId, StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), userContextToken, &experienceToken)
Module Name
ModuleLoaded
moId=%s&oemId=%s&scmId=%s
Month
Moving %s to final state: %d
MSAHW1.0=
MS-CorrelationId
MS-CV
Msg:[%ws] 
MSIXVC
MS-RequestId
MS-SiteName
msvcrt.dll
ms-windows-store://signin
MultiByteToWideChar
MYF{m
N0L0J
N0W0b0
nameValuePairs || (cNameValuePairs == 0)
ncalrpc
NdrClientCall4
NdrDllCanUnloadNow
NdrDllGetClassObject
NdrOleAllocate
NdrOleFree
NdrStubForwardingFunction
networkError
NetworkError
neutral
NewQuantity
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
No contentInfo could be obtained from the preview license response.
No products found
No Sku Id could be obtained from the preview license response.
no-cache, max-age=0
not set
NotPurchased
ntdll.dll
NtQueryInformationProcess
NtQueryWnfStateData
NtUpdateWnfStateData
number
-N-x-
o;csk
O<VuKj
O0M0K
o6!U$
object
Oc7Wa
OEMDiscoveryTTL
OEMID
OmitAuthTokenPrefix
onecore\internal\onecore\priv_sdk\inc\ConstrainedImpersonationUtil.h
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\Staging.h
onecore\internal\shell\inc\AsyncOperationHelper.h
onecore\internal\shell\inc\asyncoperationhelper.h
onecore\internal\shell\inc\windowsinternalstring.h
onecore\shell\lib\calleridentity\calleridentity.cpp
onecoreuap\enduser\winstore\auth\lib\winstoreauth.cpp
onecoreuap\enduser\winstore\auth\lib\winstoreauthstatics.cpp
onecoreuap\enduser\winstore\lib\httprequest.cpp
onecoreuap\enduser\winstore\licensing\winrt\dllsrv\windows\log.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\acquirestorelicenseforoptionalpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBase.h
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBaseWithProgress.h
onecoreuap\enduser\winstore\licensing\winrt\lib\bulkhydrateoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseforoptionalpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\downloadandinstallstorepackagesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\findstoreproductforpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getassociatedstorequeueitemsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getconsumablebalanceremainingoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomercollectionsidoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomerpurchaseidoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getisanyskuinstalledoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getofflinelicensesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductspagedoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorequeueitemsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionpagedoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\iaputils.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\jsonhelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\ParserJSON.h
onecoreuap\enduser\winstore\licensing\winrt\lib\purchasedisplayproperties.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\registryhelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\reportconsumableoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\requestpurchaseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\requeststorerateandreviewoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\sendstorerequestresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeacquirelicenseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeapplicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeavailability.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecanacquirelicenseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecollectiondata.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeconsumableresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecontext.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StoreContext.h
onecoreuap\enduser\winstore\licensing\winrt\lib\storeimage.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingpagedqueryresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingqueryresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageinstalloptions.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackagelicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageLicense.h
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageUpdateManagerUtils.h
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageupdateresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeprice.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproduct.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductoptions.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepurchaseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemcompletedeventargs.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemstatus.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerateandreviewresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequesthelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequestoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storesku.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storesubscriptiondata.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeuninstallstorepackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storevideo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\stringhelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StringHelpers.h
onecoreuap\enduser\winstore\licensing\winrt\lib\StringifiedJsonValue.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\appinfo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\apppurchaseoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\backgroundtaskoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\catalogserviceproxy.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\clientprocessutils.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\collectionsserviceproxy.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\currentappserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\CurrentAppServer.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\external\inc\eratitleinfo.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getappandsupplementalstorepackageupdatesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextstorelistingforassociatedproducts.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextusercollection.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getunfulfilledconsumablesoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licenseinformationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactioninfo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactionresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\listinginformationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\loadlistingoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\messagedialoghelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\priceformat.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productidcache.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicensemap.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicenseserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlistingserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchasedisplaypropertiesserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchaseoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productreceiptretrievaloperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseeventargsredstone.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseresultsserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchasestahelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\PurchaseSTAHelper.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receipthelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receiptretrievaloperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\reportconsumablefulfillmentoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasebyskuidoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithdisplaypropertiesoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithresultsoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\rpchelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecommerceserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storeconfigurationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdItem.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdResponse.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecontextserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storehardwaremanufacturerinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StorePackageLicenseWnfWatcher.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepackageupdate.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewproductinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewpurchaseresultsserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewskuinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storequeueitem.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\tokenbrokercomponentuilauncher.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\trialownership.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\unfulfilledconsumableserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\urihelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\winrtapi.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\wscollector.cpp
onecoreuap\enduser\Winstore\licensing\wsinc\WSErrorUtils.h
onecoreuap\enduser\Winstore\licensing\wsinc\WSHttpHelper.h
onecoreuap\internal\base\inc\userawarecalleridentity.h
onecoreuap\shell\lib\activationevents\src\activatedeventargsbase.cpp
OneStoreAuthenticationDomain
OneStoreAuthenticationPolicy
onlineIdTicket
OPCO 
OpenProcess
OpenProcessToken
OpenSemaphoreW
OpenStateExplicit
OpenThread
OpenThreadToken
OPTIONAL
options
Order
orderId
OrderManagementData
organizations
OriginalFilename
OutgoingServiceRequest
OutputDebugStringW
Override ParentProductId
P/Z/y<
P6k?k
P9w u
P9w0u
package.As(&package4)
package4->get_SignatureKind(&signatureKind)
PackageFamilyName
PackageFamilyNameFromFullName
packageFullName = %s, appType = %d, appId = %s, appCatalogId = %s
packageId->get_FullName(optionalPfn.GetAddressOf())
packageIdentifier
PackageNameAndPublisherIdFromFamilyName
packages
packageType
pagingInfo
parametersAsJson
ParentProductId
parentProductId
ParseJSONStringToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonString.Get(), pObj, table)
ParseJSONToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonElement, pObj, table)
ParseSLSJson
PartB_Ms.Qos.OutgoingServiceRequest
PartB_Ms.Telemetry.Error
PathAppendA
PathAppendW
PathAppendW failed
PathCchAddExtension
PathCchAppendEx
PathCombineA
PathRemoveFileSpecA
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
pid != nullptr
Pj!hP
Pj"h 
Pj"hH
Pj#h8
Pj#hx
Pj)h8
Pj*h@
Pj*hh
Pj,h@D
Pj,hX
Pj.h 
Pj.h@
Pj;hP
Pj?hx
Pj\h(
Pj^h8
Pj+h8
Pj=hxi
Pj>h T
Pj>h`
Pj0h8
Pj0hh
Pj1h`
Pj1hH
Pj2h`
Pj3hh
Pj3hH
Pj3hP
Pj6h8
Pj7h`
Pj8h`
Pj8hhm
Pjah@
Pjah@#
Pjch`
Pjeh 
PjEh 
PjEh0
Pjgh`
Pj'h(
Pj-hH
PjHhP
PjhhX
Pj-hx
Pjih0g
PjKhh
PjKhP
PjLhH
PjlhX
PjMh0^
PjOh@
PjOhPZ
PjOhX.
PjQhX
PjRhHu
PjSh@t
PjVhx
PjVhXw
PjWh8
PjXh8
Pjyh0
PjYhP
PolicyManager_GetPolicyInt
PPPhh
PPPPPP
PPPPPPV
PPPPPPVW
PPPPPPW
PPPPSh
PPPPShPJ
PPPPVh
PPPPWh
PPPPWh|L
PPPPWhD?
ppszProxyList && ppszProxyByPass && pdwAccessType
PQh@D
PQhhh
PQQQQ
PQQSVW
pQWhX
PreferredSkuId
Preview license response did not have skuId. (CV = %hs)
Preview license response did not have skuId. (CV:%hs)
PreviewImage
previewStore
Price
PrimaryWebAccountId
Process Name
Product
productAddOns
ProductDescription
ProductId
productId
ProductIdCache::AddItem
ProductIdCache::ProductIdFromInAppOfferToken
ProductIdCache::ProductIdFromInAppOfferTokenTable
ProductIdCache::RefreshTableFromService
ProductIdCache::RuntimeClassInitialize
productIds
productIdsWithCommas
ProductKind
productKinds
ProductName
Products
productSkuIds
productStoreId
ProductTitle
ProductType
productTypes
ProductVersion
Prompt required, but not possible, cancel - canSilentlyDownload = %s, install = %s
Properties
protocolStatusCode
Proxy list = %s, Proxy bypass = %s, Proxy access type = %i
PRVA\
PSSSS
PSSSSSSSj
PSVQQ
pszAuthorizationHeader
pszFullUrl
pszServerName && pszUrl
Public
PublisherId
publisherUserId
Purchase
PurchaseMEM
PurchaseOperation
purchaseStatus
PVSSS
PVVVV
q\Q17
q}X>N
Q0f0r0
Q9K\u(
Q9KTu&
Q9KTu(
Q9Ktu(
Q9O\u+
QPh@%
QPh@M
QPhL[
QPWhXi
QQPPPPPP
QQPPPPPPV
QQPPPPPPW
QQQhh
QQQQPhPJ
QQQQQQ
QQQQQQVP
QQQQWh
QQRRRRPhPJ
QQSSSSSSV
QQSSSSSSVP
QQSSSSSSW
QQSV3
QQSVW
QQSVW3
QQSVWh
QQVW3
QRPh43
QRPh44
QRPh45
QRPhT2
QRPht2
QRPhT3
QRPht3
QRPhT4
QRPht4
QRPht5
QRPhT5
QSh 3
QSh,<
QSh`e
QSh`o
QSh<G
QSh0J
QSh0q
QSh4e
QSh8?
QSh8u
QShd_
QShDH
QShDN
QShH`
QShh<
QShl\
QShP@
QShpD
QShPf
QSht-
QShTH
QShtN
QSVPj
QSVW3
QSVWhtj
QSVWj@3
quantity
QuantityAvailable:
QueryPerformanceCounter
QueryTrace for %s failed
QueryTraceW
QueueUserWorkItem
QVh ~
QVh 0
QVh o
QVh s
QVh$,
QVh$P
QVh$Q
QVh$T
QVh(*
QVh(1
QVh(7
QVh(H
QVh(K
QVh(u
QVh,D
QVh,N
QVh@1
QVh@2
QVh@5
QVh@A
QVh@d
QVh@E
QVh@h
QVh@I
QVh@P
QVh@p
QVh@t
QVh\$
QVh\~
QVh\D
QVh`'
QVh`"
QVh`;
QVh`]
QVh`+
QVh`D
QVh`H
QVh`s
QVh`T
QVh`U
QVh|[
QVh|1
QVh|g
QVh|W
QVh<b
QVh<G
QVh0M
QVh0V
QVh4G
QVh8 
QVh8[
QVh8}
QVh84
QVh89
QVh8p
QVh8Q
QVh8u
QVhD]
QVhdb
QVhdJ
QVhDN
QVhdU
QVhH?
QVhH}
QVhh=
QVhHb
QVhhG
QVhHK
QVhHL
QVhHS
QVhHt
QVhHV
QVhHZ
QVhL,
QVhl]
QVhL>
QVhLg
QVhLM
QVhP"
QVhp*
QVhP{
QVhp<
QVhp>
QVhp0
QVhP4
QVhP5
QVhP8
QVhpA
QVhPG
QVhPK
QVhpl
QVhPo
QVhPu
QVhT\
QVhTe
QVhtN
QVhX 
QVhx>
QVhxA
QVhXc
QVhXe
QVhXO
QVhXt
QVhXU
QVVPVj
QWh I
QWh${
QWh$G
QWh$Z
QWh(\
QWh(W
QWh, 
QWh,z
QWh@A
QWh@Y
QWh\*
QWh`W
QWh`Z
QWh|;
QWh|f
QWh<d
QWh<G
QWh<J
QWh06
QWh0e
QWh0V
QWh8$
QWh8^
QWh8}
QWh8u
QWhd%
QWhdJ
QWhDn
QWhdX
QWhh!
QWhh]
QWhH|
QWhhG
QWhL_
QWhl4
QWhlG
QWhp*
QWhP`
QWhp{
QWhp|
QWhPB
QWhPG
QWhPu
QWhPy
QWhPz
QWhT 
QWhX[
QWhx\
QWhxA
QWhxK
QWhxX
QWPh`
QWVPj
r!f;E
r(SP3
R?)X|
R0\0n0
R0_0w0
r9C?,
RaiseException
RaiseFailFastException
ReadFile
realloc
Receipt
Receipt fetched: %hs
ReceiptBase64Encoded
ReceiptHelpers::CachePhoneReceiptForOffline
ReceiptHelpers::DeleteCachedPhoneReceipt
ReceiptHelpers::FetchDesktopReceipt
ReceiptHelpers::FetchPhoneReceipt
ReceiptHelpers::FetchReceipt
ReceiptHelpers::GetCachedPhoneReceipt
ReceiptHelpers::GetFormattedPrice
ReceiptHelpers::GetPackageLocalAppDataPath
ReceiptHelpers::GetPhoneReceiptFilepath
ReceiptHelpers::GetPublisherId
ReceiptHelpers::GetReceiptCacheFileName
ReceiptHelpers::GetReceiptCacheFolder
ReceiptHelpers::LicenseParseReceiptResponse
ReceiptResponse
RecurrencePolicy
RecurrencePrice
Redmond1
refreshConsumablesAsync
RefreshInternalState with refreshConsumables %d, license IsActive %d, IsTrial %d
RefreshLicenses
reg.exe process did not complete successfully. Exit Code: %d
RegCloseKey
RegDeleteKeyValueW
RegGetValueW
registry_DNSPolicy.txt
registry_SIH.txt
RegistryHelper::GetStringValue
RegistryHelper::SetQwordValue
RegistryHelper::SetStringValue
RegOpenCurrentUser
RegOpenKeyExW
RegSetKeyValueW
relatedProductId
RelatedProductId
RelatedProducts
relationshipType
RelationshipType
ReleaseLicense()
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
report.wer
ReportConsumableFulfillmentAsync(%s, %s) invoked.
ReportingEvents.log
ReportProductFulfillment(%s) invoked.
Request
Request 0x%08x failed, result %d
Request 0x%08x has machine %s and RID %s
Request Rate and Review Operation failed to get any status due to a purchase app not install error.
Request to [%s] failed with connection error. Retrying %d more times
RequestAppPurchaseAsync(%s) invoked.
requestKind
requestParams.authType == tickets[0].m_providerType
RequestProductPurchaseAsync(%s, %s) invoked.
RequestProductPurchaseByProductIdAndSkuIdAsync(%s, %s) invoked.
RequestProductPurchaseWithDisplayPropertiesAsync(%s, %s) invoked.
RequestProductPurchaseWithResultsAsync(%s) invoked.
RequestPurchase
RequireAuthToken
RequirePrivateStoreOnly
RequiresCapability
RequireValidLicense
ResetEvent
ResolveDelayLoadedAPI
resource
Response
Response buffer overflow
ResponseErrorMessage: %ws
responseSizeBytes
result != nullptr
ResumeWithFlags called for productId = %s, setFlags = %d, resetFlags = %d
RETAIL
RetrieveJsonResponseFromResources
ReturnHr
ReturnNt
RevertToSelf
rj+_f;
rKp~M2
RoActivateInstance
RoGetActivationFactory
RoGetAgileReference
RoGetMatchingRestrictedErrorInfo
RoInitialize
RoOriginateError
RoOriginateErrorW
RoReportFailedDelegate
RoTransformError
RoUninitialize
RpcBindingFromStringBindingW
RpcBindingSetAuthInfoExW
RpcHelpers::GetRpcHandle
RPCRT4.dll
RpcServerInqCallAttributesW
RpcStringBindingComposeW
RpcStringFreeW
RPhtq
RQVh`
rQWh|^
RSWVj
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlGetDeviceFamilyInfoEnum
RtlIsStateSeparationEnabled
RtlNotifyFeatureUsage
RtlNtStatusToDosError
RtlNtStatusToDosErrorNoTeb
RtlPublishWnfStateData
RtlQueryWnfStateData
RtlRegisterFeatureConfigurationChangeNotification
RtlSubscribeWnfStateChangeNotification
RtlUnregisterFeatureConfigurationChangeNotification
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlUnsubscribeWnfStateChangeNotification
RtlUpcaseUnicodeChar
RU#`[N
S _^[
S _^3
S$_^[
s(]yC@
S@Nc#
s[~PQ
S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157
S-1-15-2-778011547-1096124574-1799322564-3972718560-253206704-1472347756-15051174
S-1-15-2-903380885-3144618533-3326689759-1293738580-1356288723-3824823557-3342340653
s2SVW
Sandbox
SCMID
scPPhpg
sD+D$
SearchTitles
SearchTitleString
SearchTitleType
SellableBy
SendStoreRequest
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForParentProduct, cv.Get(), nullptr, nullptr, collectionsJsonString.GetAddressOf())
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
Server: %s, URL %s
ServerError
service::%s::%s
serviceTicket
SetEvent
SetFilePointer
SetForegroundWindow
SetLastError
SetRestrictedErrorInfo
SetThreadpoolTimer
SetUnhandledExceptionFilter
SHCreateMemStream
SHTaskPoolAllowThreadReuse
SHTaskPoolQueueTask
SignatureKind: %hs
SizeofResource
Sj+h0
SjfhH
Sjth8
SkipCapabilityCheckIfERA
skipCount
SkipForceAuthentication
SkuDescription
SkuDisplayRank
skuId
SkuId
SkuTitle
SkuType
skuType
Sleep
SleepConditionVariableSRW
SLS failed to initialize correctly, falling back to built in values, this may cause problems.
Software\Microsoft\Windows\CurrentVersion\Store
Software\Microsoft\Windows\CurrentVersion\Store\Configuration
Software\Microsoft\Windows\CurrentVersion\Store\ContentId
Software\Microsoft\Windows\CurrentVersion\Store\CurrentIdentity
Software\Microsoft\Windows\CurrentVersion\Store\MultiVariantConfig
Software\Microsoft\XboxLive
Software\Policies\Microsoft\WindowsStore
Source
spAppContentInfo->GetCatalogId(&productStoreId)
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(&spAppContentInfo))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(spApplicationContentInfo.GetAddressOf()))
spLicenseManager->RefreshLicenses(RefreshPolicy_NetworkStatusOnline)
sprintf_s
SSSSSSVP
Start callback failed
StartDate
status
Status done, remaining installs: %d
Store
Store service returned an unexpected enum: %hs
store.etl
StoreAADAccountId
storeAppInstallation
storeConfiguration
StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
StoreConfigurationServer::GetStoreLogDataAsync
StoreContentModifier
StoreContext.RequestDownloadAndInstallStorePackagesAsync
StoreContextServer::Initialize: packageFullName = %s, productStoreId = %s, isLicensed = %s, isAppContainer = %s
storeContextServer->ConsumeConsumable( _productId.Get(), _quantity, _trackingId, cv.GetHStringReference().Get(), jsonString.GetAddressOf())
storeContextServer->ReleaseStoreLicenseForOptionalPackage(optionalPfn.Get())
StoreEndpointExtensionUrls
StorefrontClient
StorefrontClientErrorTask
StorefrontClientExceptionTask
StorefrontClientInformationTask
StorefrontClientVerboseTask
StorefrontClientWarningTask
StoreId
storeId
storeIds
StoreInfoBuilders::BuildStoreAppInfo
storeLicenseManagement
StoreOperational.etl
storeOptionalPackageInstallManagement
StorePackageUpdateManagerUtils::StorePackageUpdateStatusEquals::operator ()
StorePreview.LoadAddOnProductInfosAsync
StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
StorePurchaseApp
StorePurchaseAppMessage
strchr
string
StringFileInfo
StringFromGUID2
StringHelpers::DecodeBase64
StringHelpers::SplitString
StringHelpers::TrimEnds
StringifiedJsonValue::GetStringifiedValue
StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, FALSE)
strncpy_s
strrchr
strtol
Succeeded
succeeded
success
SVPh@
SVSPSj
SVWh$
sW/Zl
SWVPh
System
SYSTEM\CurrentControlSet\Control\SystemInformation
SystemManufacturer
SystemProductName
SystemTimeToFileTime
t"Phx
t$ Ph4!
T$ PPPPPPV
t$ PV
t$ Vj
T$$;]
T$$;E
t$$h|L
T$$hP
T$(;T$,
T$(;T$8
T$(9T$,
T$(j:Yf9
T$(PPPPPPS
T$(QQ
T$(QQQQPh
T$(QQQQQQP
T$(QQQQSh
T$(QQQQWh
t$,QQ
T$,RQ
T$@PPPPPPV
T$@QQQQWh|L
T$@QQQQWhD?
t$@WS
T$<Zf;
t$0h|L
T$0PPPPPPW
T$0PPPPWh|L
T$0QQj
T$0QQQQPh
T$0QQQQQQP
T$0QQQQWh|L
T$0QQV
T$49L$@
t$4Pj(h
t$4SWVPh
t$4VP
t$4WP
T$8;T$P
T$89T$P
T$8PPPPVh
t$8QP
T$8QQPh
T$8QQQh
T$8QQQQQQP
T$pRQ
T$X;T$D
t$X9T$D
t\j;V
t+9O(t&
T0d0r0
t1SV3
targetUri
tCf;}
TEMPx
TerminateProcess
text/xml
Thales TSS ESN:DD8C-E337-2FAE1%0#
The license for the application is missing information needed to perform Store operations. If you side-loaded the application, uninstall the application and download it from the Store first to get the Store license associated with the application.
There is no connection profile
There were items in the collection, however iterator is pointing at the end of the collection...
This function is not supported, all calls should now use StoreContextServer::GetAppAndOptionalStorePackageUpdates
This function is not supported, all calls should now use StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadStorePackageUpdates
This function must be called from a UI thread
This request kind (%d) is invalid or not supported on this release. Request Entry: %s
ti9\$
Timer expired, triggering state refresh
TotalResultCount
tP!|$
trackingId
transactionId
Translation
trialTimeRemaining
TrialTimeRemaining
trialUniqueId
Trying to remove non-store package %s
Trying to remove package %s that isn't installed
Trying to remove package %s that isn't related to the calling app
tw9^,t
twinapi.appcore.dll
u"QSh
u#hPF
u$QWht
u$WSQ
u)QWh(5
u/9wHu*h
u@PPW
u0QSh
U0S0Q
u6ipo
uEA-)
u'h0A
uhm.d
UMgrGetConstrainedUserToken
UMgrOpenProcessHandleForAccess
UMgrOpenProcessTokenForQuery
UMgrQueryUserContext
UMgrQueryUserToken
Unable to show consent dialog
Unfulfilled Consumables for %s (CV = %hs):
UnhandledExceptionFilter
Units
UnitType
UniversalStoreInApp
Unknown
UNKWN
UnmanagedConsumable
UnpackHStringIIterable
Uo~9@D
updated
UpdateDownloadLimit
u'QSh
u'QVh
u'QWh
URIBufferMaxSize
UriHelper::GetUri
UriHelper::GetUriWithPath
UriHelper::GetUriWithPathAndParameters
UriHelperInternal::GetUriEx
UriHelperInternal::GetUriString
UriHelperInternal::GetUriWithPathAndParametersEx
UriHelperInternal::InitOnceCallback
UriHelperV7::_FindUriWithIndex
UriHelperV7::_GetRawStringFromOS
UriHelperV7::_GetRawStringFromSLS
UriHelperV7::GetIndexedEntry
UriHelperV7::GetRawString
UrlEscapeW
UseAuthIfAvailable
UseBackgroundTask
UsePromptSettings
User consent required, cancel = %s
User content required, cancel = %s
User content required, cancel = %s, canSilentlyDownload = %s, install = %s
user.auth.xboxlive.com
UserId
UserTokenTypes
UuidCreate
UuidFromStringW
uW97t*h
UY7i*
V:)NM
V0h0v0
v6.0/beneficiaries/me/keys
v6.0/collections/consume
v6.0/collections/query
v6.0/users/me/keys
v6/products/{productId}?market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=PackageFamilyName&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=ProductSearchApps&market={market}&languages={languages}&addOnParent={productId}&fieldsTemplate=Full{platformDependencyNameParam}
v6/skus?rank=ContentId&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
v9f;}
Valid
VALID
validityType
Value
VarFileInfo
Vector<HSTRING>::Make(vector.GetAddressOf())
Vector<T*>::Make(vector.GetAddressOf())
vector->Append(image.Get())
vector->Append(text.Get())
Verbose
VerifyCapability
version
Version
VideoPurpose
Videos
vO,8o
VPhHf
VPhp7
VPj@Z
VQVh|R
VS_VERSION_INFO
VSPQh
vv(F0s
VVVVVV
VWjbZ
VWjkZ
VWu$Q
VWu5j
w@t*h
w\_^[
WaitForCompletion
WaitForMultipleObjects returned %u
WaitForMultipleObjectsEx
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
Waiting for installs to complete
WakeAllConditionVariable
WAM HR: 0x%x
Warning
Washington1
wcschr
wcscpy_s
wcscspn
wcsrchr
wcsstr
wcstod
wcstombs
wcstombs_s
wcstoul
webservices.dll
WebTokenRequestStatus: ProviderError
WebTokenRequestStatus: UserInteractionRequired
WEVT_TEMPLATE
wevtapi.dll
Width
WilError_03
WilFailureNotifyWatchers
WilStaging_02
win:Error
win:Info
win:Informational
win:Verbose
win:Warning
win32
win8xappx
Windows
Windows Store/1.0
Windows.ApplicationModel.AppService.AppServiceConnection
Windows.ApplicationModel.Core.CoreApplication
Windows.ApplicationModel.Store.CurrentApp
Windows.ApplicationModel.Store.CurrentApp.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentApp.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentApp.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentApp.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReloadSimulatorAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.dll
Windows.ApplicationModel.Store.Internal.AuthenticationExtension
Windows.ApplicationModel.Store.Internal.AuthenticationExtension.ShowChallengeForUserAsync
Windows.ApplicationModel.Store.Internal.IMessageDialogHelper2.ShowDialogWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetProductReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.StoreCommerce
Windows.ApplicationModel.Store.LicenseInformation
Windows.ApplicationModel.Store.LicenseManagement.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.GetSatisfactionInfosAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.RefreshLicensesAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult
Windows.ApplicationModel.Store.LicenseManagement.RefreshLicensesAsync
Windows.ApplicationModel.Store.ListingInformation
Windows.ApplicationModel.Store.pdb
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions
Windows.ApplicationModel.Store.Preview.StoreConfiguration
Windows.ApplicationModel.Store.Preview.StoreConfiguration.FilterUnsupportedSystemFeaturesAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.GetStoreLogDataAsync
Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo
Windows.ApplicationModel.Store.Preview.StorePreview
Windows.ApplicationModel.Store.Preview.StorePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Preview.StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo
Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAndWebAccountAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAsync
Windows.ApplicationModel.Store.ProductLicense
Windows.ApplicationModel.Store.ProductListing
Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
Windows.ApplicationModel.Store.PurchaseResults
Windows.ApplicationModel.Store.UnfulfilledConsumable
Windows.AppointmentDataProvider
Windows.AppointmentsProvider.AddAppointment
Windows.AppointmentsProvider.RemoveAppointment
Windows.AppointmentsProvider.ReplaceAppointment
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.AppointmentsProvider.ShowTimeFrame
Windows.AppService
Windows.AppUriHandler
Windows.BackgroundTasks
Windows.BarcodeScannerPreviewProvider
Windows.BarcodeScannerProvider
Windows.CachedFileUpdater
Windows.CameraSettings
Windows.CommandLineLaunch
Windows.ComponentUI
Windows.Contact.Call
Windows.Contact.Map
Windows.Contact.Message
Windows.Contact.Post
Windows.Contact.VideoCall
Windows.ContactDataProvider
Windows.ContactPanel
Windows.ContactPicker
Windows.ContactsProvider.AddContact
Windows.ContactsProvider.ShowContact
Windows.Data.Json.JsonArray
Windows.Data.Json.JsonObject
Windows.Data.Json.JsonValue
Windows.Data.Xml.Dom.XmlDocument
Windows.Device
Windows.DialProtocol
Windows.EmailDataProvider
Windows.File
Windows.FileOpenPicker
Windows.FileSavePicker
Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>
Windows.Foundation.AsyncOperationCompletedHandler`1<String>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IIterator`1<Object>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMap`2<String, String>
Windows.Foundation.Collections.IMap`2<String, UInt8>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMapView`2<String, UInt8>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Object>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVectorView`1<Object>
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.ValueSet
Windows.Foundation.Diagnostics.AsyncCausalityTracer
Windows.Foundation.IAsyncAction
Windows.Foundation.IAsyncOperation`1<Boolean>
Windows.Foundation.IAsyncOperation`1<String>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.IReference`1<UInt32>
Windows.Foundation.PropertyValue
Windows.Foundation.Uri
Windows.Globalization.NumberFormatting.CurrencyFormatter
Windows.Internal.FilePickerExperience
Windows.Internal.Security.Authentication.Web.TokenBrokerInternal
Windows.Internal.Security.WebAuthentication.AuthenticationManager
Windows.Internal.Shell.ModalExperience.ModalExperienceManager
Windows.Internal.Shell.ModalExperience.ModalExperienceOptions
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.PackageResourceResolver
Windows.Internal.StateRepository.TargetDeviceFamily
Windows.Internal.StateRepository.User
Windows.Launch
windows.lockScreen
windows.LockScreenCall
Windows.LockScreenComponent
Windows.Management.Deployment.PackageManager
Windows.Networking.Connectivity.NetworkInformation
Windows.OopWebView
Windows.PeoplePane
Windows.PersonalAssistant.Launch
Windows.PhoneCallActivation
Windows.PosPaymentConnector
Windows.PreInstalledConfigTask
Windows.Print3DWorkflow
Windows.PrintSupportExtension
Windows.PrintSupportWorkflow
Windows.PrintTaskSettings
Windows.PrintWorkflowBackgroundTask
Windows.PrintWorkflowForegroundTask
Windows.Protocol
Windows.RestrictedLaunch
Windows.Search
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Security.Authentication.Web.Core.WebTokenRequest
Windows.Security.Cryptography.CryptographicBuffer
Windows.Services.Store.Internal.GetNextStoreProductOperation
Windows.Services.Store.Internal.IStoreContextServer.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.Internal.StoreContentIdKeyIdItem
Windows.Services.Store.Internal.StoreContentIdKeyIdResponse
Windows.Services.Store.Internal.StoreContextCallerData
Windows.Services.Store.Internal.StoreContextServer
Windows.Services.Store.StoreAcquireLicenseResult
Windows.Services.Store.StoreAppLicense
Windows.Services.Store.StoreAvailability
Windows.Services.Store.StoreAvailability.RequestPurchaseAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreCanAcquireLicenseResult
Windows.Services.Store.StoreCollectionData
Windows.Services.Store.StoreConsumableResult
Windows.Services.Store.StoreContext
Windows.Services.Store.StoreContext.AcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.DownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.FindStoreProductForPackageAsync
Windows.Services.Store.StoreContext.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.GetAppLicenseAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsWithPagingAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetConsumableBalanceRemainingAsync
Windows.Services.Store.StoreContext.GetCustomerCollectionsIdAsync
Windows.Services.Store.StoreContext.GetCustomerPurchaseIdAsync
Windows.Services.Store.StoreContext.GetStoreProductForCurrentAppAsync
Windows.Services.Store.StoreContext.GetStoreProductsAsync
Windows.Services.Store.StoreContext.GetStoreProductsWithOptionsAsync
Windows.Services.Store.StoreContext.GetStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetUserCollectionAsync
Windows.Services.Store.StoreContext.GetUserCollectionWithPagingAsync
Windows.Services.Store.StoreContext.ReportConsumableFulfillmentAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestPurchaseAsync
Windows.Services.Store.StoreContext.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreContext.RequestRateAndReviewAppAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.TrySilentDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.UninstallStorePackageAsync
Windows.Services.Store.StoreContext.UninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreImage
Windows.Services.Store.StoreLicense
Windows.Services.Store.StorePackageInstallOptions
Windows.Services.Store.StorePackageLicense
Windows.Services.Store.StorePackageUpdate
Windows.Services.Store.StorePackageUpdateResult
Windows.Services.Store.StorePrice
Windows.Services.Store.StoreProduct
Windows.Services.Store.StoreProduct.GetIsAnySkuInstalledAsync
Windows.Services.Store.StoreProduct.RequestPurchaseAsync
Windows.Services.Store.StoreProduct.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreProductOptions
Windows.Services.Store.StoreProductPagedQueryResult
Windows.Services.Store.StoreProductPagedQueryResult.GetNextAsync
Windows.Services.Store.StoreProductQueryResult
Windows.Services.Store.StoreProductResult
Windows.Services.Store.StorePurchaseProperties
Windows.Services.Store.StorePurchaseResult
Windows.Services.Store.StoreQueueItem
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
Windows.Services.Store.StoreQueueItemCompletedEventArgs
Windows.Services.Store.StoreQueueItemStatus
Windows.Services.Store.StoreRateAndReviewResult
Windows.Services.Store.StoreRequestHelper
Windows.Services.Store.StoreRequestHelper.SendRequestAsync
Windows.Services.Store.StoreSendRequestResult
Windows.Services.Store.StoreSku
Windows.Services.Store.StoreSku.GetIsInstalledAsync
Windows.Services.Store.StoreSku.RequestPurchaseAsync
Windows.Services.Store.StoreSku.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreSubscriptionInfo
Windows.Services.Store.StoreUninstallStorePackageResult
Windows.Services.Store.StoreVideo
Windows.ShareTarget
Windows.StartupTask
Windows.Storage.Streams.DataReader
Windows.Storage.Streams.RandomAccessStreamReference
Windows.System.Internal.UserManager
Windows.System.Launcher
Windows.System.Profile.AnalyticsInfo
Windows.System.UserProfile.GlobalizationPreferences
Windows.UI.Core.CoreWindow
Windows.UI.Popups.MessageDialog
Windows.UI.Popups.UICommand
Windows.UpdateTask
Windows.UserDataAccountsProvider
Windows.UserDataTaskDataProvider
Windows.VoiceCommand
Windows.Web.Http.Filters.HttpBaseProtocolFilter
Windows.Web.Http.HttpClient
Windows.Web.Http.HttpMethod
Windows.Web.Http.HttpRequestMessage
Windows.Web.Http.HttpStringContent
Windows.WebAccountProvider
Windows.Xbox.ApplicationModel.State.Internal.StateHelperCache
Windows.Xbox.System.Internal.Deployment.AvailablePackageProvider
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<bool>,struct Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::ListingInformation *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::ListingInformation *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::PurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::PurchaseResults *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAcquireLicenseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAppLicense *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAppLicense *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreConsumableResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreConsumableResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductPagedQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductPagedQueryResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductQueryResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StorePurchaseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StorePurchaseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreRateAndReviewResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreRateAndReviewResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreSendRequestResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreSendRequestResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<enum Windows::ApplicationModel::Store::FulfillmentResult>,struct Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::ApplicationModel::Store::FulfillmentResult>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::CProductLicenseMap::First
Windows::ApplicationModel::Store::CProductLicenseMap::get_Size
Windows::ApplicationModel::Store::CProductLicenseMap::GetView
Windows::ApplicationModel::Store::CProductLicenseMap::HasKey
Windows::ApplicationModel::Store::CProductLicenseMap::Initialize
Windows::ApplicationModel::Store::CProductLicenseMap::Lookup
Windows::ApplicationModel::Store::CProductLicenseMap::Split
Windows::ApplicationModel::Store::CurrentAppFactory::get_AppId
Windows::ApplicationModel::Store::CurrentAppFactory::get_LicenseInformation
Windows::ApplicationModel::Store::CurrentAppFactory::get_LinkUri
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppReceiptAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppWindowHandle
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerPurchaseIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetProductReceiptAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetRuntimeClassName
Windows::ApplicationModel::Store::CurrentAppFactory::GetStoreCommerce
Windows::ApplicationModel::Store::CurrentAppFactory::GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::Initialize
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByKeywordsAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByProductIdsAsync
Windows::ApplicationModel::Store::CurrentAppFactory::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::CurrentAppFactory::ReportProductFulfillment
Windows::ApplicationModel::Store::CurrentAppFactory::RequestAppPurchaseAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithResultsAsync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::_CreateUnfulfilledConsumable
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::DoWork
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetResults
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands::<lambda_f504bdfa87e9e81d60fb40cb23fa8c33>::operator ()
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CheckDialogResults
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommand
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommandWithInt32Id
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::get_ContextString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetAppName
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetText
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::LoadFormattedString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::RuntimeClassInitialize
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialog
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialogWithResultsAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppCatalogId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerPurchaseIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetExclusiveLockForProduct
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLicenseInformation
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLinkUri
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetProductReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::Initialize
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::InitializeIdsFromLicense
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfos
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadListingInformationAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentSync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestAppPurchaseAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseByProductIdAndSkuIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithResultsAsync
Windows::ApplicationModel::Store::LicenseInformationServer::_TimerCallback
Windows::ApplicationModel::Store::LicenseInformationServer::add_LicenseChanged
Windows::ApplicationModel::Store::LicenseInformationServer::CheckForChanges
Windows::ApplicationModel::Store::LicenseInformationServer::CreateInstance
Windows::ApplicationModel::Store::LicenseInformationServer::DumpLicensesToDebugger
Windows::ApplicationModel::Store::LicenseInformationServer::get_ExpirationDate
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsActive
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsTrial
Windows::ApplicationModel::Store::LicenseInformationServer::get_ProductLicenses
Windows::ApplicationModel::Store::LicenseInformationServer::GetProductId
Windows::ApplicationModel::Store::LicenseInformationServer::Initialize
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshConsumables
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshInternalState
Windows::ApplicationModel::Store::LicenseInformationServer::remove_LicenseChanged
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_IsSatisfied
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByDevice
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByInstallMedia
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByOpenLicense
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByPass
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedBySignedInUser
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByTrial
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_ExtendedError
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_LicenseSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_SkuId
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync::<lambda_e1db209f168b3657ea73613545218e9e>::operator ()
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetALM
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync::<lambda_9d3e6b609609b628bd3a08f8252fb043>::operator ()
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync::<lambda_39b8ab18eb768c77ef40d9104d3429ec>::operator ()
Windows::ApplicationModel::Store::ListingInformationServer::get_AgeRating
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrencyCode
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrentMarket
Windows::ApplicationModel::Store::ListingInformationServer::get_Description
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedPrice
Windows::ApplicationModel::Store::ListingInformationServer::get_IsOnSale
Windows::ApplicationModel::Store::ListingInformationServer::get_Name
Windows::ApplicationModel::Store::ListingInformationServer::get_ProductListings
Windows::ApplicationModel::Store::ListingInformationServer::get_SaleEndDate
Windows::ApplicationModel::Store::ListingInformationServer::Initialize
Windows::ApplicationModel::Store::LoadListingOperationServer::DoWork
Windows::ApplicationModel::Store::LoadListingOperationServer::GetResults
Windows::ApplicationModel::Store::LoadListingOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::DoWork
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::GetResults
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::AskWuWhichHardwareIsAvailable
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::BuildKnownFeatureAndGuidArrays
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedFeaturesInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync::<lambda_9311a7b729964ab4ab27616362cd54ed>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_HardwareManufacturerInfo
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_PurchasePromptingPolicy
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetHardwareManufacturerInfoInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetPurchasePromptingPolicyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync::<lambda_067cf6a520b1a8707ec348e80e22e6be>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccount
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccountForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToDesktopSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToStartSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToTaskbarSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktop
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktopForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::put_PurchasePromptingPolicy
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PutPurchasePromptingPolicyInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfiguration
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfigurationInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetPurchasePromptingPolicyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfiguration
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfigurationInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnly
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnlyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::StoreConfigurationServer
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_StoreContentModifierId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_StoreContentModifierId
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::GetStoreCommerce
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::RequestProductPurchaseByProductIdAndSkuIdAsync
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductType
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_SkuInfoList
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Title
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResultsServer::get_ProductPurchaseStatus
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CurrencyCode
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CustomDeveloperData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ExtendedData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_FormattedListPrice
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuType
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Title
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::Initialize
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAndWebAccountAsync
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync
Windows::ApplicationModel::Store::ProductLicenseServer::get_ExpirationDate
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsActive
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsConsumable
Windows::ApplicationModel::Store::ProductLicenseServer::get_ProductId
Windows::ApplicationModel::Store::ProductLicenseServer::Initialize
Windows::ApplicationModel::Store::ProductLicenseServer::InitializeInvalid
Windows::ApplicationModel::Store::ProductListingServer::get_CurrencyCode
Windows::ApplicationModel::Store::ProductListingServer::get_Description
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedPrice
Windows::ApplicationModel::Store::ProductListingServer::get_ImageUri
Windows::ApplicationModel::Store::ProductListingServer::get_IsOnSale
Windows::ApplicationModel::Store::ProductListingServer::get_Keywords
Windows::ApplicationModel::Store::ProductListingServer::get_Name
Windows::ApplicationModel::Store::ProductListingServer::get_ProductId
Windows::ApplicationModel::Store::ProductListingServer::get_ProductType
Windows::ApplicationModel::Store::ProductListingServer::get_SaleEndDate
Windows::ApplicationModel::Store::ProductListingServer::get_Tag
Windows::ApplicationModel::Store::ProductListingServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::ActivateInstance
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::CreateProductPurchaseDisplayProperties
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Image
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Name
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Image
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Name
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::GetResults
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::PurchaseResultsServer::get_OfferId
Windows::ApplicationModel::Store::PurchaseResultsServer::get_ReceiptXml
Windows::ApplicationModel::Store::PurchaseResultsServer::get_Status
Windows::ApplicationModel::Store::PurchaseResultsServer::get_TransactionId
Windows::ApplicationModel::Store::PurchaseResultsServer::Initialize
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::GetResults
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::DoWork
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::GetResults
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_OfferId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_ProductId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_TransactionId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::Initialize
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCapacity
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCount
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_Initialize
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::AsyncOperationWithProgressBase<struct Windows::Foundation::IAsyncOperationWithProgress<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationProgressHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,0>::DoWorkStub
Windows::Services::Store::BackgroundTaskOperation::ConvertJsonObjectToPropertySet
Windows::Services::Store::BackgroundTaskOperation::ConvertPropertySetToJsonObject
Windows::Services::Store::BackgroundTaskOperation::DoWork
Windows::Services::Store::BackgroundTaskOperation::GetResults
Windows::Services::Store::BackgroundTaskOperation::RuntimeClassInitialize
Windows::Services::Store::BulkHydrateOperation::DoWork
Windows::Services::Store::BulkHydrateOperation::GetResults
Windows::Services::Store::BulkHydrateOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseOperation::RuntimeClassInitialize
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_AttachAllEventHandlers
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearAllEventHandlers
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearEventHandler
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_Initialize
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshAllStatusesAndOverallState
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshStatus
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::DoWork
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::GetResults
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::RuntimeClassInitialize
Windows::Services::Store::FindStoreProductForPackageOperation::DoWork
Windows::Services::Store::FindStoreProductForPackageOperation::GetResults
Windows::Services::Store::FindStoreProductForPackageOperation::RuntimeClassInitialize
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::DoWork
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::GetResults
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::BeginWork
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetConsumableBalanceRemainingOperation::DoWork
Windows::Services::Store::GetConsumableBalanceRemainingOperation::GetResults
Windows::Services::Store::GetConsumableBalanceRemainingOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerCollectionsIdOperation::DoWork
Windows::Services::Store::GetCustomerCollectionsIdOperation::GetResults
Windows::Services::Store::GetCustomerCollectionsIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerPurchaseIdOperation::DoWork
Windows::Services::Store::GetCustomerPurchaseIdOperation::GetResults
Windows::Services::Store::GetCustomerPurchaseIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetIsAnySkuInstalledOperation::DoWork
Windows::Services::Store::GetIsAnySkuInstalledOperation::GetResults
Windows::Services::Store::GetIsAnySkuInstalledOperation::RuntimeClassInitialize
Windows::Services::Store::GetOfflineLicensesOperation::DoWork
Windows::Services::Store::GetOfflineLicensesOperation::GetResults
Windows::Services::Store::GetOfflineLicensesOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreProductOperation::DoWork
Windows::Services::Store::GetStoreProductOperation::GetResults
Windows::Services::Store::GetStoreProductOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionOperation::DoWork
Windows::Services::Store::GetUserCollectionOperation::GetResults
Windows::Services::Store::GetUserCollectionOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionPagedOperation::DoWork
Windows::Services::Store::GetUserCollectionPagedOperation::GetResults
Windows::Services::Store::GetUserCollectionPagedOperation::RuntimeClassInitialize
Windows::Services::Store::Internal::ConvertPUIDFromDecToHex
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::GetNextAsync
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::RuntimeClassInitialize
Windows::Services::Store::Internal::GetNextUserCollection::GetNextAsync
Windows::Services::Store::Internal::GetNextUserCollection::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ContentIds
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_KeyIds
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ProductId
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::get_Items
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContextServer::_ForceRefreshLicensesProc
Windows::Services::Store::Internal::StoreContextServer::_GetAppInstallManager
Windows::Services::Store::Internal::StoreContextServer::_GetStoreQueueItems
Windows::Services::Store::Internal::StoreContextServer::_LicenseChanged
Windows::Services::Store::Internal::StoreContextServer::_LoadLicenseJson
Windows::Services::Store::Internal::StoreContextServer::_MakeDefaultLicenseResponse
Windows::Services::Store::Internal::StoreContextServer::_ParseLicenseInstance
Windows::Services::Store::Internal::StoreContextServer::_RequestPurchase
Windows::Services::Store::Internal::StoreContextServer::_RetrieveHWNDFromCallerData
Windows::Services::Store::Internal::StoreContextServer::AcquireStoreLicenseForOptionalPackage
Windows::Services::Store::Internal::StoreContextServer::BackgroundPurchaseDialogTask
Windows::Services::Store::Internal::StoreContextServer::CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::CaptureStoreContextCallerData
Windows::Services::Store::Internal::StoreContextServer::ConsumeConsumable
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackages
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::FocusOnWindow
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::GetAssociatedStoreProducts
Windows::Services::Store::Internal::StoreContextServer::GetConsumableBalanceRemaining
Windows::Services::Store::Internal::StoreContextServer::GetContentIdKeyIdsForProductIds
Windows::Services::Store::Internal::StoreContextServer::GetCustomerCollectionsId
Windows::Services::Store::Internal::StoreContextServer::GetCustomerPurchaseId
Windows::Services::Store::Internal::StoreContextServer::GetLinkUri
Windows::Services::Store::Internal::StoreContextServer::GetOfflineLicenses
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForPackage
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForStoreId
Windows::Services::Store::Internal::StoreContextServer::GetProduct
Windows::Services::Store::Internal::StoreContextServer::GetProductForPackage
Windows::Services::Store::Internal::StoreContextServer::GetProducts
Windows::Services::Store::Internal::StoreContextServer::GetProductsByKinds
Windows::Services::Store::Internal::StoreContextServer::GetProductsWithOptions
Windows::Services::Store::Internal::StoreContextServer::GetUserCollection
Windows::Services::Store::Internal::StoreContextServer::Initialize
Windows::Services::Store::Internal::StoreContextServer::IsStoreProductInstalled
Windows::Services::Store::Internal::StoreContextServer::ReleaseStoreLicenseForOptionalPackage
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequest
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequestWithUris
Windows::Services::Store::Internal::StoreContextServer::SetInstallOrderForAssociatedStoreQueueItems
Windows::Services::Store::Internal::StoreContextServer::UninstallStorePackage
Windows::Services::Store::Internal::StoreContextServer::UserConsentedToUninstall
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::AddOptionalPackageToWatch
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::Initialize
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::OnEventCallback
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::RemoveOptionalPackageToWatch
Windows::Services::Store::JsonParser::ParseArrayOfOne
Windows::Services::Store::JsonParser::ParseArrayToVector
Windows::Services::Store::JsonParser::ParseArrayToVectorOfHSTRING
Windows::Services::Store::JsonParser::ParseBoolean
Windows::Services::Store::JsonParser::ParseComPtr
Windows::Services::Store::JsonParser::ParseDate
Windows::Services::Store::JsonParser::ParseDouble
Windows::Services::Store::JsonParser::ParseInteger
Windows::Services::Store::JsonParser::ParseJSONStringToObject
Windows::Services::Store::JsonParser::ParseJSONToObject
Windows::Services::Store::JsonParser::ParseString
Windows::Services::Store::JsonParser::ParseTimeSpan
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonRequest
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::put_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::RuntimeClassInitialize
Windows::Services::Store::PurchaseEventArgsRedstone::SetSize
Windows::Services::Store::PurchaseOperation::_BuildModalExperienceOptions
Windows::Services::Store::PurchaseOperation::_FillTheRequestWithRequiredParameters
Windows::Services::Store::PurchaseOperation::_FirePurchaseTelemetry
Windows::Services::Store::PurchaseOperation::_OnModalExperienceEvent
Windows::Services::Store::PurchaseOperation::_Purchase
Windows::Services::Store::PurchaseOperation::DoWork
Windows::Services::Store::PurchaseOperation::GetResults
Windows::Services::Store::PurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::ReportConsumableOperation::DoWork
Windows::Services::Store::ReportConsumableOperation::GetResults
Windows::Services::Store::ReportConsumableOperation::RuntimeClassInitialize
Windows::Services::Store::RequestPurchaseOperation::DoWork
Windows::Services::Store::RequestPurchaseOperation::GetResults
Windows::Services::Store::RequestPurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::RequestStoreRateAndReviewOperation::DoWork
Windows::Services::Store::RequestStoreRateAndReviewOperation::GetResults
Windows::Services::Store::RequestStoreRateAndReviewOperation::RuntimeClassInitialize
Windows::Services::Store::StoreAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreAcquireLicenseResult::get_StorePackageLicense
Windows::Services::Store::StoreAppLicense::get_AddOnLicenses
Windows::Services::Store::StoreAppLicense::get_ExpirationDate
Windows::Services::Store::StoreAppLicense::get_IsActive
Windows::Services::Store::StoreAppLicense::get_IsDiscLicense
Windows::Services::Store::StoreAppLicense::get_IsTrial
Windows::Services::Store::StoreAppLicense::get_IsTrialOwnedByThisUser
Windows::Services::Store::StoreAppLicense::get_SkuStoreId
Windows::Services::Store::StoreAppLicense::get_TrialTimeRemaining
Windows::Services::Store::StoreAppLicense::get_TrialUniqueId
Windows::Services::Store::StoreAppLicense::RuntimeClassInitialize
Windows::Services::Store::StoreAvailability::get_AvailabilityId
Windows::Services::Store::StoreAvailability::get_EndDate
Windows::Services::Store::StoreAvailability::get_Price
Windows::Services::Store::StoreAvailability::get_StoreId
Windows::Services::Store::StoreAvailability::RequestPurchaseAsync
Windows::Services::Store::StoreAvailability::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreAvailability::RuntimeClassInitialize
Windows::Services::Store::StoreAvailability::set_ProductIdSkuId
Windows::Services::Store::StoreCanAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreCanAcquireLicenseResult::get_LicensableSku
Windows::Services::Store::StoreCanAcquireLicenseResult::get_Status
Windows::Services::Store::StoreCanAcquireLicenseResult::RuntimeClassInitialize
Windows::Services::Store::StoreCollectionData::get_AcquiredDate
Windows::Services::Store::StoreCollectionData::get_CampaignId
Windows::Services::Store::StoreCollectionData::get_DeveloperOfferId
Windows::Services::Store::StoreCollectionData::get_EndDate
Windows::Services::Store::StoreCollectionData::get_IsTrial
Windows::Services::Store::StoreCollectionData::get_ProductId
Windows::Services::Store::StoreCollectionData::get_SkuId
Windows::Services::Store::StoreCollectionData::get_StartDate
Windows::Services::Store::StoreCollectionData::get_TrialTimeRemaining
Windows::Services::Store::StoreCollectionData::RuntimeClassInitialize
Windows::Services::Store::StoreConsumableResult::get_BalanceRemaining
Windows::Services::Store::StoreConsumableResult::get_ExtendedError
Windows::Services::Store::StoreConsumableResult::get_Status
Windows::Services::Store::StoreConsumableResult::get_TrackingId
Windows::Services::Store::StoreContext::_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::AssociateWithStoreContext
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CreateStoreContextServer
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::get_User
Windows::Services::Store::StoreContext::get_User() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppLicenseAsync
Windows::Services::Store::StoreContext::GetAppLicenseAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppWindowHandle
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync([%s], %u) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetPackageFamilyNameFromPackage
Windows::Services::Store::StoreContext::GetStoreContextServer
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsAsync
Windows::Services::Store::StoreContext::GetStoreProductsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync([%s, %s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionAsync
Windows::Services::Store::StoreContext::GetUserCollectionAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync([%s], %u) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged(%llu) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync(%s, %u, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestPurchaseAsync
Windows::Services::Store::StoreContext::RequestPurchaseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::RuntimeClassInitialize
Windows::Services::Store::StoreContext::SendStoreRequestAsync
Windows::Services::Store::StoreContext::SendStoreRequestAsync(%u, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsyncHelper
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContextFactory::GetDefault
Windows::Services::Store::StoreContextFactory::GetDefault() invoked. (CV:%hs)
Windows::Services::Store::StoreContextFactory::GetForUser
Windows::Services::Store::StoreContextFactory::GetForUser() invoked. (CV:%hs)
Windows::Services::Store::StoreContextLicenseChangedCallback::RuntimeClassInitialize
Windows::Services::Store::StoreImage::get_Caption
Windows::Services::Store::StoreImage::get_Height
Windows::Services::Store::StoreImage::get_ImagePurposeTag
Windows::Services::Store::StoreImage::get_Uri
Windows::Services::Store::StoreImage::get_Width
Windows::Services::Store::StoreImage::RuntimeClassInitialize
Windows::Services::Store::StoreLicense::get_ExpirationDate
Windows::Services::Store::StoreLicense::get_InAppOfferToken
Windows::Services::Store::StoreLicense::get_IsActive
Windows::Services::Store::StoreLicense::get_SkuStoreId
Windows::Services::Store::StoreLicense::RuntimeClassInitialize
Windows::Services::Store::StorePackageInstallOptions::get_AllowForcedAppRestart
Windows::Services::Store::StorePackageLicense::~StorePackageLicense
Windows::Services::Store::StorePackageLicense::add_LicenseLost
Windows::Services::Store::StorePackageLicense::Close
Windows::Services::Store::StorePackageLicense::get_IsValid
Windows::Services::Store::StorePackageLicense::get_Package
Windows::Services::Store::StorePackageLicense::ReleaseLicense
Windows::Services::Store::StorePackageLicense::remove_LicenseLost
Windows::Services::Store::StorePackageLicense::RuntimeClassInitialize
Windows::Services::Store::StorePackageLicenseLostCallback::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdate::get_Mandatory
Windows::Services::Store::StorePackageUpdate::get_Package
Windows::Services::Store::StorePackageUpdate::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdateResult::get_OverallState
Windows::Services::Store::StorePackageUpdateResult::get_StorePackageUpdateStatuses
Windows::Services::Store::StorePackageUpdateResult::get_StoreQueueItems
Windows::Services::Store::StorePackageUpdateResult::RuntimeClassInitialize
Windows::Services::Store::StorePrice::get_CurrencyCode
Windows::Services::Store::StorePrice::get_FormattedBasePrice
Windows::Services::Store::StorePrice::get_FormattedPrice
Windows::Services::Store::StorePrice::get_FormattedRecurrencePrice
Windows::Services::Store::StorePrice::get_IsOnSale
Windows::Services::Store::StorePrice::get_SaleEndDate
Windows::Services::Store::StorePrice::RuntimeClassInitialize
Windows::Services::Store::StoreProduct::_SortSkus
Windows::Services::Store::StoreProduct::get_Description
Windows::Services::Store::StoreProduct::get_HasDigitalDownload
Windows::Services::Store::StoreProduct::get_Images
Windows::Services::Store::StoreProduct::get_InAppOfferToken
Windows::Services::Store::StoreProduct::get_IsInUserCollection
Windows::Services::Store::StoreProduct::get_Keywords
Windows::Services::Store::StoreProduct::get_Language
Windows::Services::Store::StoreProduct::get_LinkUri
Windows::Services::Store::StoreProduct::get_PackageFamilyName
Windows::Services::Store::StoreProduct::get_Price
Windows::Services::Store::StoreProduct::get_ProductKind
Windows::Services::Store::StoreProduct::get_Skus
Windows::Services::Store::StoreProduct::get_StoreId
Windows::Services::Store::StoreProduct::get_Title
Windows::Services::Store::StoreProduct::get_Videos
Windows::Services::Store::StoreProduct::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreProduct::RequestPurchaseAsync
Windows::Services::Store::StoreProduct::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreProduct::RuntimeClassInitialize
Windows::Services::Store::StoreProduct::SetStoreContext
Windows::Services::Store::StoreProductOptions::RuntimeClassInitialize
Windows::Services::Store::StoreProductPagedQueryResult::BuildMap
Windows::Services::Store::StoreProductPagedQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductPagedQueryResult::get_HasMoreResults
Windows::Services::Store::StoreProductPagedQueryResult::get_Products
Windows::Services::Store::StoreProductPagedQueryResult::GetNextAsync
Windows::Services::Store::StoreProductPagedQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductQueryResult::get_Products
Windows::Services::Store::StoreProductQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductResult::get_ExtendedError
Windows::Services::Store::StoreProductResult::get_Product
Windows::Services::Store::StoreProductResult::RuntimeClassInitialize
Windows::Services::Store::StorePurchaseProperties::get_ExtendedJsonData
Windows::Services::Store::StorePurchaseProperties::get_Name
Windows::Services::Store::StorePurchaseProperties::put_ExtendedJsonData
Windows::Services::Store::StorePurchaseProperties::put_Name
Windows::Services::Store::StorePurchaseProperties::RuntimeClassInitialize
Windows::Services::Store::StorePurchasePropertiesFactory::ActivateInstance
Windows::Services::Store::StorePurchasePropertiesFactory::Create
Windows::Services::Store::StorePurchaseResult::get_ExtendedError
Windows::Services::Store::StorePurchaseResult::get_Status
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemCompleted
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemStatusChanged
Windows::Services::Store::StoreQueueItem::add_Completed
Windows::Services::Store::StoreQueueItem::add_StatusChanged
Windows::Services::Store::StoreQueueItem::CancelInstallAsync
Windows::Services::Store::StoreQueueItem::CancelInstallAsync::<lambda_20c400d788d402156f2f9faf102b2a3b>::operator ()
Windows::Services::Store::StoreQueueItem::get_InstallKind
Windows::Services::Store::StoreQueueItem::get_IsDownloaded
Windows::Services::Store::StoreQueueItem::get_IsMandatory
Windows::Services::Store::StoreQueueItem::get_PackageFamilyName
Windows::Services::Store::StoreQueueItem::get_ProductId
Windows::Services::Store::StoreQueueItem::GetCurrentStatus
Windows::Services::Store::StoreQueueItem::PauseInstallAsync
Windows::Services::Store::StoreQueueItem::PauseInstallAsync::<lambda_5459d2b40bfb70f056128d7a36ecade4>::operator ()
Windows::Services::Store::StoreQueueItem::remove_Completed
Windows::Services::Store::StoreQueueItem::remove_StatusChanged
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync::<lambda_1142cabf375a7ff171a0635a2149ec61>::operator ()
Windows::Services::Store::StoreQueueItem::RuntimeClassInitialize
Windows::Services::Store::StoreQueueItemCompletedEventArgs::get_Status
Windows::Services::Store::StoreQueueItemStatus::get_ExtendedError
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallExtendedState
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallState
Windows::Services::Store::StoreQueueItemStatus::get_UpdateStatus
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedError
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedJsonData
Windows::Services::Store::StoreRateAndReviewResult::get_Status
Windows::Services::Store::StoreRateAndReviewResult::get_WasUpdated
Windows::Services::Store::StoreRateAndReviewResult::RuntimeClassInitialize
Windows::Services::Store::StoreRequestHelperFactory::SendRequestAsync
Windows::Services::Store::StoreRequestOperation::DoWork
Windows::Services::Store::StoreRequestOperation::GetResults
Windows::Services::Store::StoreRequestOperation::RuntimeClassInitialize
Windows::Services::Store::StoreSendRequestResult::get_ExtendedError
Windows::Services::Store::StoreSendRequestResult::get_HttpStatusCode
Windows::Services::Store::StoreSendRequestResult::get_Response
Windows::Services::Store::StoreSendRequestResult::RuntimeClassInitialize
Windows::Services::Store::StoreSku::_SortAvailabilities
Windows::Services::Store::StoreSku::get_Availabilities
Windows::Services::Store::StoreSku::get_BundledSkus
Windows::Services::Store::StoreSku::get_CollectionData
Windows::Services::Store::StoreSku::get_CustomDeveloperData
Windows::Services::Store::StoreSku::get_Description
Windows::Services::Store::StoreSku::get_FulfillmentType
Windows::Services::Store::StoreSku::get_Images
Windows::Services::Store::StoreSku::get_IsInUserCollection
Windows::Services::Store::StoreSku::get_IsSubscription
Windows::Services::Store::StoreSku::get_IsTrial
Windows::Services::Store::StoreSku::get_Language
Windows::Services::Store::StoreSku::get_Price
Windows::Services::Store::StoreSku::get_SkuId
Windows::Services::Store::StoreSku::get_StoreId
Windows::Services::Store::StoreSku::get_SubscriptionInfo
Windows::Services::Store::StoreSku::get_Title
Windows::Services::Store::StoreSku::get_Videos
Windows::Services::Store::StoreSku::GetIsInstalledAsync
Windows::Services::Store::StoreSku::RequestPurchaseAsync
Windows::Services::Store::StoreSku::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreSku::RuntimeClassInitialize
Windows::Services::Store::StoreSku::set_ProductId
Windows::Services::Store::StoreSku::SetStoreContext
Windows::Services::Store::StoreSubscriptionInfo::_ConvertDuration
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::get_HasTrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::RuntimeClassInitialize
Windows::Services::Store::StoreUninstallStorePackageResult::get_ExtendedError
Windows::Services::Store::StoreUninstallStorePackageResult::get_Status
Windows::Services::Store::StoreVideo::get_Caption
Windows::Services::Store::StoreVideo::get_Height
Windows::Services::Store::StoreVideo::get_PreviewImage
Windows::Services::Store::StoreVideo::get_Uri
Windows::Services::Store::StoreVideo::get_VideoPurposeTag
Windows::Services::Store::StoreVideo::get_Width
Windows::Services::Store::StoreVideo::RuntimeClassInitialize
Windows::Services::Store::UninstallStorePackageOperation::DoWork
Windows::Services::Store::UninstallStorePackageOperation::GetResults
Windows::Services::Store::UninstallStorePackageOperation::RuntimeClassInitialize
Windows-ApplicationModel-Store-SDK
WindowsCompareStringOrdinal
WindowsConcatString
WindowsCreateString
WindowsCreateStringReference
WindowsDeleteString
WindowsDeleteStringBuffer
WindowsDuplicateString
WindowsGetStringLen
WindowsGetStringRawBuffer
WindowsIsStringEmpty
WindowsPreallocateStringBuffer
WindowsPromoteStringBuffer
WindowsStoreSDK
WindowsStringHasEmbeddedNull
WindowsSubstring
WindowsSubstringWithSpecifiedLength
WindowsTrimStringEnd
WindowsTrimStringStart
WindowsUpdate
windowTitle
WINHTTP.dll
WinHttpAddRequestHeaders
WinHttpAddRequestHeaders(%s) failed
WinHttpCloseHandle
WinHttpConnect
WinHttpConnect failed for %s:%d
WinHttpCrackUrl
WinHttpCrackUrl failed
WinHttpGetDefaultProxyConfiguration
WinHttpGetIEProxyConfigForCurrentUser
WinHttpGetProxyForUrl
WinHttpOpen
WinHttpOpen failed
WinHttpOpenRequest
WinHttpOpenRequest failed
WinHttpQueryHeaders
WinHttpQueryHeaders failed, status code = %i
WinHttpReadData
WinHttpReadData completion failed
WinHttpReadData failed
WinHttpReceiveResponse
WinHttpReceiveResponse failed
WinHttpSendRequest
WinHttpSetOption
WinHttpSetOption CONTEXT_VALUE failed
WinHttpSetOption failed
WinHttpSetOption WINHTTP_OPTION_REDIRECT_POLICY failed
WinHttpSetOption(WINHTTP_ENABLE_SSL_REVOCATION failed
WinHttpSetOption(WINHTTP_OPTION_AUTOLOGON_POLICY) failed
WinHttpSetStatusCallback
WinHttpSetStatusCallback failed
WinHttpSetTimeouts
WinHttpSetTimeouts failed
winstore
WinStore
WinStoreAuth::_SendTokenRequestAndGetTickets
WinStoreAuth::AuthenticationInternal::CaptureGoldenAccountTicket
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountTicket
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromAppToRealIdInternal
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromRealIdToAppInternal
WinStoreAuth::AuthenticationInternal::CreateAuthenticationManager
WinStoreAuth::AuthenticationInternal::CreateGoldenAccountTokenRequest
WinStoreAuth::AuthenticationInternal::CreateLegacyTicketRequest
WinStoreAuth::AuthenticationInternal::CreateTokenBroker
WinStoreAuth::AuthenticationInternal::CreateTokenBrokerInternal
WinStoreAuth::AuthenticationInternal::CreateTokenRequestHelper
WinStoreAuth::AuthenticationInternal::ExtractAccountId
WinStoreAuth::AuthenticationInternal::ExtractProviderType
WinStoreAuth::AuthenticationInternal::ExtractTicket
WinStoreAuth::AuthenticationInternal::ExtractTicketFromTokenResponse
WinStoreAuth::AuthenticationInternal::ExtractTicketsFromTokenResult
WinStoreAuth::AuthenticationInternal::FetchStoreAccountIdFromRegistry
WinStoreAuth::AuthenticationInternal::FetchXboxLiveAccountId
WinStoreAuth::AuthenticationInternal::FindAccount
WinStoreAuth::AuthenticationInternal::FindCachedStorePrimaryAccount
WinStoreAuth::AuthenticationInternal::GetAccountProvider
WinStoreAuth::AuthenticationInternal::GetAllAccountTickets
WinStoreAuth::AuthenticationInternal::GetAllTokenBrokerAccounts
WinStoreAuth::AuthenticationInternal::GetAllXTokens
WinStoreAuth::AuthenticationInternal::GetCurrentIUser
WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicketForUri
WinStoreAuth::AuthenticationInternal::GetTicketForAccount
WinStoreAuth::AuthenticationInternal::GetXToken
WinStoreAuth::AuthenticationInternal::ManagePropertiesFromTokenResponse
WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar
WinStoreAuth::ConvertWebAccountIdFromAppToRealIdForUser
WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser
WinStoreAuth::GetAADFromRegistry
WinStoreAuth::GetAccountTicketFromTokenBroker
WinStoreAuth::GetAccountTicketsFromTokenBroker
WinStoreAuth::GetStorePrimaryAccountIdForUser
WinStoreAuth::SetProxyBlanket
WinstoreAuth_ProviderError
WinstoreAuth_SendTokenRequestAndGetTickets_Failure
WinstoreAuth_SLSFailure
WinstoreAuth_UserAuthRequired
Wj)Sj
Wj[Sj
Wj`Sj
Wj{Sj
Wj9Sj
WjASj
WjDSj
WjESj
WjeSj
wJf+S
WjfSj
WjhSj
WjIhPo
WjkSj
WjOSj
WjpSj
WjPSj
WjtSj
WjUSj
WjvSj
WjxSj
WjZSj
WLID1.0=
wp8xappx
WPQQV
WQQQP
wQVhh
wQWhh
WriteFile
writeRatingsAndReview
WSCollector::CollectStoreLog
WsCreateError
WsCreateHeap
WsCreateReader
WSErrorUtils::ConvertInternalErrorCodeToExternal
WsFindAttribute
WsFreeError
WsFreeHeap
WsFreeReader
WsGetReaderPosition
WSh|5
WsMoveReader
WsReadBytes
WsReadChars
WsReadEndAttribute
WsReadStartAttribute
WsReadStartElement
WsReadToStartElement
WsReadXmlBufferFromBytes
WsSetInputToBuffer
WVPSh0c
www.microsoft.com
WWWWWW
x(9s$t#
x(Qh(Y
x,SSh 
X~{TR
X0V0T
X2_2d2l2
xAj@j
xB9t$
XboxLiveAuthenticationDomain
XboxUserId
xcWWW
xi9t$
XL93uIW
XQVhp
xSu$W
Xtoken
xv9\$
X-Windows-Store-Debugging-Id
X-Windows-Store-Debugging-Id:%s
X-WP-ANID
x-xbl-contract-version:2
y QSh
y QSh`
y QVh
y QVh 
y QVh$
y QVh(
y QVh,
y QVh@
y QVh@~
y QVh@n
y QVh\T
y QVh`
y QVh|
y QVh<
y QVh<Q
y QVh0
y QVh8
y QVh8m
y QVh8s
y QVh8u
y QVhd
y QVhH
y QVhh
y QVhH
y QVhh
y QVhL
y QVhl
y QVhp
y QVhP
y QVhp
y QVhp/
y QVhPM
y QVht
y QVhX
y QVhx
y QVhx{
y QVhxn
y QVhxr
y QWh
y QWh4
y QWhH
y!QVh
y"QSh
y"QSh,r
y"QShH
y"QShl
y"QVh
y"QVh 
y"QVh :
y"QVh O
y"QVh$
y"QVh(
y"QVh,
y"QVh@
y"QVh@A
y"QVh@p
y"QVh@Q
y"QVh@z
y"QVh\
y"QVh\c
y"QVh`
y"QVh`E
y"QVh`I
y"QVh`O
y"QVh|
y"QVh0
y"QVh4
y"QVh8
y"QVh8p
y"QVhd
y"QVhH
y"QVhh
y"QVhh@
y"QVhhH
y"QVhHs
y"QVhl
y"QVhL
y"QVhl
y"QVhp
y"QVhP
y"QVhp
y"QVhP
y"QVhp
y"QVhP
y"QVhp
y"QVhP
y"QVht
y"QVhT
y"QVhx
y"QVhX
y"QVhx
y"QVhX]
y"QVhxN
y"QVhxP
y"QWh
y"QWh >
y"QWh@
y"QWh\
y"QWh`I
y"QWh|G
y"QWh8
y"QWhH
y"QWhp
y"QWhP
y"QWhT
y"QWhX
y"QWhx}
y"QWhxl
y#QVh
y#QVhxf
y$QQS
y$QSh
y$QShd
y$QShX
y$QVh
y$QVh(
y$QVh($
y$QVh@
y$QVh@b
y$QVh`
y$QVh|
y$QVh<d
y$QVh<G
y$QVh0
y$QVhL
y$QVhT
y$QVhX
y$QVhx9
y$QWh
y$QWhPG
y$Vh@
y$Whx
y%QSh
y%QSh 
y%QShx
y%QShx+
y%QVh
y%QVh(\
y%QVh@
y%QVh`Q
y%QVh`x
y%QVh0.
y%QVh4
y%QVhh/
y%QVhT
y%QVhx
y%QVhX0
y%QWh
y%QWh`
y%QWh8
y%QWhd@
y%QWhH
y%QWhT
y%QWhx
y&QWh
y&Vhd
y&Vhx7
y(QVh
y(QWh
y(QWh@
y(QWh8K
y)QPh
y)QPhx
y)QSh
y)QVhh6
y)QWh
y)Wh$
y*QSh
y*QVhp
y*QWh
y*QWhD;
y,QSh(2
y,QVh
y,QVh(
y,QVh0
y,QVh0W
y,QWh
y.QSh
y.QVh@
y.QVh@X
y.QVh`x
y.QVhh
y.QVhx
y.QVhXb
y.VhX
y/QSh
y/QSh(D
y/QShP
y/QVh
y/QVh<
y/QVh<R
y/QVhh
y/QVhHl
y/QVhX
y/QWh
y:QSh
y:QSh0
y:QVh
y:QVhP
y:QVht4
y:QVhx*
y:QWh
y;QSh
y;QVh
y?QSh
y?QWh
y?Whx
y@QVh
y[QVh
y\QShp
y\QVh
y]QWh
y^QWh`x
y^QWhp
Y__^[
y_QVh
y_QVhh'
y_QVhhg
y_QVhpU
y_QVhx_
y|QVh
y~QVh
y~QVh0`
y~QVhX+
y+QVh
y+QVh<
y+QVhX
y+QVhXc
y+QWh
y+QWh0
y+QWhh
y<QSh
y<QVh
y=QSh
y=QSh@^
y=QVh
y=QVh`
y=QWh
y>QSh 
y>QWh
y>QWh(
y0QSh
y0QSh@
y0QShp
y0QShx
y0QVh
y0QVh@
y0QVhH
y0QVhPd
y0QVhX
y0QVhX/
y0QWh
y0QWh@
y0QWhl
y0QWhpw
y0QWhpx
y0QWht
y0QWhX{
y1QSh
y1QVh
y1QVh(*
y2QSh
y2QSh`B
y2QShXC
y2QVh
y2QVh<r
y2QVhp
y2QWh
y2QWh`
y3QSh
y3QVh
y3QWh
y3QWh0
y3QWh8F
y4QSh
y4QSh@
y4QVh
y4QWh
y5QSh
y5QSh 
y5QSh,
y5QShd
y5QShH=
y5QVh
y5QVh(
y5QVhh
y5QVhX
y5QWh
y6QSh
y6QShx
y6QVh
y6QWh
y6QWhh
y7QShPI
y7QShT
y7QVh
y7QVhh
y7QWh
y8QVh
y8QWhHA
y9QSh
y9QSh(
y9QVh
y9QVhh
y9QVhx
y9QWh
yBQSh@
ybQVh
yBQVh8
ybQVhx7
ybQWh
ybQWh(R
ybQWhPL
yCQSh0_
ycQVh
yCShH
yDQShXd
yDQWh
yDQWh@
yEQVh
yEQVh,
yFQVh
yfQVh
yFQVh 
yfQVh@D
yfQVhh5
yfQVhT
yGQVh
yHQShH`
yHQShp
yHQVh@
yIQVh
yjQVh
yjQVh ,
yjQVh@0
yJQVhD
yjQVhHW
yjQWhHZ
yKQSh
ykQVh
yKQVh
ykQVhx
ykQWh
ykQWh`}
yKQWhd
Ylp)d_
yMQSh
yMQVh
ymQWh
yMQWh
ynQVhT
yNQWh
yoQShh
yOQVh
YPh8#
YPhHF
ypQVh
ypQVh8S
yPQWh
yPQWhx
y'QPh
yqQSh
yQQVh
yqQVh
yQQWh@
y'QSh
y-QSh
y'QSh 
y-QSh .
y-QSh@
y'QSh\
y-QSh0
y-QSh8}
y'QShd
y'QShh
y-QShH,
y'QShP
y'QShp(
y-QShPG
y'QShX
y'QVh
y-QVh
y'QVh 
y'QVh$u
y'QVh(
y'QVh(;
y'QVh(E
y'QVh,
y-QVh,
y'QVh@
y-QVh@
y'QVh\q
y'QVh`
y'QVh`5
y'QVh`6
y'QVh`x
y'QVh|M
y-QVh|p
y'QVh<
y'QVh<R
y'QVh0
y-QVh4
y'QVh8
y'QVh8=
y'QVh8F
y'QVhH
y'QVhHQ
y'QVhl
y'QVhL
y'QVhl
y'QVhp
y'QVhP
y'QVhp:
y'QVhP@
y-QVhPG
y'QVhT
y'QVhx
y'QVhX
y'QVhx
y-QVhX
y'QVhX3
y'QVhX8
y'QVhx9
y'QVhxa
y'QVhXb
y'QVhXO
y'QVhXP
y'QVhXp
y'QWh
y-QWh
y'QWh$u
y'QWh(
y'QWh,
y-QWh,
y'QWh@
y-QWh0
y-QWh8
y'QWh8}
y'QWhH
y-QWhh
y'QWhHC
y'QWhhv
y-QWhp
y'QWhT
y-QWht
y'QWhx9
yrQWhx"
yTQVh
yUQVh
yUQWh
yVQVh
yVQWh
ywQVh
yxQVh@Y
yxQWh
yXQWhD
yYQSh
yyQVh8
yyQVhHV
yzQVh`/
yzQVh`2
z(Tys
Z)/Z%
Z9p,tL3
zChkHr(AsWeak(pStoreContext, &_wrStoreContext))
ZQVh 
ZuJf9Lr
